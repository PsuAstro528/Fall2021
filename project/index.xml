<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Class Project on PSU Astro 528</title><link>https://psuastro528.github.io/project/</link><description>Recent content in Class Project on PSU Astro 528</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://psuastro528.github.io/project/index.xml" rel="self" type="application/rss+xml"/><item><title>Project Proposal due</title><link>https://psuastro528.github.io/project/proposal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/project/proposal/</guid><description>Use the link provided via course announcement or Canvas to create your repository for the project proposal.
Grading Rubric Statement of the project goal (0 points, but required so the rest makes sense) Description of the inputs. Be sure to specify what parameters (e.g., dataset size, resolution of grid, number of samples, etc.) will be used to explore how performance scales (1 point) Description of the outputs (1 point) Detailed plan for how the code will be tested (1 point) Discussion of the relevant range of problem sizes (1 point) Complete list of what computer architectures, programming languages, and libraries you will use, as well as an justification of your choices (1 point)</description></item><item><title>Serial Code for Project due</title><link>https://psuastro528.github.io/project/serial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/project/serial/</guid><description>At this point the code does not need to be optimized. If you have time, it would be best to include the results of benchmarking and/or profiling in the README, to help both you and the reviewer identify which sections are ammenable to optimization.
Grading Rubric Code performs proposed tasks (1 point) Comprehensive set of unit tests, at least one integration or regression test (1 point) Code passes tests (1 point) Student code uses a version control system effectively (1 point) Repository includes many regular, small commits (1 point) Documentation for functions&amp;rsquo; purpose and design (1 point) Comprehensive set of assertions (1 point) Variable/function names consistent, distinctive &amp;amp; meaningful (1 point) Useful &amp;amp; consistent code formatting &amp;amp; style (1 point) Code is modular, rather than having chunks of same code copied and pasted (1 point) Preparing Your Own Code for Review Provide overview to help reviewer Please provide your reviewers with a README or other instructions to help them figure out how to spend their time reviewing your code in a way that is most likely to be helpful to you.</description></item><item><title>First Parallel Project Code due</title><link>https://psuastro528.github.io/project/parallel1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/project/parallel1/</guid><description>Submit First Parallel Code for Project Choice of portion of code to parallelize (1 point) Choice of approach for parallelizing code (1 point) Code performs proposed tasks (2 point) Unit/regression tests comparing serial &amp;amp; parallel versions (1 point) Code passes tests (1 point) General code efficiency (1 point) Implementation/optimization of multi-core parallelization (2 points) Significant performance improvement (1 point)</description></item><item><title>Second Parallel Implementation</title><link>https://psuastro528.github.io/project/parallel2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/project/parallel2/</guid><description>Grading Rubric for second parallelization method Choice of portion of code to parallelize (1 point) Choice of approach for parallelizing code (1 point) Code performs proposed tasks (2 point) Unit/regression tests comparing serial &amp;amp; parallel versions (1 point) Code passes tests (1 point) General code efficiency (1 point) Implementation/optimization of second type of parallelism (2 points) Significant performance improvement (1 point)</description></item><item><title>Completed Project</title><link>https://psuastro528.github.io/project/final_submission/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/project/final_submission/</guid><description>Grading Rubric for Final Project Submission Results of benchmarking code (typically included in project README, but more comprehensive benchmarking could be in a separate document, notebook or directory) Performance versus problem size for fixed number of workers (1 point) Performance versus number of workers for fixed problem size (1 point) Documentation: README: (1 point) Project overview Instructions on how to install and run code CI testing or detailed instructions on how to rerun tests Results of benchmarking and/or pointer to where results can be found Overview of code/package structure (if project is larger than one notebook) Docstrings: Coverage, clarity and quality (1 point) Summary of lessons learned (1 point)</description></item><item><title>Project Presentations</title><link>https://psuastro528.github.io/project/presentations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/project/presentations/</guid><description>Schedule of Student Presentations Grading Rubric for Project Presentation Motivation/Introduction/Overview of project, so class can understand broader goals (1 point) Explanation of specific calculation being performed, so class can understand what follows (1 point) Description of optimization and parallelziation approaches attempted (1 point) Analysis/explanation Identify most time consuming part(s) of calculations and specify what is being benchmarked (0 points) Benchmarks of how performance of each version scales with problem size for fixed number of workers (1/2 point) Benchmarks of how performance of parallel versions scales with nubmer of workers for given problem size (1/2 point) Description/analysis/discussion of what lessons you learned from the class project (1 point)</description></item><item><title>Grading Rubrics</title><link>https://psuastro528.github.io/project/rubrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/project/rubrics/</guid><description>Class Project The class project consists of several parts, each of which has its own submission deadline. It is particularly important that you provide code for peer review on time, so that your peer reviewer is able to provide thoughtful and helpful feedback in time for it to improve your code for the latter parts of the project. The project grade will be based on:
Project Components Project Proposal (5 points) Checkpoint 1: Serial version of code (10 points) Checkpoint 2: Multi-core version of code (10 points) Peer code reviews (5 points) Checkpoint 3: Distributed-memory/GPU/TPU/Cloud version of code (10 points) Final Submission: Completed project code with documetation, benchmarking results and summary of lessons learned.</description></item></channel></rss>
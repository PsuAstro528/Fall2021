<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Penn State Astro 528: High-Performance Scientific Computing for Astrophysics (Fall 2021) on PSU Astro 528</title><link>https://psuastro528.github.io/</link><description>Recent content in Penn State Astro 528: High-Performance Scientific Computing for Astrophysics (Fall 2021) on PSU Astro 528</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 15 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://psuastro528.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Basic Course Information</title><link>https://psuastro528.github.io/syllabus/basic_info/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/syllabus/basic_info/</guid><description>Course: Astro 528: High-Performance Scientific Computing for Astrophysics (Fall 2021) Class Meetings: 3:30-4:30pm Mondays &amp;amp; 1:30-3:00pm Thursdays in Davey Lab 538 (current plan) There is the possibiliy that some or all classes may transition on short notice to a remote synchonous or blended format due to health and safety concerns. Instructor: Eric Ford Email: ebf11 at psu dot edu Phone: x3-5558 Office Hours: Thursdays 3-4pm (or by appointment) via Zoom (see meeting ID inside Canvas) Website: https://psuastro528.</description></item><item><title>Course Topics</title><link>https://psuastro528.github.io/syllabus/topics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/syllabus/topics/</guid><description>Overview of Scientific Computing, High Performance Computing, Data Science &amp;amp; Big Data Priorities for Scientific Computing Types &amp;amp; Choices of Programming Languages Floating Point Arithmetic Best Practices for Scientific Programming Version Control (e.g., git) Testing Continuous Integration Documentation &amp;amp; Literate Programing Debugging Benchmarking &amp;amp; Profiling Reproducible Results &amp;amp; Workflows Packages, Environments, Containers &amp;amp; Images Efficient Workflows Optimizing Code Performance Modern Processors, Memory &amp;amp; Networking Architectures Choice of Algorithms Choice of Data Structures Serial Codes Shared Memory Systems (i.</description></item><item><title>Readings</title><link>https://psuastro528.github.io/syllabus/readings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/syllabus/readings/</guid><description>Textbooks The required textbooks for this course are:
Writing Scientific Software: A Guide to Good Style by Suely Oliveira, Cambridge University Press, 1st edition, September 18, 2006, ISBN-10: 0521858968. (I recommend considering a used version.) Think Julia: How to Think like a Computer Scientist by Ben Lauwens and Allen Downey, 1st edition, May 14, 2019. ISBN-10:1492045039 (I recommend using the version avaliable online for free.) I will also suggest readings from an optional textbook:</description></item><item><title>Assessed Work</title><link>https://psuastro528.github.io/syllabus/assignments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/syllabus/assignments/</guid><description>The assessed work for this course consists of computer lab/homework assignments (40%), a class project (50%) and class discussion (10%; including either contributing to class discussion and/or submitting reading questions. There are no exams. The class project will have several components and will be described in more detail below.
The planned assignment due dates are in the schedule section of the syllabus. Any revision to the due dates will be announced at the time they are assigned.</description></item><item><title>Requirements</title><link>https://psuastro528.github.io/syllabus/requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/syllabus/requirements/</guid><description>NEED TO UPDATE THIS PAGE Course Prerequisites This course is designed for Astronomy &amp;amp; Astrophysics graduate students. While Astro 501 is listed as a corerequsite by the registrar, that is primarily a formality, so that non-Astrophysics students will contact me to discuss their background before registering. Previously, we have had some graduate students from physics and engineering who did very well in the course. Of course, some extra thought may be required to figure out how concepts from the course presented in the context of astronomy or astrophysics could be applied to their own field of study.</description></item><item><title>Expectations</title><link>https://psuastro528.github.io/syllabus/expectations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/syllabus/expectations/</guid><description>Safety Students are required to follow all Penn State requirements related to safety, particularly in relation to the COVID-19 pandemic. All students, faculty, staff and visitors are required to wear masks at all times in all indoor public spaces, including the classroom. Students are expected to wear masks properly, covering the bridge of their nose and under their chin. While some students may be comfortable working closely with a partner, others may prefer to maintain physical distance.</description></item><item><title>Accomodations</title><link>https://psuastro528.github.io/syllabus/accomodations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/syllabus/accomodations/</guid><description>Academic Success, Learning Assistance, &amp;amp; Student Resources The Eberly College of Science is committed to the academic success of students enrolled in the College&amp;rsquo;s courses and undergraduate programs. When in need of help, students can utilize various College and University wide resources for learning assistance. (https://science.psu.edu/current-students/support-network)
Accomodations Note to Students with Disabilities:
Penn State welcomes students with disabilities into the University’s educational programs. Every Penn State campus has an office for students with disabilities.</description></item><item><title>Grading Rubrics</title><link>https://psuastro528.github.io/project/rubrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/project/rubrics/</guid><description>Class Project The class project consists of several parts, each of which has its own submission deadline. It is particularly important that you provide code for peer review on time, so that your peer reviewer is able to provide thoughtful and helpful feedback in time for it to improve your code for the latter parts of the project. The project grade will be based on:
Project Components Project Proposal (5 points) Checkpoint 1: Serial version of code (10 points) Checkpoint 2: Multi-core version of code (10 points) Peer code reviews (5 points) Checkpoint 3: Distributed-memory/GPU/TPU/Cloud version of code (10 points) Final Submission: Completed project code with documetation, benchmarking results and summary of lessons learned.</description></item><item><title>Preparing your Code for Review</title><link>https://psuastro528.github.io/project/code_reviews/prep/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/project/code_reviews/prep/</guid><description>Preparing Your Own Code for Review Provide overview to help reviewer Please provide your reviewers with a README or other instructions to help them figure out how to spend their time reviewing your code in a way that is most likely to be helpful to you.
Make sure code is in plain text files (i.e., not only Jupyter notebooks) Jupyter and Pluto notebooks are great to document how to use your code.</description></item><item><title>How to Conduct Code Review</title><link>https://psuastro528.github.io/project/code_reviews/how_to/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/project/code_reviews/how_to/</guid><description>Once you&amp;rsquo;ve been granted permission to a repository to review, browse to the repository on GitHub, take a look at the README (or whatever other documentation they provided).
Next, browse the source files on GitHub by clicking on the file to review. Try to provide specific feedback on potential opporunities for improvement in each of the categories listed below. In most cases, I think it will generally be easiest to create a new issue for each suggestion linked to the line(s) of codes that you&amp;rsquo;re commenting on (see below for step-by-step instructions).</description></item><item><title>Follow-up on your Code Review</title><link>https://psuastro528.github.io/project/code_reviews/follow_up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/project/code_reviews/follow_up/</guid><description>Making use of your code review On GitHub, browse to your repository and click the &amp;ldquo;Issues&amp;rdquo; tab. Then you should have a list of all the issues that have been created. You can click on each issue&amp;rsquo;s name to see the specific lines of code they cited and to read the reviewer&amp;rsquo;s full comments. Some suggestions will clearly be good ideas and easy to fix quickly. Once you&amp;rsquo;ve updated the code as appropraite (commited and pushed that change), then you can enter &amp;ldquo;Done&amp;rdquo; in the box at the bottom and click &amp;ldquo;Close issue&amp;rdquo;.</description></item><item><title>Rubric for Peer Review</title><link>https://psuastro528.github.io/project/code_reviews/rubric/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/project/code_reviews/rubric/</guid><description>Grading Rubric for Assessing the Peer Review Constructive suggestions for improving programming practices (1 point) Specific, constructive suggestions for improving code readability/documentation (1 point) Specific, constructive suggestions for improving tests and/or assertions (1 point) Specific, constructive suggestions for improving code modularity/organization/maintainability (1 point) Specific, constructive suggestions for improving code efficiency (1 point) Finding any bugs (if code author confirms) (bonus points?)</description></item><item><title>Creating Account on Roar</title><link>https://psuastro528.github.io/tips/aci/create_account/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/tips/aci/create_account/</guid><description>Create Account at ICDS-ACI/Roar All students should request an ACI account before the second class meeting.
On the account request form,
specify ebf11 as the sponsor account, list Astro528 as the research description, leave computational and Data Requirements box blank (since they already know what will be required for the class.) Students who already have an ACI account should contact i-ASK to request that they add your account to the Astro 528 group.</description></item><item><title>Initial Setup for Astro 528 on ACI</title><link>https://psuastro528.github.io/tips/aci/initial_setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/tips/aci/initial_setup/</guid><description>TODO: Need to update this page for Fall 2021 Setup Julia kernel to work with ACI&amp;rsquo;s Jupyter notebook server Browse to portal.aci.ics.psu.edu Login (if necessary) Click Interactive Apps on top menu Before using Julia on ACI for the first time Choose ACI Interactive Desktop Click Launch Wait while your job starts Once the Launch noVNC in new tab button appears, click it Open a terminal via second button on bottom toolbar Run the following code in the terminal module load python/3.</description></item><item><title>Jupyter Notebooks on ACI</title><link>https://psuastro528.github.io/tips/aci/jupyter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/tips/aci/jupyter/</guid><description>TODO: Need to update this page for Fall 2021 Start a Jupyter notebook session on ACI Each time in the future you want to start a Jupyter notebook session on ICS-ACI
Make sure you have an account on ACI and have completed the initial setup Browse to portal.aci.ics.psu.edu Login (if necessary) Click Interactive Apps on top menu Choose Jupyter Notebook Select: Anaconda version: 5.0.1-3.6.3 Allocation: Open Number of hours: 2 hours Node type: ACI-i Click Launch Wait while your job starts Once the Connect to Jupyter Notebook Server button appears, click it Near the upper right, there&amp;rsquo;s a New button, from which you can create a new blank notebook using Julia 1.</description></item><item><title>Fix for SSH keys on ACI</title><link>https://psuastro528.github.io/tips/aci/julia_parallel_on_aci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/tips/aci/julia_parallel_on_aci/</guid><description>TODO: Need to Update for Fall 2021 When you first try submiting a batch job to ACI to run Julia on multiple processors, you may get one of two error messages relaed to your SSH keys requiring a password or your ssh keys not being authorized.
First, try sshing from one ACI system to another (e.g., ssh aci-b.aci.ics.psu.edu). Does it just connect you? Or does it ask you for a password?</description></item><item><title>Running Jupyter on a GPU node</title><link>https://psuastro528.github.io/tips/aci/jupyter_gpu_nodes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/tips/aci/jupyter_gpu_nodes/</guid><description>TODO: Need to Update for Fall 2021
You can currently access a K4000 GPU on the ACI interactive nodes from the Jupyter notebook server. Students in the class can access more powerful P100 GPUs (with support for double precission arithmetic) via the CyberLAMP cluster by specifying the following PBS options:
-A cyberlamp_class -l qos=cl_class -l nodes=1:ppn=1:gpus=1 If you would like to run Jupyter on a GPU node, then you can try the following instructions kindly provided by Justin Petucci:</description></item><item><title>Online Textbooks &amp; Tutorials</title><link>https://psuastro528.github.io/resources/textbooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/resources/textbooks/</guid><description>Julia Think Julia: How to Think Like a Computer Scientist Statistics with Julia: Fundamentals for Data Science, Machine Learning and Artificial Intelligence. by Yoni Nazarathy and Hayden Klok, Springer Series in the Data Sciences, PDF of draft version. (I recommend using the version avaliable online for free.) Related Courses Applications of Parallel Computers (UC Berkeley CS 267)
Introduction to Computational Thinking (MIT 18.S191)
Quantitative Economics with Julia</description></item><item><title>Software</title><link>https://psuastro528.github.io/resources/software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/resources/software/</guid><description>Julia Julia Manual Think Julia: How to Think Like a Computer Scientist Introcution to Applied Linear Algebra: Vectors, Matrices and Least Squares: Julia Language Companion The Fast Track to Julia 1.0 First Contact with Julia Learn Julia in Y Minutes Julia by Example Noteworthy Differences from other Languages Why Julia? Julia Tutorials Julia Blog Julia Discourse Forum Julia on StackOverflow Julia on Reddit Julia Twitter feed Julia Slack channel Pluto.</description></item><item><title>Hardware Resources</title><link>https://psuastro528.github.io/resources/hardware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/resources/hardware/</guid><description>Penn State Resources Roar: Institue for Computational &amp;amp; Data Sciences&amp;rsquo;s Advanced CyberInfrastructure (ICDS-ACI) Getting Started on ICS-ACI Roar User&amp;rsquo;s Guide Roar Training Series Roar On-demand Tutorial Videos Open On Demand Portal (written for OSU, but much of info is similar) Cloud Computing Penn State Cloud Program Cloud Computing JuliaHub Domino Data Labs Amazon EC2 Google Compute Engine Google Colaboratory GPU acceleration for Julia using Google Colaboratory Improve this page You can add your suggestions by submitting a pull request for editing this file&amp;rsquo;s source.</description></item><item><title>Creating lab assignments</title><link>https://psuastro528.github.io/tools_used/creating_labs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/tools_used/creating_labs/</guid><description>Workflow for creating lab assignments Create Development repostiory on GitHub: Create an empty private repository named labN-dev at GitHub. Go to the class organization page at GitHub, click New Repository Name: labN-dev Description: Lab N Private Uncheck Initialize README, .gitignore: None, License: None Create repository- Change into directory of lab exercises Create local development repository Change into directory of lab exercises cd ~/Teach/Astro528/Fall2021/exercises Create new Julia package with Project.</description></item><item><title>Learning goals</title><link>https://psuastro528.github.io/lessons/week1/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week1/goals/</guid><description>Week 1 Understand course goals, overview, organization Recognize opportunities to improve producitivty through software development practices Exercise 1: Use software development tools Access ICDS-ACI Portal&amp;rsquo;s Jupyter Notebook Server using Julia Kernel Optionally access Julia+Git on your own computer Use Git &amp;amp; GitHub.com for retreiving and submitting lab assignments Use variables, strings and Markdown in Julia Use unit tests Exercise 2: Floating Point Arithmetic, Functions Write code as a function Use/write tests of code Become vigilant about potential pitfalls with floating-point arithmetic Exercise 3: Develop your personal goals for semester Lessons along the way Types: Strings, Single &amp;amp; double precssion Writing markdown text Modules, Packages, Namespace using/import, include Functions, Docstrings Pseudo-random numbers, Broadcasting, Type stability, Online algorithms</description></item><item><title>Readings</title><link>https://psuastro528.github.io/lessons/week1/read/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week1/read/</guid><description>Week 1: Prior to Monday&amp;rsquo;s class Think Julia Ch 1: The Way of the Program Github tutorial (at least through “Fork a Repo”,) Follow advice for &amp;ldquo;Connecting over SSH&amp;rdquo; rather than &amp;ldquo;Connecting over HTTPS&amp;rdquo; Prior to Thursday&amp;rsquo;s class The Rationale for Julia: Getting Started with Julia Programming (6pgs avaliable via &amp;ldquo;First Pages&amp;rdquo; as Preview/&amp;ldquo;Look Inside!&amp;quot;) Writing Scientific Software Ch 2 (22pgs): Scientific Computation and numerical analysis If it will help you with the lab: Think Julia Ch 2: Variables, Expressions &amp;amp; Statements</description></item><item><title>Course Overview (slides)</title><link>https://psuastro528.github.io/lessons/week1/course_overview/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week1/course_overview/</guid><description>## Welcome Penn State Astro 528 High-Performance Scientific Computing for Astrophysics Eric Ford --- ## Safety &amp; Respect ___ ### Masks - As of August 4, all students, faculty, staff and visitors are required to wear masks at all times in all indoor public spaces, including the classroom. - Students are expected to wear masks properly, covering the bridge of their nose and under their chin. - Studies indicate that surgical masks are much more effective than cotton masks.</description></item><item><title>Exercises</title><link>https://psuastro528.github.io/lessons/week1/lab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week1/lab/</guid><description>Lab 1: Tools, Floating Point Arithmetic, Functions, Tests (Due Aug 29)
Exercise 1: Get started using core development tools ICDS-ACI portal git GitHub.com Julia Pluto Notebooks Exercise 2: Floating Point Arithmetic, Functions, Tests Exercise 3: Personal Goals (save at least 15 minutes for this one) If you&amp;rsquo;re waiting on getting your account on ICDS-ACI, then I&amp;rsquo;d suggest that you start with exercise 3, since thinking about your goals does not require any accounts or special software.</description></item><item><title>Reviewing lab assignments</title><link>https://psuastro528.github.io/tools_used/reviewing_labs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/tools_used/reviewing_labs/</guid><description>Workflow for reviewing lab assignments Go to GitHub Classroom
Click class Click Assignment To review a student&amp;rsquo;s work:
Click &amp;ldquo;View repository&amp;rdquo; next to student&amp;rsquo;s github id Look if &amp;ldquo;Pull requests&amp;rdquo; has a number &amp;gt;=1 after it. If so: Click &amp;ldquo;Pull requests&amp;rdquo;, click pull request name Click &amp;ldquo;Checks&amp;rdquo; and see that Travis returns &amp;ldquo;Succes&amp;rdquo; Click &amp;ldquo;Files changed&amp;rdquo; Click &amp;ldquo;File filter&amp;hellip;&amp;quot;, select .jmd (or click &amp;ldquo;Jump to&amp;hellip;&amp;quot;, select ex.</description></item><item><title>Pluto for Slides</title><link>https://psuastro528.github.io/tools_used/pluto_slides/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/tools_used/pluto_slides/</guid><description>See this post</description></item><item><title>Updating Pluto Package Environment</title><link>https://psuastro528.github.io/tools_used/pluto_pkg_management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/tools_used/pluto_pkg_management/</guid><description>See Pluto wiki</description></item><item><title>Technology used</title><link>https://psuastro528.github.io/tools_used/tools_used/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/tools_used/tools_used/</guid><description>Tools for Creating &amp;amp; Maintaining Course Content GitHub Share lessons &amp;amp; assignments, version control, backup Provide feedback to students via pull requests Hosts website, lesson, assignments GitHub Classroom For distributing lessons &amp;amp; assignments via individual private repositories, providing feedback via GitHub pull requests. Julia Programming language For a modern high-performance high-level programming language capable of parallelization at all scales Pluto notebooks For integrated lessons, tutorials, labs encouraging literate computing and avoiding confusion due to notebook state Jupyter notebooks For integrated lessons, tutorials, labs encouraging literate computing Julia Markdown: For integrating documentation and code with human-readable version control Weave: Converts draft Jupyter notebooks into Julia Markdown Quickly update and regenerate Jupyter notebooks from updated Julia Markdown.</description></item><item><title>Creating the website</title><link>https://psuastro528.github.io/tools_used/setup_website/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/tools_used/setup_website/</guid><description>Creating the Website for Astro 528 Astro 528&amp;rsquo;s website uses the Hugo, a fast static-site generator, the DocDock theme theme, Reveal.js for building slide decks to organize class discussion and serve as a reference for students outside of classroom, and and GitHub pages for html hosting.
Unforuntatley, I didn&amp;rsquo;t take detailed notes on the initial setup. Basically, I followed the instructions here, using option 1 (&amp;ldquo;Install DocDock as git submodule&amp;rdquo;). For customizations, see:</description></item><item><title>Updating the website</title><link>https://psuastro528.github.io/tools_used/update_website/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/tools_used/update_website/</guid><description>Updating the Website for Astro 528 Astro 528 uses the hugo static site generator, the docdock theme, github pages for html hosting, and github actions for triggering builds. Once those are setup, then updating the website can be done as follows:
Change into the website source directory, pull any updates from other machines, and start the hugo server locally
cd Teach/Astro528/Spring2019/Spring2019-website-src git pull hugo server Only edit files in content folder and its subfolders.</description></item><item><title>Symposium for Teaching &amp; Learning with Technology 2020</title><link>https://psuastro528.github.io/tools_used/tlt2020/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/tools_used/tlt2020/</guid><description>Integrating Jupyter Notebooks, Version Control, and GitHub Classroom
Eric Ford
Dept. of Astronomy &amp;amp; Astrophysics
Note: Jupyter Notebooks enable instructors and students to integrate text, equations, figures, and computer code into lessons and assignments. Git, a distributed version control system, enables multiple contributors such as instructors, students, colleagues to efficiently update and improve curricular materials and assignments. GitHub Classroom allows instructors to see student submissions and provide detailed feedback on their work.</description></item><item><title>Acknowledgments</title><link>https://psuastro528.github.io/tools_used/ackl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/tools_used/ackl/</guid><description>Acknowledgments People Justin Petucci of ICS-ACI for providing instructions on setting up the Jupyter Notebook server to work with a Julia kernel. Michael Potter of ECoS Digital Learning for help creating Docker container/image for running Jupyter Notebook server with a Julia kernel. Adam Lavely, Christopher Blanton &amp;amp; Chuck Pavloski for helping to find online resources (from their CSE 597 course) Hardware ICS-ACI for providing classroom support CyberLAMP team &amp;amp; NSF for providing GPU and Phi resources</description></item><item><title>Learning goals</title><link>https://psuastro528.github.io/lessons/week2/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week2/goals/</guid><description>Week 2 Priorities for Scientific Computing Exercise 1: Benchmarking Benchmark functions accurately Predict cost of an algorithm based on Big-O analysis Identify real world complications that affect scaling Exercise 2: Numerical Stability of N-body Integration Integrate differential equations Compare the accuracy and numerical stability of results as a function of time step, order and integration Appreciate importance of numerical stability Exercise 3: Assertions, Unit Tests &amp;amp; Continuous Integration Testing Write effective tests for floating point calculations Reduce bugs via assertions Identify bugs promptly via unit testing Identify bugs promptly via continuous integration testing End-to-end Testing to validate code Lessons along the way Just-in-Time (JIT) Compilation Types of languages Compiled vs Interpretted vs JIT Static/dynamic type-checking Plotting with Plots.</description></item><item><title>Readings</title><link>https://psuastro528.github.io/lessons/week2/read/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week2/read/</guid><description>Week 2: Prior to Monday&amp;rsquo;s class Submit Lab 1 Writing Scientific Software Ch 3: Priorities (6pg) Writing Scientific Software Ch 4: Famous Disasters (4pg) Best Practices for Scientiﬁc Computing: Sec. 1-4 (6pg) Prior to Thursday&amp;rsquo;s class Best Practices for Scientiﬁc Computing: Sec. 5-9 (5pg)</description></item><item><title>Exercises</title><link>https://psuastro528.github.io/lessons/week2/lab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week2/lab/</guid><description>Lab 2: Assertions, Unit Testing, Countinuous Integrations, Benchmarking (due Sept 5) Exercise 1: Benchmarking, Big-O Analysis, Compute vs Memory Limits Exercise 2: Numerical Stability of N-body Exercise 3: Assertions, Unit Tests &amp;amp; Continuous Integration Testing Lessons / Resources Getting Started with Julia on ACI Starting &amp;amp; Submitting Assignments Julia Manual Think Julia: How to Think Like a Computer Scientist Learn Julia in Y Minutes Documentation for DifferentialEquations.jl</description></item><item><title>Learning goals</title><link>https://psuastro528.github.io/lessons/week3/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week3/goals/</guid><description>Week 3 Exercise 1 Recognize pros/cons of different file formats Exercise 2 Recognize importance of choosing an efficient algorithm Use DataFrames efficiently via join and queries Exercise 3 Recognize significance of memory layout &amp;amp; data structures Class Project Apply &amp;ldquo;Programming in the Large&amp;rdquo; to your class project Choose appropriate file format for a project Choose appropriate memory layout &amp;amp; data structures for a project Lessons along the way Big-O notation File formats: CSV, FITS, HDF5, JLD2, Arrow Calling Python from Julia</description></item><item><title>Readings</title><link>https://psuastro528.github.io/lessons/week3/read/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week3/read/</guid><description>Week 3: Prior to Monday&amp;rsquo;s class Submit Lab 2 Writing Scientific Software Ch 7: Software Design (26pg, ok to skip 7.11-12) Prior to Thursday&amp;rsquo;s class A beginner&amp;rsquo;s guide to Big-O notation Big-O Cheat Sheet</description></item><item><title>Exercises</title><link>https://psuastro528.github.io/lessons/week3/lab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week3/lab/</guid><description>Lab 3: Memory Access, Disk I/O, DataFrames (due Sept 12)
Exercise 1: Benchmarking File I/O Exercise 2: DataFrames, Join, Query Exercise 3: Dense Matrix-Vector Multiply Lessons / Resources Details for this class Getting Started with Julia on ACI Starting &amp;amp; Submitting Assignments Julia Julia Manual Think Julia: How to Think Like a Computer Scientist Learn Julia in Y Minutes File Formats FITSIO library written in C HDF5 Apache Arrow Julia packages for reading files Julia&amp;rsquo;s FileIO.</description></item><item><title>Learning goals</title><link>https://psuastro528.github.io/lessons/week4/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week4/goals/</guid><description>Week 4 Describe steps a CPU performs surrounding actual arithmetic Anticipate when performance will be affected by cache size Project Plan data structures to optimize for memory access Profile code to identify code worth optimizing Document code to increase chances of useful feedback from peer code review Lessons along the way Bus Registers FPUs Prefetch Pipelining Out of order execution Cache: levels, lines, latency, associative Code introspection Type stability: @code_warntype, JETTest.</description></item><item><title>Readings</title><link>https://psuastro528.github.io/lessons/week4/read/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week4/read/</guid><description>Week 4 Prior to Monday&amp;rsquo;s class Submit Lab 3 Submit Project Proposal Writing Scientific Software Ch 6: Computer Organization (12pg) Either Introduction to High Performance Computing for Scientists and Engineers Ch 1: Modern Processors (32pg) -or- Introduction to High-Performance Computing Ch 1-1.3.4.1: Single-processor Computing (13pg) Prior to Thursday&amp;rsquo;s class Writing Scientific Software Ch 17.3: Profiling (2pg) Why does Julia work so well?</description></item><item><title>Project Proposal due</title><link>https://psuastro528.github.io/lessons/week4/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week4/project/</guid><description>Use the link provided via course announcement or Canvas to create your repository for the project proposal.
Grading Rubric Statement of the project goal (0 points, but required so the rest makes sense) Description of the inputs. Be sure to specify what parameters (e.g., dataset size, resolution of grid, number of samples, etc.) will be used to explore how performance scales (1 point) Description of the outputs (1 point) Detailed plan for how the code will be tested (1 point) Discussion of the relevant range of problem sizes (1 point) Complete list of what computer architectures, programming languages, and libraries you will use, as well as an justification of your choices (1 point)</description></item><item><title>Learning goals</title><link>https://psuastro528.github.io/lessons/week5/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week5/goals/</guid><description>Week 5 Exercises Fit a model to data Identify type instability Write type stable functions Profile code Identify inefficiencies Optimize code for serial execution Read &amp;amp; write models using a probabilistic programming language Estimate uncertainties in model parameters using Markov chain Monte Carlo Lessons along the way Optimization Algorithms Linear optimization: matrix solve Non-linear optimization: Levenberg-Marquardt, Conjugate Gradient Descent, BFGS Use of gradients Jacobian Autodifferentiation @code_warntype &amp;amp; JetTest.</description></item><item><title>Readings</title><link>https://psuastro528.github.io/lessons/week5/read/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week5/read/</guid><description>Week 5 Prior to Monday&amp;rsquo;s class
Submit Lab 4 Introduction to High Performance Computing for Scientists and Engineers Ch 2: Serial Optimization (26pg) Prior to Thursday&amp;rsquo;s class
Additional resources
Julia Performance Tips ProfileView.jl ProfileSVG.jl JETTest.jl SnoopCompile.jl Cthulhu.jl Package development: improving engineering quality &amp;amp; latency | Workshop | JuliaCon 2021</description></item><item><title>Exercises</title><link>https://psuastro528.github.io/lessons/week5/lab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week5/lab/</guid><description>Lab 5: Profiling, Optimization (due Sept 26)
Exercise 1 TBD</description></item><item><title>Learning goals</title><link>https://psuastro528.github.io/lessons/week6/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week6/goals/</guid><description>Week 6 Describe what an optimizing compiler can optimize for you Describe what an optimizing compiler can&amp;rsquo;t optimize for you Understand how linear algebra libraries acheive peak performance through memory access pattern Describe interaction between global variables and type stability of functions Explain why parallelism in increasingly important Describe function overloading &amp;amp; multiple dispatch Describe benefits of use abstract types and containers of abstract types Describe benefits of an Application Programming Interface Lessons along the way</description></item><item><title>Readings</title><link>https://psuastro528.github.io/lessons/week6/read/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week6/read/</guid><description>Week 6 Prior to Monday&amp;rsquo;s class Submit Lab 5 Writing Scientific Software Ch 14: Memory Allocation &amp;amp; Garbage Collection (excluding 4.5; 11pg) Writing Scientific Software Ch 12.1: Caches &amp;amp; memory hierarchies, 12.4 Threashing, 12.5 Designing for memory hierarchies, 12.6 Dynamic data structures and memory hierarchies (pg) Latency Numbers Every Programmer Should Know Optionally one of Introduction to High Performance Computing for Scientists and Engineers Ch 3 Data Access Optimization (excluding 3.</description></item><item><title>Learning goals</title><link>https://psuastro528.github.io/lessons/week7/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week7/goals/</guid><description>Week 7 Project Provide constructive feedback in code review Use GitHub Issues to manage tasks for code base Readings / Discussions Evaluating the suitability of a problem for different parallel architectures</description></item><item><title>Exercises</title><link>https://psuastro528.github.io/lessons/week8/lab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week8/lab/</guid><description>Lab 6: Parallel Programming I: Shared-memory systems (due Oct 17)
Exercise 1 TBD</description></item><item><title>Serial Code for Project due</title><link>https://psuastro528.github.io/lessons/week7/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week7/project/</guid><description>At this point the code does not need to be optimized. If you have time, it would be best to include the results of benchmarking and/or profiling in the README, to help both you and the reviewer identify which sections are ammenable to optimization.
Grading Rubric Code performs proposed tasks (1 point) Comprehensive set of unit tests, at least one integration or regression test (1 point) Code passes tests (1 point) Student code uses a version control system effectively (1 point) Repository includes many regular, small commits (1 point) Documentation for functions&amp;rsquo; purpose and design (1 point) Comprehensive set of assertions (1 point) Variable/function names consistent, distinctive &amp;amp; meaningful (1 point) Useful &amp;amp; consistent code formatting &amp;amp; style (1 point) Code is modular, rather than having chunks of same code copied and pasted (1 point) Preparing Your Own Code for Review Provide overview to help reviewer Please provide your reviewers with a README or other instructions to help them figure out how to spend their time reviewing your code in a way that is most likely to be helpful to you.</description></item><item><title>Learning goals</title><link>https://psuastro528.github.io/lessons/week8/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week8/goals/</guid><description>Week 8 Lab 6: Shared Memory Computing Patterns
Choose an appropriate number of worker processors for your compute node &amp;amp; problem Parallelize code for shared memory model, using patterns such as: FLoops.jl and ThreadedEx (recommended) Threads.@threads and/or ThreadsX.jl for for loops (recommended) Folds.jl (alternative) [SharedArray]&amp;lsquo;s[https://docs.julialang.org/en/v1/stdlib/SharedArrays/] (alternative) Readings / Discussions
Evaluating the suitability of a problem for different parallel architectures Lessons along the way Reinforce programming patterns demonstrated in Lab 5 Organize code into files and a module Using function-like objects Using broadcasting Using abstract types Using parametric types</description></item><item><title>Exercises</title><link>https://psuastro528.github.io/lessons/week4/lab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week4/lab/</guid><description>Lab 4: Probabilistic Programming (due Sept 19)
Exercise 1 TBD</description></item><item><title>Learning goals</title><link>https://psuastro528.github.io/lessons/week9/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week9/goals/</guid><description>Week 9 Lab 7, Exercise 1: Run batch jobs on ICDS-ACI/Roar: Submit a batch job via PBS Read and write data from batch job Run multiple jobs using a job array Lab 7, Exercise 2: Parallelize code for Distributed memory model, using patterns such as: Load code and packages on worker nodes Parallelize code using pmap (recommended) Parallelize code using FLoops.jl and ThreadedEx (recommended) Parallelize code using Dagger.</description></item><item><title>Exercises</title><link>https://psuastro528.github.io/lessons/week9/lab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week9/lab/</guid><description>Lab 7: Parallel Programming II: Batch Jobs &amp;amp; Distributed Memory (due Oct 24)
Exercise 1 TBD</description></item><item><title>Learning goals</title><link>https://psuastro528.github.io/lessons/week10/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week10/goals/</guid><description>Week 10 Project Gain experience parallelizing a real world code Identify changes need to acheive significant performance benefit via parallelization Readings / Discussions Describe how GPU differs from CPU Assess the prospects for a given algorithm to achieve a significant speed-up using a GPU</description></item><item><title>Exercises</title><link>https://psuastro528.github.io/lessons/week11/lab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week11/lab/</guid><description>Lab 8: Parallel Programming III: Hardware Accelerators &amp;amp; GPUs (due Nov 7)
Exercise 1 TBD</description></item><item><title>Learning goals</title><link>https://psuastro528.github.io/lessons/week11/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week11/goals/</guid><description>Week 11 Lab 8, Exercise 1 Run GPU code on ICDS-ACI Accelerate linear algebra computations with GPU Recognize what problem sizes and likely to result in acceleration with a GPU for linear algebra Lab 8, Exercise 2: Perform custom scientific computations using high-level GPU interface, such as Folds.jl with CUDAEx() executor from FoldsCUDA.jl (recommended), or mapreduce on CuArray from CUDA.jl (recommended) Improve performance by reducing kernel launches via broadcasting and GPU kernel fusion Improve performance by reducing memory transfers via GPU reductions Recognize what types of problems and problem sizes are likely to result in acceleration with a GPU when using a high-level programming interface Lab 8, Exercise 3: Write a GPU kernel, using one of CUDA.</description></item><item><title>Learning goals</title><link>https://psuastro528.github.io/lessons/week12/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week12/goals/</guid><description>Week 12 Project Gain experience with second mechanism for parallelizing real world code Work towards acheiving a significant performance benefit via second parallelization Readings / Discussions Describe benefits and disadvanages of cloud computing Determine whether a project would be well suited for running in the cloud</description></item><item><title>Exercises</title><link>https://psuastro528.github.io/lessons/week13/lab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week13/lab/</guid><description>Reproducibility: Packages, Environments &amp;amp; Containers Lab 9: Reproducibility: Packages, Environments &amp;amp; Containers (due Nov 29)
TBD</description></item><item><title>First Parallel Project Code due</title><link>https://psuastro528.github.io/lessons/week11/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week11/project/</guid><description>Submit First Parallel Code for Project Choice of portion of code to parallelize (1 point) Choice of approach for parallelizing code (1 point) Code performs proposed tasks (2 point) Unit/regression tests comparing serial &amp;amp; parallel versions (1 point) Code passes tests (1 point) General code efficiency (1 point) Implementation/optimization of multi-core parallelization (2 points) Significant performance improvement (1 point)</description></item><item><title>Learning goals</title><link>https://psuastro528.github.io/lessons/week13/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week13/goals/</guid><description>Week 13 Readings / Discussions Identify common challenges for providing reproducible software &amp;amp; workflow Describe how Julia&amp;rsquo;s package manager facilitate reproducible research Describe other common tools &amp;amp; strategies for facilitating reproducible research Lessons along the way Virtual machines Projects &amp;amp; environments Containers &amp;amp; images Docker &amp;amp; Singularity</description></item><item><title>Present Project to Class</title><link>https://psuastro528.github.io/lessons/weeks-end/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/weeks-end/project/</guid><description>Schedule of Student Presentations Grading Rubric for Project Presentation Motivation/Introduction/Overview of project, so class can understand broader goals (1 point) Explanation of specific calculation being performed, so class can understand what follows (1 point) Description of optimization and parallelziation approaches attempted (1 point) Analysis/explanation Identify most time consuming part(s) of calculations and specify what is being benchmarked (0 points) Benchmarks of how performance of each version scales with problem size for fixed number of workers (1/2 point) Benchmarks of how performance of parallel versions scales with nubmer of workers for given problem size (1/2 point) Description/analysis/discussion of what lessons you learned from the class project (1 point)</description></item><item><title>Submit Completed Class Project</title><link>https://psuastro528.github.io/lessons/week14/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week14/project/</guid><description>Grading Rubric for Final Project Submission Results of benchmarking code (typically included in project README, but more comprehensive benchmarking could be in a separate document, notebook or directory) Performance versus problem size for fixed number of workers (1 point) Performance versus number of workers for fixed problem size (1 point) Documentation: README: (1 point) Project overview Instructions on how to install and run code CI testing or detailed instructions on how to rerun tests Results of benchmarking and/or pointer to where results can be found Overview of code/package structure (if project is larger than one notebook) Docstrings: Coverage, clarity and quality (1 point) Summary of lessons learned (1 point)</description></item><item><title>Submit Second Parallel Implementation</title><link>https://psuastro528.github.io/lessons/week13/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week13/project/</guid><description>Grading Rubric for second parallelization method Choice of portion of code to parallelize (1 point) Choice of approach for parallelizing code (1 point) Code performs proposed tasks (2 point) Unit/regression tests comparing serial &amp;amp; parallel versions (1 point) Code passes tests (1 point) General code efficiency (1 point) Implementation/optimization of second type of parallelism (2 points) Significant performance improvement (1 point)</description></item><item><title>Learning goals</title><link>https://psuastro528.github.io/lessons/weeks-end/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/weeks-end/goals/</guid><description>Weeks 13-15 Project Characterize peformance of class project Characterize performance as a function of problem size Characterize performance as a function of number of processors (both strong and weak scaling) Predict how much performance could be improved with further optimization/parallelization Make code easy for others to reuse Make benchmarks easy to reproduce (for their own system) Project Presentations Explain reasons for observed performance Share lessons learned in course of class project</description></item><item><title/><link>https://psuastro528.github.io/_footer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/_footer/</guid><description>© Eric Ford - 2021 creative commons cc-by
Penn State &amp;mdash; Astronomy &amp;amp; Astrophysics &amp;mdash; Institute for Computational &amp;amp; Data Sciences</description></item></channel></rss>
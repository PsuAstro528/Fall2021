<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Week 8: Parallel Programming I on PSU Astro 528</title><link>https://psuastro528.github.io/lessons/week8/</link><description>Recent content in Week 8: Parallel Programming I on PSU Astro 528</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://psuastro528.github.io/lessons/week8/index.xml" rel="self" type="application/rss+xml"/><item><title>Exercises</title><link>https://psuastro528.github.io/lessons/week8/lab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week8/lab/</guid><description>Lab 6: Parallel Programming I: Shared-memory systems (due Oct 21)
Exercise 1 TBD</description></item><item><title>Learning goals</title><link>https://psuastro528.github.io/lessons/week8/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/week8/goals/</guid><description>Week 8 Lab 6: Shared Memory Computing Patterns
Choose an appropriate number of worker processors for your compute node &amp;amp; problem Parallelize code for shared memory model, using patterns such as: FLoops.jl and ThreadedEx (recommended) Threads.@threads and/or ThreadsX.jl for for loops (recommended) Folds.jl (alternative) [SharedArray]&amp;lsquo;s[https://docs.julialang.org/en/v1/stdlib/SharedArrays/] (alternative) Readings / Discussions
Evaluating the suitability of a problem for different parallel architectures Lessons along the way Reinforce programming patterns demonstrated in Lab 5 Organize code into files and a module Using function-like objects Using broadcasting Using abstract types Using parametric types</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Weeks 13-15: Project Presentations on PSU Astro 528</title><link>https://psuastro528.github.io/lessons/weeks-end/</link><description>Recent content in Weeks 13-15: Project Presentations on PSU Astro 528</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://psuastro528.github.io/lessons/weeks-end/index.xml" rel="self" type="application/rss+xml"/><item><title>Present Project to Class</title><link>https://psuastro528.github.io/lessons/weeks-end/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/weeks-end/project/</guid><description>Schedule of Student Presentations Grading Rubric for Project Presentation Motivation/Introduction/Overview of project, so class can understand broader goals (1 point) Explanation of specific calculation being performed, so class can understand what follows (1 point) Description of optimization and parallelziation approaches attempted (1 point) Analysis/explanation Identify most time consuming part(s) of calculations and specify what is being benchmarked (0 points) Benchmarks of how performance of each version scales with problem size for fixed number of workers (1/2 point) Benchmarks of how performance of parallel versions scales with nubmer of workers for given problem size (1/2 point) Description/analysis/discussion of what lessons you learned from the class project (1 point)</description></item><item><title>Learning goals</title><link>https://psuastro528.github.io/lessons/weeks-end/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://psuastro528.github.io/lessons/weeks-end/goals/</guid><description>Weeks 13-15 Project Characterize peformance of class project Characterize performance as a function of problem size Characterize performance as a function of number of processors (both strong and weak scaling) Predict how much performance could be improved with further optimization/parallelization Make code easy for others to reuse Make benchmarks easy to reproduce (for their own system) Project Presentations Explain reasons for observed performance Share lessons learned in course of class project</description></item></channel></rss>
[{"uri":"https://psuastro528.github.io/syllabus/basic_info/","title":"Basic Course Information","tags":[],"description":"","content":" Course: Astro 528: High-Performance Scientific Computing for Astrophysics (Fall 2021) Class Meetings: 3:30-4:30pm Mondays \u0026amp; 1:30-3:00pm Thursdays in Davey Lab 538 Instructor: Eric Ford Email: ebf11 at psu edot edu Phone: x3-5558 Office Hours: Thursdays 3-4pm or by appointment Website: https://psuastro528.github.io/  "},{"uri":"https://psuastro528.github.io/syllabus/topics/","title":"Course Topics","tags":[],"description":"","content":" Overview of Scientific Computing, High Performance Computing, Data Science \u0026amp; Big Data Priorities for Scientific Computing Types \u0026amp; Choices of Programming Languages Floating Point Arithmetic Best Practices for Scientific Programming  Version Control (e.g., git) Testing Continuous Integration Documentation \u0026amp; Literate Programing Debugging Benchmarking \u0026amp; Profiling Reproducible Results \u0026amp; Workflows Packages, Environments, Containers \u0026amp; Images Efficient Workflows   Optimizing Code Performance  Modern Processors, Memory \u0026amp; Networking Architectures Choosing Algorithms Serial Codes Shared Memory Systems (i.e., muli-core within one node) Distrbiuted Memory Systems (across multiple nodes) Hardware Accelerators (e.g., GPUs, Intel Phi) Cloud Computing Strong \u0026amp; Weak Scaling   Experience  Practice good programming habits on series of exercises Apply best practices to a real science project    "},{"uri":"https://psuastro528.github.io/syllabus/readings/","title":"Readings","tags":[],"description":"","content":"Textbooks The required textbooks for this course are:\n Writing Scientific Software: A Guide to Good Style by Suely Oliveira, Cambridge University Press, 1st edition, September 18, 2006, ISBN-10: 0521858968. (I recommend considering a used version.) Think Julia: How to Think like a Computer Scientist by Ben Lauwens and Allen Downey, 1st edition, May 14, 2019. ISBN-10:1492045039 (I recommend using the version avaliable online for free.)  I will also suggest readings from an optional textbook:\n Introduction to High Performance Computing for Scientists and Engineers by Georg Hager \u0026amp; Gerhard Wellein, CRC Press, 1st edition, July 2, 2010, ISBN-10: 143981192X Whenever readings from Introduction to High Performance Computing for Scientists and Engineers are suggested, there will be alternative online reading assignments for students who prefer not to purchase another textbook. Hopefully, different students reading from different sources will help stimulate interesting discussion about commonalities and differences across sources.  Additional Readings We will also make use of a variety of web resources, likely including:\n “Best Practices for Scientific Computing” (Wilson et al. 2012) “What Every Programmer Should Know about Floating-Point Arithmetic” (Goldberg 1991) “What Every Programmer Should Know about Memory” (Drepper 2007) Introduction to Parallel Computing (Blaise Barney) Introduction to High-Performance Computing by Eijkhout, Chow \u0026amp; van de Geijn (2006) Parallel Programming in MPI and OpenMP by Eijkhout (2017) \u0026mdash; pdf version \u0026mdash; source The Why’s and How’s of Licensing Scientific Code OpenACC slides from NVIDIA Introduction to Parallel Programming with GPUs \u0026amp; CUDA at Udacity Docker Orientation  "},{"uri":"https://psuastro528.github.io/syllabus/assignments/","title":"Assessed Work","tags":[],"description":"","content":"The assessed work for this course consists of computer lab/homework assignments (50%) and a class project (50%). There are no exams. Contributions to class discussion (including submitting reading questions may be counted for up to 10% of the course grade (coming from lab/homework exercises). The class project will have several components and will be described in more detail below.\nThe planned assignment due dates are in the schedule section of the syllabus. Any revision to the due dates will be announced at the time they are assigned. Assignments are due at least an hour prior to the beginning of class on the day they are due. If the University is closed on the due date of an assignment (due to bad weather or any other reason), then the assignment will be due one hour before the next class session.\nLab/Homework Exercises Early in the semester, homework assignments will be assigned once a week. Later in the semester, homework assignments will become shorter and/or less frequent, since you will be working on your class project. Students will begin each homework exercise by following a link that will create a clone of the starter git repository. Students are to read and think about the questions posted, and add/edit code as suggested in the exercise, making multiple small commits as they go. Homework exercises are to be submitted by issuing a pull request from the student\u0026rsquo;s github repository.\nMost assignments will not have a unique solution, and comparing the accuracy and/or performance of different solutions will likely prove educational. Therefore, rather than providing “the solution”, we will typically discuss selected student solutions during class to help illustrate the advantages and disadvantages of different approaches.\nThe homework assignments are designed to be educational. The experience of working on the assignment is more valuable than having “the solution”. As this is a three credit class, it is expected that students will devote an average of 5 hours per week to the course outside of class. If we estimate an average of ~1 hour/week for reading, then that leaves ~4 hours per week to work on homework assignments or your class project outside of class. If a student completes a homework assignment with less than ~2 hours of effort, then I would encourage them to go beyond the minimum to complete the assignment and try to come up with an even more efficient solution to the problem or to devote extra time to their project. Conversely, if you have done the readings, participated in class and devoted 4 hours of focused effort outside of class to a homework assignment, then you should stop coding! At that point, write up a short description of what you\u0026rsquo;ve done, what\u0026rsquo;s working, what problems you\u0026rsquo;ve encountered and what you think you would try next. Don\u0026rsquo;t let one homework assignment take an unreasonable amount of your time. I will adjust the length and difficulty of the homework assignments based on what students turn in. Since some students will have more programming experience than others, I will try to make each homework assignment somewhat more than the average student can do in 4 hours, so that all students are challenged. If you are so interested that you choose to work longer on a homework assignment, then please create and tag a commit with where you were after 4 hours of focused effort, so that I have a realist idea of how much students are accomplishing in a reasonable amount of time.\nClass Project The class project (worth a total of 50% of final grade) includes the following key elements:\n a written proposal outlining your project (5%), implementing a solution to your problem that passes your tests and uses programming practices from class in time for the peer code review (10%), performing a helpful code review on a peer\u0026rsquo;s project (5%; see example code review checklist), optimizing performance for a multi-core shared-memory system (i.e., modern workstation; 10%), optimizing performance using either a distributed memory system (e.g., cluster), a many-core accelerator (e.g., GPU or Intel Phi), or on the cloud (e.g., Amazon Elastic Compute Cloud, Domino) (10%), and a ~15 minute presentation (including time for questions) to the class describing your project, comparing the performance of different versions of your code as a function of problem size, and describing lessons learned (10%).  Project Proposals Students are encouraged to propose a project that closely relates to their research interests. Student are strongly encouraged to discuss their ideas with the instructor far enough in advance of the deadline, that they can refine or change plans prior to the proposal due date. If you have no idea and would like the instructor to suggest a project, then let the instructor know by the end of the first week and suggestions can be offered.\nThe written proposal should include:\n the project goal, a description of the inputs (e.g., initial conditions or input datasets, astrophysical model parameters, implementation parameters), a description of the outputs, a detailed plan for how the code will be tested (from unit tests to verification), a discussion of the relevant range of problem sizes, what computer architectures, programming languages, and libraries you will use, as well as an justification of your choices.  More information about the expectations for class projects and grading rubrics are provided in the class project section of the website.\nReadings \u0026amp; Reading Questions Students will be expected to read assignments (or review a website, watch an online presentation, or listen to audio) before class on the days indicated, so they will be prepared to participate in class discussions and/or make progress writing code for the assignment.\nAll students should submit an average of at least one question per week about the day’s readings via email to the instructor with \u0026ldquo;Astro 528\u0026rdquo; in the subject line at least four hours prior to each discussion-based class (as opposed to lab classes). The time before class is important, so the instructor will have time to read the questions and plan how to organize the day’s discussion. Submitting questions via email is particularly important for any student who are reluctant to ask questions in class.\nClass Participation In-class discussions and coding sessions will be an important part of the course, so students should participate regularly. If you know you need to miss class due to research travel, then let the instructor know in advance and make plans to get a classmate\u0026rsquo;s notes for those sessions. If you feel it would be wise to participate in a class remotely due to health concerns, then please let the instructor know as far in advance as practical. We are likely to explore multile strategies for supporting remote participation, depending on whether the class is primarily discussion (likely Zoom) or a computer lab class (e.g., Zoom with breakout rooms for each team, VSCode\u0026rsquo;s LiveShare).\nMy intention is for the homework portion of the class grade to be based solely on written assignments and code. However, if I feel that some students are likely to benefit from having a greater incentive to engage in class more actively, then up to 20% of the homework score (i.e., 10% of the course grade) may be based on class participation, as measured by contributing to in-class discussion and/or submitting questions in advance of class.\nTimeliness of assignments Students should start all assignments well before the due date, so they can resolve any technical difficulties well in advance of the deadline. When assignments are discussed in class on the day they are due, then credit will be given based on what is submitted prior to class. In cases where turning in assignments on time is not practical due to illness, family emergency, or other university-approved excuse, assignments should still be completed and turned in, but those assignments may not be included when computing the course grade. If portions of the class project totalling more than 10% of course grade can not be completed before the course end date due to illness, family emergency, etc., then the student can elect to receive a “deferred grade” (DF) and to submit the remaining portions of the project no later than eight weeks after the course end date. Students electing this option should be familiar with the PSU DF policies.\n"},{"uri":"https://psuastro528.github.io/syllabus/requirements/","title":"Requirements","tags":[],"description":"","content":"NEED TO UPDATE THIS PAGE Course Prerequisites This course is designed for Astronomy \u0026amp; Astrophysics graduate students. While Astro 501 is listed as a corerequsite by the registrar, that is primarily a formality, so that non-Astrophysics students will contact me to discuss their background before registering. Previously, we have had some graduate students from physics and engineering who did very well in the course. Of course, some extra thought may be required to figure out how concepts from the course presented in the context of astronomy or astrophysics could be applied to their own field of study.\nEntering Astronomy \u0026amp; Astrophysics graduate students span a wide range in terms of level of experience with programming. The goal is for all students to improve their understanding of computing, software development skills and programming patterns, regardless of whether they enter as a novice or experienced programmer. Students entering with significant computing skills should aim to achieve more than students entering with minimal experience. Astronomy graduate students who are not already familiar with using the Unix/Linux/OS X command line interface and/or with no programming experience are encouraged to take the course, but should be prepared to put in some extra effort early in the semester. If you let me know about your background, I can suggest some resources to help you get started and/or schedule a time to meet with you to answer questions.\nComputing Requirements Hardware We anticipate that students will have access to a laptop computer to work on exercises during classes (pairing up is encouraged even if you both have laptops) and regular access to a laptop or workstation with a good internet connect outside of class. As long as students have a good internet connection, then their local computer can be used for accessing cloud resources and need not be high-powered. If anyone is likely to work form a location with poor internet speed/reliability, then they are encouraged install and run software locally, particularlly for the early part of the class. While students will still need to submit jobs to the ICDS Roar supercomputer during the second half of the class, much of the software development can be done locally before connecting to Roar to submit jbos and retrieve results.\nBasic Software Students will need regular access to the following software:\n Browser: Many cloud resources such as those we will be using regularly (e.g., ACI OpenOnDemand Portal/, GitHub, etc.) require a modern browser. Based on documentation that I\u0026rsquo;ve found for the most demanding sites, I beleive that that Chrome (22+), Firefox (16+), and Internet Explorer (11+) should work, however it\u0026rsquo;s not practical for the instructor to test each possible browser, OS, etc. I plan to test the in class and homework exercises using Chrome. If you find a problem that arises or is fixed by changing browsers, please let the instructor and class know, so others can benefit from your experience. ssh: While I\u0026rsquo;m hoping that most operations can be performed without ssh, it may prove handy to have an ssh client on your laptop. In particular, setting up ssh keys for github can make it easier to connect to your github repository without retyping passwords excessively. VPN Client: In practice, students are likely to want to access the ACI resources when outside of the Penn State network. Therefore, it is likely that they will want to install the GlobalProect Remote Access VPN client.  Many of the early assignments could be executed either on the student\u0026rsquo;s local computer, Penn State\u0026rsquo;s Roar supercomputer, also known as Advanced CyberInfrastructure (ACI) operated by the Institute for Computational \u0026amp; Data Sciences. However, once we get to parallelizing code, students will need to take advantage of the HPC resources provided by ACI anyway. Therefore, all students should setup an account for use ACI during the later parts of the course, regardless of whether they install local software.\nOptional Software For students who find it convenient to install additional software on their local computer, they would likely to want to setup:\n Julia with the IJulia and Pluto packages for accessing Jupyter and Pluto notebooks. An integrated development environment that supports Julia, such as:  VS Code and the Julia for VSCode extension Atom text editor and the Juno extension    Some students may prefer to setup their system using a Docker container that includes Julia, Python, R and Jupter notbook. (If anyone tweaks this to prepare a custom dockerfile for the class, please share it with the rest of the class.) To use Docker containers, students will need to install:\n Docker CE VirtualBox (if using Windows 7 or Windows 10 Home)  Accounts  All students should request an ACI account before the second class meeting. On the account request form, specify ebf11 as the sponsor account and listing Astro528 as the research description. (You can leave computational and Data Requirements box blank, since they already know what will be required for the class.) Students who already have an ACI account should contact i-ASK to request that they add your account to the Astro 528 group. Students should create an account on GitHub. Note that we will examine and discuss student\u0026rsquo;s code both during class and via peer code review. Students may choose to protect their privacy by choosing a github account id that does not identify them. Students may wish to create a separate github account just for this class, so as to avoid being identified by other projects. Prior to the second class meeting, students should send the instructor their PSU and GitHub userids.  "},{"uri":"https://psuastro528.github.io/syllabus/expectations/","title":"Expectations","tags":[],"description":"","content":"Etiquette Students are expected to be civil and considerate in class. In particular, we want to create an environment where everyone feels comfortable asking questions and sharing imperfect code. Students should refrain from any actions that distract their classmates, instructor or the class. It\u0026rsquo;s understandable the cell phones will often be used for two factor authentication, but they should be silenced and put away during class once you\u0026rsquo;ve authenticated. Taking notes on laptops or looking up information relevant to class discussion is encouraged. However, apps and windows unrelated to the class should be closed throughout class.\nThe Eberly College of Science has a Code of Mutual Respect and Cooperation. This code embodies the values that we hope our faculty, staff, and students possess and will endorse to make The Eberly College of Science a place where every individual feels respected and valued, as well as challenged and rewarded.\nAll students are responsible for knowing and following all the rules and regulations for this course as set forth in the syllabus (including the details on the class web site) and what is announced in class. In case of any ambiguity, ask the instructor to clarify.\nEthics and Honorable Behavior All Penn State, Eberly College of Science, and Astronomy Department policies regarding ethics and honorable behavior apply to this course. These can be found at:\n http://www.psu.edu/ufs/policies/47-00.html#49-20 http://www.science.psu.edu/academic/Integrity/Policy.html http://www.astro.psu.edu/deptinfo/Astropolicy.html  Students are expected to present their own work for homework assignments and the class project. Students are be strongly encouraged to consult with each other as part of completing assignments (in addition to making use of pair coding, as described below). How does one reconcile these two? One good rule of thumb is that you (whether an individual or a pair coding team) want to ask for help in planning what to do or figuring out what could be causing a problem, but when it comes time to implement those ideas, you should write the code yourself. When you collaborate with a classmate to develop a plan, you should each implement it individually.\nA second good rule of thumb is that you should not copy and paste text or code for a homework assignment. Any time you do (e.g., if you were to modify code from the Julia base or a package developed by a third party), you should clearly credit the source and indicate this via inline documentation in both the code which parts are you own and which were borrowed. That doesn\u0026rsquo;t mean that you\u0026rsquo;ll get credit for other people\u0026rsquo;s work, but it will mean you\u0026rsquo;ve been upfront about what was your contribution. If you\u0026rsquo;re ever unsure whether something is ok, you should ask and include an explanation of the contributions of others in your code and whatever you turn in.\nPair Coding You are encouraged to engage in “pair coding” for the homework assignments and/or the class project. When pair coding, you can choose to either: 1) have each student be the “driver” for their own part of the assignment (probably best for class projects) or 2) swap between “driver” and “navigator” roles frequently within each question (probably best for homework). Any time you pair code, you should always indicate who you paired with for each task. You may not have one student be the driver for all of question 1, then swap and have another student be the driver for all of question 2, as that makes it likely that the “navigator” will not understand the solution as well as the “driver”. When you engage in pair coding, then you should clearly indicate which student you worked with, so you can both get credit.\nComparing work with others Whether you complete assignments individually or in pairs, you are encouraged to compare your implementation’s code, accuracy and performance to that of your other classmates. Before you make changes after such a comparison, tag your repository with \u0026ldquo;precompare\u0026rdquo; (if for the whole assignment) or \u0026ldquo;precompare-N\u0026rdquo; (where N is the exercise number if you compare one exercise at a time within an assignment). In the pull request, add a few lines summarizing what changes you made and what you learned from the experience (e.g., how much of a difference the change made, if there are are drawbacks to the new approach).\nTimeliness of assignments Students should start all assignments well before the due date, so they can resolve any technical difficulties well in advance of the deadline. Since assignments will typically be discussed in class on the day they are due, credit will be given based on what is submitted prior to class. In cases where turning in assignments on time is not practical due to illness, family emergency, or other university-approved excuse, assignments should still be completed and turned in, but those assignments may not be included when computing the course grade. If portions of the class project totalling more than 10% of course grade can not be completed before the course end date due to illness, family emergency, etc., then the student can elect to receive a “deferred grade” (DF) and to submit the remaining portions of the project no later than eight weeks after the course end date. Students electing this option should be familiar with the PSU DF policies (http://handbook.psu.edu/content/deferred-grade).\nSpecial Accommodations Penn State welcomes students with disabilities into the University\u0026rsquo;s educational programs. If you have a disability-related need for reasonable academic adjustments in this course, contact the Office for Disability Services (ODS) at 814-863-1807 (V/TTY). For further information regarding ODS, please visit the Office for Disability Services Web site at http://equity.psu.edu/ods/.\nIn order to receive consideration for course accommodations, you must contact ODS and provide documentation (see the documentation guidelines at https://equity.psu.edu/ods/guidelines). If the documentation supports the need for academic adjustments, ODS will provide a letter identifying appropriate academic adjustments. Please share this letter and discuss the adjustments with your instructor as early in the course as possible. You must contact ODS and request academic adjustment letters at the beginning of each semester.\nAcademic Success, Learning Assistance, \u0026amp; Student Resources The Eberly College of Science is committed to the academic success of students enrolled in the College\u0026rsquo;s courses and undergraduate programs. When in need of help, students can utilize various College and University wide resources for learning assistance. http://www.science.psu.edu/advising/success/.\n"},{"uri":"https://psuastro528.github.io/syllabus/","title":"Syllabus","tags":[],"description":"","content":"High-Performance Scientific Computing for Astrophysics Astro 528: Fall 2021 Scope \u0026amp; Sprit of the Course High-Performance Scientific Computing for Astrophysics will combine class discussion and programming exercises to train students in the use of modern computing hardware and programming strategies for application to astronomy and astrophysics research. Students will gain experience applying these practices during a class project (potentially in support of the student’s dissertation research).\nWhile it is primarily intended for graduate students in the astronomy \u0026amp; astrophysics program, it is likely also beneficial for graduate students in other physical sciences and engineering.\nThis course can count toward the Penn State Graduate Minor in Computational Science. It is complementary to Phys/Astro 587 Computational Physics/Astrophysics, the recent Astro 585: Astrostatistics and Stat/IST 557: Data Mining. The combination of these four courses with the domain expertise from their Ph.D. program would provide students with an excellent introduction to Data Science.\nThe primary goal is for students to improve their skills in scientific computing, including programming practices for achieving reproducible results and high-performance scientific computing with an eye towards scaling up to larger problems and Big Data. To achieve this, students will develop a basic understanding of modern computer architectures, memory systems, programming languages and common programming patterns. Exercises provide students with experience applying established programming practices (e.g., version control, coding standards, unit testing, debugging, profiling, documenting and reviewing code) and optimizing performance using multi-core processors, clusters, GPUs and (hopefully) cloud computing.\nAll of these objectives may not be realized within the one-semester course, and we will adapt the scope and emphasis based on student interests and programming experience. The version of the syllabus on the course website will be updated throughout the semester and supersede the printed version. Students should check the website regularly for updates.\n Basic Course Information   Course Topics   Readings   Assessed Work   Requirements   Expectations   Accomodations   - [Course Schedule](/lessons/) - [Additional Resources](/resources/other) "},{"uri":"https://psuastro528.github.io/syllabus/accomodations/","title":"Accomodations","tags":[],"description":"","content":"Penn State welcomes students with disabilities into the University\u0026rsquo;s educational programs. If you have a disability-related need for reasonable academic adjustments in this course, contact the Office for Disability Services (ODS) at 814-863-1807 (V/TTY). For further information regarding ODS, please visit the Office for Disability Services Web site at http://equity.psu.edu/ods/.\nIn order to receive consideration for course accommodations, you must contact ODS and provide documentation (see the documentation guidelines at https://equity.psu.edu/ods/guidelines). If the documentation supports the need for academic adjustments, ODS will provide a letter identifying appropriate academic adjustments. Please share this letter and discuss the adjustments with your instructor as early in the course as possible. You must contact ODS and request academic adjustment letters at the beginning of each semester.\nResources Academic Success, Learning Assistance, \u0026amp; Student Resources\nThe Eberly College of Science is committed to the academic success of students enrolled in the College\u0026rsquo;s courses and undergraduate programs. When in need of help, students can utilize various College and University wide resources for learning assistance. For more information see: http://www.science.psu.edu/advising/success/.\n"},{"uri":"https://psuastro528.github.io/resources/","title":"Resources","tags":[],"description":"","content":"Online Textbooks \u0026amp; TutorialsSoftwareHardware ResourcesAdditional ResourcesImprove this page You can add your suggestions by submitting a pull request for editing this file\u0026rsquo;s source. Thanks!\n"},{"uri":"https://psuastro528.github.io/resources/textbooks/","title":"Online Textbooks &amp; Tutorials","tags":[],"description":"","content":"Julia  Think Julia: How to Think Like a Computer Scientist  Related Courses  Applications of Parallel Computers (UC Berkeley CS 267)  Lawrence Livermore National Laboratory  Introduction to Parallel Computing by Blaise Barney OpenMP Message Passing Interface (MPI) OpenACC slides from NVIDIA  Texas Advanced Computing Center  Introduction to High-Performance Computing by Eijkhout, Chow \u0026amp; van de Geijn (2006) Parallel Programming in MPI and OpenMP by Eijkhout (2017) \u0026mdash; pdf version \u0026mdash; source  Improve this page You can add your suggestions by submitting a pull request for editing this file\u0026rsquo;s source. Thanks!\n"},{"uri":"https://psuastro528.github.io/resources/software/","title":"Software","tags":[],"description":"","content":"Julia  Julia Manual Think Julia: How to Think Like a Computer Scientist Introcution to Applied Linear Algebra: Vectors, Matrices and Least Squares: Julia Language Companion The Fast Track to Julia 1.0 Learn Julia in Y Minutes Why Julia? Julia Tutorials Julia Blog Julia Discourse Forum Julia on StackOverflow Julia on Reddit Julia Twitter feed Julia Slack channel  Jupyter  DataQuest Tutorial on Jupyter Setting up Jupyter for Julia Jupyter with multiple languages Diffing Jupyter notebooks Binder for sharing Jupyter notebooks  Git  GitHub Guides Git for Everyone Data Camp on Git Git Desktop  Linux Command Line  Data Camp on Shell  Docker  Docker Orientation Docker for homework exercises: Github Repo Cloud.Docker.com Repo Jupyter Docker Stacks: More ready-to-run Docker images containing Jupyter applications User guide Setting up Docker on Linux How to remove Docker containers, images, volumes, networks )  Docker container for homework assignments Licensing  Choose an open source license  Improve this page You can add your suggestions by submitting a pull request for editing this file\u0026rsquo;s source. Thanks!\n"},{"uri":"https://psuastro528.github.io/resources/hardware/","title":"Hardware Resources","tags":[],"description":"","content":"Penn State Resources Roar: Institue for Computational \u0026amp; Data Sciences\u0026rsquo;s Advanced CyberInfrastructure (ICDS-ACI)  Getting Started on ICS-ACI Roar User\u0026rsquo;s Guide Roar Training Series Roar On-demand Tutorial Videos Open On Demand Portal (written for OSU, but much of info is similar)  Cloud Computing  Penn State Cloud Program  Cloud Computing  Amazon EC2 Google Compute Engine Google Colaboratory GPU acceleration for Julia using Google Colaboratory Domino Data Labs  Improve this page You can add your suggestions by submitting a pull request for editing this file\u0026rsquo;s source. Thanks!\n"},{"uri":"https://psuastro528.github.io/resources/other/","title":"Additional Resources","tags":[],"description":"","content":"Academic Success, Learning Assistance, \u0026amp; Student Resources The Eberly College of Science is committed to the academic success of students enrolled in the College\u0026rsquo;s courses and undergraduate programs. When in need of help, students can utilize various College and University wide resources for learning assistance. For more information see: http://www.science.psu.edu/advising/success/.\n"},{"uri":"https://psuastro528.github.io/_footer/","title":"","tags":[],"description":"","content":"© Eric Ford - 2021 creative commons cc-by\nPenn State \u0026mdash; Astronomy \u0026amp; Astrophysics \u0026mdash; Institute for Computational \u0026amp; Data Sciences\n"},{"uri":"https://psuastro528.github.io/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://psuastro528.github.io/","title":"Penn State Astro 528: High-Performance Scientific Computing for Astrophysics (Fall 2021)","tags":[],"description":"","content":"High-Performance Scientific Computing for Astrophysics Astro 528 (Fall 2021) High-Performance Scientific Computing for Astrophysics will combine class discussion and programming exercises to train students in the use of modern computing hardware and programming strategies for application to astronomy and astrophysics research. Students will gain experience applying these practices during a class project (potentially in support of the student’s dissertation research).\n Syllabus Schedule Labs Class Project Additional Resources  "},{"uri":"https://psuastro528.github.io/tags/","title":"Tags","tags":[],"description":"","content":""}]
[{"uri":"https://psuastro528.github.io/syllabus/basic_info/","title":"Basic Course Information","tags":[],"description":"","content":" Course: Astro 528: High-Performance Scientific Computing for Astrophysics (Fall 2021) Class Meetings: 3:30-4:30pm Mondays \u0026amp; 1:30-3:00pm Thursdays in Davey Lab 538 Some classes may transition to a remote synchonous or blended format due to health and safety concerns. Instructor: Eric Ford Email: ebf11 at psu dot edu Phone: x3-5558 Office Hours: Thursdays 3-4pm or by appointment Website: https://psuastro528.github.io/  "},{"uri":"https://psuastro528.github.io/syllabus/topics/","title":"Course Topics","tags":[],"description":"","content":" Overview of Scientific Computing, High Performance Computing, Data Science \u0026amp; Big Data Priorities for Scientific Computing Types \u0026amp; Choices of Programming Languages Floating Point Arithmetic Best Practices for Scientific Programming  Version Control (e.g., git) Testing Continuous Integration Documentation \u0026amp; Literate Programing Debugging Benchmarking \u0026amp; Profiling Reproducible Results \u0026amp; Workflows Packages, Environments, Containers \u0026amp; Images Efficient Workflows   Optimizing Code Performance  Modern Processors, Memory \u0026amp; Networking Architectures Choosing Algorithms Serial Codes Shared Memory Systems (i.e., muli-core within one node) Distrbiuted Memory Systems (across multiple nodes) Hardware Accelerators (e.g., GPUs, Intel Phi) Cloud Computing Strong \u0026amp; Weak Scaling   Experience  Practice good programming habits on series of exercises Apply best practices to a real science project    "},{"uri":"https://psuastro528.github.io/syllabus/readings/","title":"Readings","tags":[],"description":"","content":"Textbooks The required textbooks for this course are:\n Writing Scientific Software: A Guide to Good Style by Suely Oliveira, Cambridge University Press, 1st edition, September 18, 2006, ISBN-10: 0521858968. (I recommend considering a used version.) Think Julia: How to Think like a Computer Scientist by Ben Lauwens and Allen Downey, 1st edition, May 14, 2019. ISBN-10:1492045039 (I recommend using the version avaliable online for free.)  I will also suggest readings from an optional textbook:\n Introduction to High Performance Computing for Scientists and Engineers by Georg Hager \u0026amp; Gerhard Wellein, CRC Press, 1st edition, July 2, 2010, ISBN-10: 143981192X Whenever readings from Introduction to High Performance Computing for Scientists and Engineers are suggested, there will be alternative online reading assignments for students who prefer not to purchase another textbook. Hopefully, different students reading from different sources will help stimulate interesting discussion about commonalities and differences across sources.  Additional Readings We will also make use of a variety of web resources, likely including:\n “Best Practices for Scientific Computing” (Wilson et al. 2012) “What Every Programmer Should Know about Floating-Point Arithmetic” (Goldberg 1991) “What Every Programmer Should Know about Memory” (Drepper 2007) Introduction to Parallel Computing (Blaise Barney) Introduction to High-Performance Computing by Eijkhout, Chow \u0026amp; van de Geijn (2006) Parallel Programming in MPI and OpenMP by Eijkhout (2017) \u0026mdash; pdf version \u0026mdash; source The Why’s and How’s of Licensing Scientific Code OpenACC slides from NVIDIA Introduction to Parallel Programming with GPUs \u0026amp; CUDA at Udacity Docker Orientation  "},{"uri":"https://psuastro528.github.io/syllabus/assignments/","title":"Assessed Work","tags":[],"description":"","content":"The assessed work for this course consists of computer lab/homework assignments (50%) and a class project (50%). There are no exams. Contributions to class discussion (including submitting reading questions may be counted for up to 10% of the course grade (coming from lab/homework exercises). The class project will have several components and will be described in more detail below.\nThe planned assignment due dates are in the schedule section of the syllabus. Any revision to the due dates will be announced at the time they are assigned. Assignments are due at least an hour prior to the beginning of class on the day they are due. If the University is closed on the due date of an assignment (due to bad weather or any other reason), then the assignment will be due one hour before the next class session.\nLab/Homework Exercises Early in the semester, homework assignments will be assigned once a week. Later in the semester, homework assignments will become shorter and/or less frequent, since you will be working on your class project. Students will begin each homework exercise by following a link that will create a clone of the starter git repository. Students are to read and think about the questions posted, and add/edit code as suggested in the exercise, making multiple small commits as they go. Homework exercises are to be submitted by issuing a pull request from the student\u0026rsquo;s github repository.\nMost assignments will not have a unique solution, and comparing the accuracy and/or performance of different solutions will likely prove educational. Therefore, rather than providing “the solution”, we will typically discuss selected student solutions during class to help illustrate the advantages and disadvantages of different approaches.\nThe homework assignments are designed to be educational. The experience of working on the assignment is more valuable than having “the solution”. As this is a three credit class, it is expected that students will devote an average of 5 hours per week to the course outside of class. If we estimate an average of ~1 hour/week for reading, then that leaves ~4 hours per week to work on homework assignments or your class project outside of class. If a student completes a homework assignment with less than ~2 hours of effort, then I would encourage them to go beyond the minimum to complete the assignment and try to come up with an even more efficient solution to the problem or to devote extra time to their project. Conversely, if you have done the readings, participated in class and devoted 4 hours of focused effort outside of class to a homework assignment, then you should stop coding! At that point, write up a short description of what you\u0026rsquo;ve done, what\u0026rsquo;s working, what problems you\u0026rsquo;ve encountered and what you think you would try next. Don\u0026rsquo;t let one homework assignment take an unreasonable amount of your time. I will adjust the length and difficulty of the homework assignments based on what students turn in. Since some students will have more programming experience than others, I will try to make each homework assignment somewhat more than the average student can do in 4 hours, so that all students are challenged. If you are so interested that you choose to work longer on a homework assignment, then please create and tag a commit with where you were after 4 hours of focused effort, so that I have a realist idea of how much students are accomplishing in a reasonable amount of time.\nClass Project The class project (worth a total of 50% of final grade) includes the following key elements:\n a written proposal outlining your project (5%), implementing a solution to your problem that passes your tests and uses programming practices from class in time for the peer code review (10%), performing a helpful code review on a peer\u0026rsquo;s project (5%; see example code review checklist), optimizing performance for a multi-core shared-memory system (i.e., modern workstation; 10%), optimizing performance using either a distributed memory system (e.g., cluster), a many-core accelerator (e.g., GPU or Intel Phi), or on the cloud (e.g., Amazon Elastic Compute Cloud, Domino) (10%), and a ~15 minute presentation (including time for questions) to the class describing your project, comparing the performance of different versions of your code as a function of problem size, and describing lessons learned (10%).  Project Proposals Students are encouraged to propose a project that closely relates to their research interests. Student are strongly encouraged to discuss their ideas with the instructor far enough in advance of the deadline, that they can refine or change plans prior to the proposal due date. If you have no idea and would like the instructor to suggest a project, then let the instructor know by the end of the first week and suggestions can be offered.\nThe written proposal should include:\n the project goal, a description of the inputs (e.g., initial conditions or input datasets, astrophysical model parameters, implementation parameters), a description of the outputs, a detailed plan for how the code will be tested (from unit tests to verification), a discussion of the relevant range of problem sizes, what computer architectures, programming languages, and libraries you will use, as well as an justification of your choices.  More information about the expectations for class projects and grading rubrics are provided in the class project section of the website.\nReadings \u0026amp; Reading Questions Students will be expected to read assignments (or review a website, watch an online presentation, or listen to audio) before class on the days indicated, so they will be prepared to participate in class discussions and/or make progress writing code for the assignment.\nAll students should submit an average of at least one question per week about the day’s readings via email to the instructor with \u0026ldquo;Astro 528\u0026rdquo; in the subject line at least four hours prior to each discussion-based class (as opposed to lab classes). The time before class is important, so the instructor will have time to read the questions and plan how to organize the day’s discussion. Submitting questions via email is particularly important for any student who are reluctant to ask questions in class.\nClass Participation In-class discussions and coding sessions will be an important part of the course, so students should participate regularly. If you know you need to miss class due to research travel, then let the instructor know in advance and make plans to get a classmate\u0026rsquo;s notes for those sessions. If you feel it would be wise to participate in a class remotely due to health concerns, then please let the instructor know as far in advance as practical. We are likely to explore multile strategies for supporting remote participation, depending on whether the class is primarily discussion (likely Zoom) or a computer lab class (e.g., Zoom with breakout rooms for each team, VSCode\u0026rsquo;s LiveShare).\nMy intention is for the homework portion of the class grade to be based solely on written assignments and code. However, if I feel that some students are likely to benefit from having a greater incentive to engage in class more actively, then up to 20% of the homework score (i.e., 10% of the course grade) may be based on class participation, as measured by contributing to in-class discussion and/or submitting questions in advance of class.\nTimeliness of assignments Students should start all assignments well before the due date, so they can resolve any technical difficulties well in advance of the deadline. When assignments are discussed in class on the day they are due, then credit will be given based on what is submitted prior to class. In cases where turning in assignments on time is not practical due to illness, family emergency, or other university-approved excuse, assignments should still be completed and turned in, but those assignments may not be included when computing the course grade. If portions of the class project totalling more than 10% of course grade can not be completed before the course end date due to illness, family emergency, etc., then the student can elect to receive a “deferred grade” (DF) and to submit the remaining portions of the project no later than eight weeks after the course end date. Students electing this option should be familiar with the PSU DF policies.\n"},{"uri":"https://psuastro528.github.io/syllabus/requirements/","title":"Requirements","tags":[],"description":"","content":"NEED TO UPDATE THIS PAGE Course Prerequisites This course is designed for Astronomy \u0026amp; Astrophysics graduate students. While Astro 501 is listed as a corerequsite by the registrar, that is primarily a formality, so that non-Astrophysics students will contact me to discuss their background before registering. Previously, we have had some graduate students from physics and engineering who did very well in the course. Of course, some extra thought may be required to figure out how concepts from the course presented in the context of astronomy or astrophysics could be applied to their own field of study.\nEntering Astronomy \u0026amp; Astrophysics graduate students span a wide range in terms of level of experience with programming. The goal is for all students to improve their understanding of computing, software development skills and programming patterns, regardless of whether they enter as a novice or experienced programmer. Students entering with significant computing skills should aim to achieve more than students entering with minimal experience. Astronomy graduate students who are not already familiar with using the Unix/Linux/OS X command line interface and/or with no programming experience are encouraged to take the course, but should be prepared to put in some extra effort early in the semester. If you let me know about your background, I can suggest some resources to help you get started and/or schedule a time to meet with you to answer questions.\nComputing Requirements Hardware We anticipate that students will have access to a laptop computer to work on exercises during classes (pairing up is encouraged even if you both have laptops) and regular access to a laptop or workstation with a good internet connect outside of class. As long as students have a good internet connection, then their local computer can be used for accessing cloud resources and need not be high-powered. If anyone is likely to work form a location with poor internet speed/reliability, then they are encouraged install and run software locally, particularlly for the early part of the class. While students will still need to submit jobs to the ICDS Roar supercomputer during the second half of the class, much of the software development can be done locally before connecting to Roar to submit jbos and retrieve results.\nBasic Software Students will need regular access to the following software:\n Browser: Many cloud resources such as those we will be using regularly (e.g., ACI OpenOnDemand Portal/, GitHub, etc.) require a modern browser. Based on documentation that I\u0026rsquo;ve found for the most demanding sites, I beleive that that Chrome (22+), Firefox (16+), and Internet Explorer (11+) should work, however it\u0026rsquo;s not practical for the instructor to test each possible browser, OS, etc. I plan to test the in class and homework exercises using Chrome. If you find a problem that arises or is fixed by changing browsers, please let the instructor and class know, so others can benefit from your experience. ssh: While I\u0026rsquo;m hoping that most operations can be performed without ssh, it may prove handy to have an ssh client on your laptop. In particular, setting up ssh keys for github can make it easier to connect to your github repository without retyping passwords excessively. VPN Client: In practice, students are likely to want to access the ACI resources when outside of the Penn State network. Therefore, it is likely that they will want to install the GlobalProect Remote Access VPN client.  Many of the early assignments could be executed either on the student\u0026rsquo;s local computer, Penn State\u0026rsquo;s Roar supercomputer, also known as Advanced CyberInfrastructure (ACI) operated by the Institute for Computational \u0026amp; Data Sciences. However, once we get to parallelizing code, students will need to take advantage of the HPC resources provided by ACI anyway. Therefore, all students should setup an account for use ACI during the later parts of the course, regardless of whether they install local software.\nOptional Software For students who find it convenient to install additional software on their local computer, they would likely to want to setup:\n Julia with the IJulia and Pluto packages for accessing Jupyter and Pluto notebooks. An integrated development environment that supports Julia, such as:  VS Code and the Julia for VSCode extension Atom text editor and the Juno extension    Some students may prefer to setup their system using a Docker container that includes Julia, Python, R and Jupter notbook. (If anyone tweaks this to prepare a custom dockerfile for the class, please share it with the rest of the class.) To use Docker containers, students will need to install:\n Docker CE VirtualBox (if using Windows 7 or Windows 10 Home)  Accounts  All students should request an ACI account before the second class meeting. On the account request form, specify ebf11 as the sponsor account and listing Astro528 as the research description. (You can leave computational and Data Requirements box blank, since they already know what will be required for the class.) Students who already have an ACI account should contact i-ASK to request that they add your account to the Astro 528 group. Students should create an account on GitHub. Note that we will examine and discuss student\u0026rsquo;s code both during class and via peer code review. Students may choose to protect their privacy by choosing a github account id that does not identify them. Students may wish to create a separate github account just for this class, so as to avoid being identified by other projects. Prior to the second class meeting, students should send the instructor their PSU and GitHub userids.  "},{"uri":"https://psuastro528.github.io/syllabus/expectations/","title":"Expectations","tags":[],"description":"","content":"Etiquette Students are expected to be civil and considerate in class. In particular, we want to create an environment where everyone feels comfortable asking questions and sharing imperfect code. Students should refrain from any actions that distract their classmates, instructor or the class. It\u0026rsquo;s understandable the cell phones will often be used for two factor authentication, but they should be silenced and put away during class once you\u0026rsquo;ve authenticated. Taking notes on laptops or looking up information relevant to class discussion is encouraged. However, apps and windows unrelated to the class should be closed throughout class.\nThe Eberly College of Science has a Code of Mutual Respect and Cooperation. This code embodies the values that we hope our faculty, staff, and students possess and will endorse to make The Eberly College of Science a place where every individual feels respected and valued, as well as challenged and rewarded.\nAll students are responsible for knowing and following all the rules and regulations for this course as set forth in the syllabus (including the details on the class web site) and what is announced in class. In case of any ambiguity, ask the instructor to clarify.\nEthics and Honorable Behavior All Penn State, Eberly College of Science, and Astronomy Department policies regarding ethics and honorable behavior apply to this course. These can be found at:\n http://www.psu.edu/ufs/policies/47-00.html#49-20 http://www.science.psu.edu/academic/Integrity/Policy.html http://www.astro.psu.edu/deptinfo/Astropolicy.html  Students are expected to present their own work for homework assignments and the class project. Students are be strongly encouraged to consult with each other as part of completing assignments (in addition to making use of pair coding, as described below). How does one reconcile these two? One good rule of thumb is that you (whether an individual or a pair coding team) want to ask for help in planning what to do or figuring out what could be causing a problem, but when it comes time to implement those ideas, you should write the code yourself. When you collaborate with a classmate to develop a plan, you should each implement it individually.\nA second good rule of thumb is that you should not copy and paste text or code for a homework assignment. Any time you do (e.g., if you were to modify code from the Julia base or a package developed by a third party), you should clearly credit the source and indicate this via inline documentation in both the code which parts are you own and which were borrowed. That doesn\u0026rsquo;t mean that you\u0026rsquo;ll get credit for other people\u0026rsquo;s work, but it will mean you\u0026rsquo;ve been upfront about what was your contribution. If you\u0026rsquo;re ever unsure whether something is ok, you should ask and include an explanation of the contributions of others in your code and whatever you turn in.\nPair Coding You are encouraged to engage in “pair coding” for the homework assignments and/or the class project. When pair coding, you can choose to either: 1) have each student be the “driver” for their own part of the assignment (probably best for class projects) or 2) swap between “driver” and “navigator” roles frequently within each question (probably best for homework). Any time you pair code, you should always indicate who you paired with for each task. You may not have one student be the driver for all of question 1, then swap and have another student be the driver for all of question 2, as that makes it likely that the “navigator” will not understand the solution as well as the “driver”. When you engage in pair coding, then you should clearly indicate which student you worked with, so you can both get credit.\nComparing work with others Whether you complete assignments individually or in pairs, you are encouraged to compare your implementation’s code, accuracy and performance to that of your other classmates. Before you make changes after such a comparison, tag your repository with \u0026ldquo;precompare\u0026rdquo; (if for the whole assignment) or \u0026ldquo;precompare-N\u0026rdquo; (where N is the exercise number if you compare one exercise at a time within an assignment). In the pull request, add a few lines summarizing what changes you made and what you learned from the experience (e.g., how much of a difference the change made, if there are are drawbacks to the new approach).\nTimeliness of assignments Students should start all assignments well before the due date, so they can resolve any technical difficulties well in advance of the deadline. Since assignments will typically be discussed in class on the day they are due, credit will be given based on what is submitted prior to class. In cases where turning in assignments on time is not practical due to illness, family emergency, or other university-approved excuse, assignments should still be completed and turned in, but those assignments may not be included when computing the course grade. If portions of the class project totalling more than 10% of course grade can not be completed before the course end date due to illness, family emergency, etc., then the student can elect to receive a “deferred grade” (DF) and to submit the remaining portions of the project no later than eight weeks after the course end date. Students electing this option should be familiar with the PSU DF policies (http://handbook.psu.edu/content/deferred-grade).\nSpecial Accommodations Penn State welcomes students with disabilities into the University\u0026rsquo;s educational programs. If you have a disability-related need for reasonable academic adjustments in this course, contact the Office for Disability Services (ODS) at 814-863-1807 (V/TTY). For further information regarding ODS, please visit the Office for Disability Services Web site at http://equity.psu.edu/ods/.\nIn order to receive consideration for course accommodations, you must contact ODS and provide documentation (see the documentation guidelines at https://equity.psu.edu/ods/guidelines). If the documentation supports the need for academic adjustments, ODS will provide a letter identifying appropriate academic adjustments. Please share this letter and discuss the adjustments with your instructor as early in the course as possible. You must contact ODS and request academic adjustment letters at the beginning of each semester.\nAcademic Success, Learning Assistance, \u0026amp; Student Resources The Eberly College of Science is committed to the academic success of students enrolled in the College\u0026rsquo;s courses and undergraduate programs. When in need of help, students can utilize various College and University wide resources for learning assistance. http://www.science.psu.edu/advising/success/.\n"},{"uri":"https://psuastro528.github.io/syllabus/","title":"Syllabus","tags":[],"description":"","content":"High-Performance Scientific Computing for Astrophysics Astro 528: Fall 2021 Scope \u0026amp; Sprit of the Course High-Performance Scientific Computing for Astrophysics will combine class discussion and programming exercises to train students in the use of modern computing hardware and programming strategies for application to astronomy and astrophysics research. Students will gain experience applying these practices during a class project (potentially in support of the student’s dissertation research).\nWhile it is primarily intended for graduate students in the astronomy \u0026amp; astrophysics program, it is likely also beneficial for graduate students in other physical sciences and engineering.\nThis course can count toward the Penn State Graduate Minor in Computational Science. It is complementary to Phys/Astro 587 Computational Physics/Astrophysics, the recent Astro 585: Astrostatistics and Stat/IST 557: Data Mining. The combination of these four courses with the domain expertise from their Ph.D. program would provide students with an excellent introduction to Data Science.\nThe primary goal is for students to improve their skills in scientific computing, including programming practices for achieving reproducible results and high-performance scientific computing with an eye towards scaling up to larger problems and Big Data. To achieve this, students will develop a basic understanding of modern computer architectures, memory systems, programming languages and common programming patterns. Exercises provide students with experience applying established programming practices (e.g., version control, coding standards, unit testing, debugging, profiling, documenting and reviewing code) and optimizing performance using multi-core processors, clusters, GPUs and (hopefully) cloud computing.\nAll of these objectives may not be realized within the one-semester course, and we will adapt the scope and emphasis based on student interests and programming experience. The version of the syllabus on the course website will be updated throughout the semester and supersede the printed version. Students should check the website regularly for updates.\n Basic Course Information   Course Topics   Readings   Assessed Work   Requirements   Expectations   Accomodations    Course Schedule Additional Resources  "},{"uri":"https://psuastro528.github.io/syllabus/accomodations/","title":"Accomodations","tags":[],"description":"","content":"Penn State welcomes students with disabilities into the University\u0026rsquo;s educational programs. If you have a disability-related need for reasonable academic adjustments in this course, contact the Office for Disability Services (ODS) at 814-863-1807 (V/TTY). For further information regarding ODS, please visit the Office for Disability Services Web site at http://equity.psu.edu/ods/.\nIn order to receive consideration for course accommodations, you must contact ODS and provide documentation (see the documentation guidelines at https://equity.psu.edu/ods/guidelines). If the documentation supports the need for academic adjustments, ODS will provide a letter identifying appropriate academic adjustments. Please share this letter and discuss the adjustments with your instructor as early in the course as possible. You must contact ODS and request academic adjustment letters at the beginning of each semester.\nResources Academic Success, Learning Assistance, \u0026amp; Student Resources\nThe Eberly College of Science is committed to the academic success of students enrolled in the College\u0026rsquo;s courses and undergraduate programs. When in need of help, students can utilize various College and University wide resources for learning assistance. For more information see: http://www.science.psu.edu/advising/success/.\n"},{"uri":"https://psuastro528.github.io/project/rubrics/","title":"Grading Rubric","tags":[],"description":"","content":"Class Project The class project consists of several parts, each of which has its own submission deadline. It is particularly important that you provide code for peer review on time, so that your peer reviewer is able to provide thoughtful and helpful feedback in time for it to improve your code for the latter parts of the project. The project grade will be based on:\nProject Components  Project Proposal (5 points) Checkpoint 1: Serial version of code (10 points) Checkpoint 2: Multi-core version of code (10 points) Peer code reviews (5 points) Checkpoint 3: Distributed-memory/GPU/Phi/Cloud version of code (10 points) Project Presentation (10 points)  The grading rubric for each part of the proposal is provided below.\nProject Proposal  Statement of the project goal (0 points, but required so the rest makes sense) Description of the inputs (1 point) Description of the outputs (1 point) Detailed plan for how the code will be tested (1 point) Discussion of the relevant range of problem sizes (1 point) Complete list of what computer architectures, programming languages, and libraries you will use, as well as an justification of your choices (1 point)  Serial version of code  Code performs proposed tasks (1 point) Comprehensive set of unit tests, at least one integration or regression test (1 point) Code passes tests (1 point) Student code uses a version control system effectively (1 point) Repository includes many regular, small commits (1 point) Documentation for functions\u0026rsquo; purpose and design (1 point) Comprehensive set of assertions (1 point) Variable/function names consistent, distinctive \u0026amp; meaningful (1 point) Useful \u0026amp; consistent code formatting \u0026amp; style (1 point) Code is modular, rather than having chunks of same code copied and pasted (1 point)  Peer Code Reviews  Constructive suggestions for improving programming practices (1 point) Specific, constructive suggestions for improving code readability/documentation (1 point) Specific, constructive suggestions for improving tests and/or assertions (1 point) Specific, constructive suggestions for improving code modularity/organization/maintainability (1 point) Specific, constructive suggestions for improving code efficiency (1 point) Finding any bugs (if code author confirms) (bonus points?)  For more information, see instructions for code review.\nFirst parallel version of code Typically, the first parallel version runs on multiple cores using a shared memory system.\n Choice of portion of code to parallelize (1 point) Choice of approach for parallelizing code (1 point) Code performs proposed tasks (2 point) Unit/regression tests comparing serial \u0026amp; parallel versions (1 point) Code passes tests (1 point) General code efficiency (1 point) Implementation/optimization of multi-core parallelization (2 points) Significant performance improvement (1 point)  Completed Project: Submit second parallel version of code Typically, the second parallel version of the code is parallelized using one of: 1) multiple cores with distributed-memory, GPU, Intel Phi, or a cloud provider.\n Choice of portion of code to parallelize (1 point) Choice of approach for parallelizing code (1 point) Code performs proposed tasks (2 point) Unit/regression tests comparing serial \u0026amp; parallel versions (1 point) Code passes tests (1 point) General code efficiency (1 point) Implementation/optimization of second type of parallelism (2 points) Significant performance improvement (1 point)  Project Presentation  Motivation/Introduction/Overview, so class can understand broader goals (1 point) Explanation of specific calculation being performed, so class can understand what follows (1 point) Documentation (README, API, etc.) provides clear instructions for others to use \u0026amp; test the software (1 point) Provide package, environment, container, or image, and clear instructions, so others can easily reproduce test results (1 point) Analysis/explanation of most time consuming part(s) of calculations (1 point) Analysis/explanation of how time required scales with problem size (1 point) Description of optimization and parallelziation approaches attempted (1 point) Analysis/explanation of performance comparison for different versions of code (1 point) Description/analysis/discussion of what lessons you learned from the class project (1 points) Overall clarity of presentation (1 points)  "},{"uri":"https://psuastro528.github.io/project/code_reviews/","title":"Peer Code Reviews","tags":[],"description":"","content":"  Preparing your Code for Review   How to Conduct Code Review   Follow-up on your Code Review   Rubric for Peer Review   Additional resources with various perspectives on how to conduct an effective code review  Things Everyone Should Do: Code Review Code Reiew Best Practices from Palantir Blog 11 Proven Practices for Peer Review from IBM  "},{"uri":"https://psuastro528.github.io/project/code_reviews/prep/","title":"Preparing your Code for Review","tags":[],"description":"","content":"Preparing Your Own Code for Review Provide overview to help reviewer Please provide your reviewers with a README or other instructions to help them figure out how to spend their time reviewing your code in a way that is most likely to be helpful to you.\nMake sure code is in plain text files (i.e., not only Jupyter notebooks) Jupyter and Pluto notebooks are great to document how to use your code. As functions mature, it\u0026rsquo;s nature to move well tested functions into \u0026lsquo;.jl\u0026rsquo; files. If your code is in the form of julia code (.jl files) or markdown (.jmd) or a Pluto notebook (also a .jl file), then reviewer can already comment on your code directly in GitHub. If you\u0026rsquo;ve been developing code inside a Jupyter notebook (.ipynb file), then remember to create (and commit and push) a .jl or .jmd version for your reviewers to comment on, just as you\u0026rsquo;ve been doing for homework assignments.\njulia -e \u0026#39;using Weave; convert_doc(\u0026#34;NOTEBOOK_NAME.ipynb\u0026#34;,\u0026#34;NOTEBOOK_NAME.jmd\u0026#34;)\u0026#39; Organize your files. If you only have a few functions, then (for now) it\u0026rsquo;s reasonable to have just one file for your main code and one file for tests. If you already have a larger code base, then organize your functions into multiple files .jl and place them in a src directory. Similiarly, use test, and optionally examples and docs directories to make it clear where user/reviewers can find tests, examples and additional documentation.\nGive your reviewer permission to access your repository. Go to your repository\u0026rsquo;s GitHub page and click \u0026ldquo;Settings\u0026rdquo; and \u0026ldquo;Collaborators \u0026amp; teams\u0026rdquo;. Under \u0026ldquo;Collaborators\u0026rdquo; (near the bottom), there\u0026rsquo;s a box \u0026ldquo;Search by username, full name or email address\u0026rdquo;. Enter the github username of your peer reviewer(s). Then click \u0026ldquo;Add collaborator\u0026rdquo;. The easiest option is to leave the permission level as \u0026ldquo;Write\u0026rdquo;.1 That should trigger an email inviting them to join the repository2. If your project repo was created by following the link I gave, then I should already have access to your project repository. If you created your project repository some other way, then please send me an email with \u0026ldquo;Astro 528 project url\u0026rdquo; in the subject line and the repo url in the message body (as well as the github id of your partner if working in a team).\nSetup Continuous Integration Testing While it\u0026rsquo;s not required for the first code submission, eventually you will want to setup continuous integration testing. Previously, we used Travis-CI, but now I think using GitHub Actions will be easier.\n  If you\u0026rsquo;d rather not give your peer reviewer write access to your repository, then you could create a new repository, copy your files into that repository, and given your peer reviewer write access to just that repository copy. You\u0026rsquo;d also need to invite your instructor to have access to your new repository. (Personally, I doubt it\u0026rsquo;s worth the extra effort.) \u0026#x21a9;\u0026#xfe0e;\n Some times automated emails from github can be overlooked. So if it might be nice if you also click \u0026ldquo;Copy invite link\u0026rdquo;, click the little clipboard icon, and send them an email saying \u0026ldquo;here\u0026rsquo;s the link to my repository for you to review\u0026rdquo;. \u0026#x21a9;\u0026#xfe0e;\n   "},{"uri":"https://psuastro528.github.io/project/code_reviews/how_to/","title":"How to Conduct Code Review","tags":[],"description":"","content":"Once you\u0026rsquo;ve been granted permission to a repository to review, browse to the repository on GitHub, take a look at the README (or whatever other documentation they provided).\nNext, browse the source files on GitHub by clicking on the file to review. Try to provide specific feedback on potential opporunities for improvement in each of the categories listed below. In most cases, I think it will generally be easiest to create a new issue for each suggestion linked to the line(s) of codes that you\u0026rsquo;re commenting on (see below for step-by-step instructions). In cases, where it would be more useful to describe a repeated issue once (e.g., \u0026ldquo;Your function docstrings did not explain what the inputs should be.\u0026quot;), then you can create one (or a few issues) and then in the comment section mention that \u0026ldquo;This issue appears repeatedly in this function (or file)\u0026quot;.\nLogistics of providing comments via GitHub Issues When you see a specific line of code that you\u0026rsquo;d like to comment on, click the line number to the left of the code. A box containing \u0026ldquo;\u0026hellip;\u0026rdquo; will appear just to the left of the line number. If you click there, you\u0026rsquo;ll get a drop-down menu. Choose \u0026ldquo;Reference in new issue\u0026rdquo;. At that point you\u0026rsquo;ll be brought to a new screen where you can describe the issue you\u0026rsquo;ve identified. If you want to comment on a chunk of code (rather than one line), then first click on the line number of the beginning of the block you want to comment on. Then hold down \u0026ldquo;Shift\u0026rdquo; and click on the line number at the end of the block you want to comment on. Then click the box containing \u0026ldquo;\u0026hellip;\u0026quot;, and choose \u0026ldquo;Reference in a new issue\u0026quot;g\nIf your feedback is something quite straight forward (e.g., missing docstring, uneven spacing), then just a few words in the title will be sufficient to convey the issue to the author. The lines you selected will be quoted, so the authors can see the code you\u0026rsquo;re commenting on. When you have a more substantive suggestions, then you should write a sentence or paragraph explaining your suggestion for why/how the code (or documentation) could be improved. Once you\u0026rsquo;ve finished explaining that suggestion, \u0026ldquo;Submit new issue.\u0026rdquo; This will trigger an email to the repository owner (and anyone else who is \u0026ldquo;watching\u0026rdquo; the repository; to watch a repository click on the box with the eyeball in the upper right).\nSpecific Suggestions After you\u0026rsquo;ve reviewed the code, look over the issues you created to sure that you\u0026rsquo;ve provided at least one suggestion in each of the four categories below. For each categories, I\u0026rsquo;ve include a list with examples of types of suggestions that could be useful to be on the look out for.\nReadability \u0026amp; Documentation (1 point)  Documentation  Functions that could benefit from better documentation of purpose, inputs or puts Functions that could benefit from better documentation of their design or implementation Type or modules that could benefit from documentation Documentation that is obsolete, redundant or not helpful   Style  Indentation \u0026amp; spacing that could be improved Places where an error/warning messages could be added/improved Fixing inconsistencies in coding style (e.g., Julia Style Guide)   Old code that could be removed (never reached or commented out)  Testing \u0026amp; Assertions (1 point)  Additional assertions Additional unit tests Additional integration and/or regression tests  Organization, Modularity \u0026amp; Maintainability (1 point)  Overall organization of the code Repeated code could be moved into a function Defining a composite type to improve code readability/organization Improving names for variables, functions, types, modules, etc. Places where could use interfaces (rather than directly accessing fields) Places where moving code into separate files/directories would be helpful Opportunities to make functions more generic  Efficiency \u0026amp; Performance (1 point)  Data structures that may inhibit memory/cache performance Places were unnecessary/repeated work could be eliminated Functions where another algorithm may be more efficient Non-const global variables that could be avoided Functions where type instability could affect performance Places where developer might want to try benechmarking an alternative implementation  General Suggestions After providing specific suggestions, step back to think about the big picture. Try to provide constructive suggestions for how the developer(s) could improve their programming practices. If it would be useful to add comments at specific lines of code on the pull request, you\u0026rsquo;re welcome to do so. Even in you do that case, please provide a summmary of your main suggestsions as a separate issue with title \u0026ldquo;Code review summary\u0026rdquo;. (1 point)\nBugs? If you think you may have found a bugs, then please let the developer know. If it\u0026rsquo;s an implementation detail (e.g., missing minus sign, need to use deepcopy instead of copy), then please comments at the point of the bug in responce to the developer(s) pull request. If it\u0026rsquo;s a bigger issue, then you can create an \u0026ldquo;Issue\u0026rdquo; via GitHub, where the developer and user can discuss that potential bug.\n"},{"uri":"https://psuastro528.github.io/project/code_reviews/follow_up/","title":"Follow-up on your Code Review","tags":[],"description":"","content":"Making use of your code review On GitHub, browse to your repository and click the \u0026ldquo;Issues\u0026rdquo; tab. Then you should have a list of all the issues that have been created. You can click on each issue\u0026rsquo;s name to see the specific lines of code they cited and to read the reviewer\u0026rsquo;s full comments. Some suggestions will clearly be good ideas and easy to fix quickly. Once you\u0026rsquo;ve updated the code as appropraite (commited and pushed that change), then you can enter \u0026ldquo;Done\u0026rdquo; in the box at the bottom and click \u0026ldquo;Close issue\u0026rdquo;. Other issues may benefit from you replying to the reviewer to ask for further information (e.g., \u0026ldquo;Are you asking what the variable \u0026lsquo;x\u0026rsquo; is?\u0026quot;). Other issues may just require more time to incorporate. You\u0026rsquo;re welcome to try out more advanced features (e.g., adding labels to help you prioritize issues, assiging one of your team members to deal with each issue, etc. Once you close an issue it\u0026rsquo;ll no longer show up on the default issues page (but you can still go back to see them by clicking \u0026ldquo;Closed\u0026rdquo;), so it\u0026rsquo;s easy to focus on the open issues. Feel free to create your own issues (especially if you\u0026rsquo;re working in a team) to help organize the work for the rest of the project.\n"},{"uri":"https://psuastro528.github.io/project/code_reviews/rubric/","title":"Rubric for Peer Review","tags":[],"description":"","content":"Grading Rubric for Assessing the Peer Review  Constructive suggestions for improving programming practices (1 point) Specific, constructive suggestions for improving code readability/documentation (1 point) Specific, constructive suggestions for improving tests and/or assertions (1 point) Specific, constructive suggestions for improving code modularity/organization/maintainability (1 point) Specific, constructive suggestions for improving code efficiency (1 point) Finding any bugs (if code author confirms) (bonus points?)  "},{"uri":"https://psuastro528.github.io/lessons/","title":"Schedule","tags":[],"description":"","content":" Readings, Tutorials \u0026amp; Other Preparation for Class Lab/Homework Exercises Class Project   Preparing for Class Week 1  Prior to Monday\u0026rsquo;s class  Think Julia Ch 1: The Way of the Program Github tutorial (at least through “Fork a Repo”)   Prior to Thursday\u0026rsquo;s class  The Rationale for Julia: Getting Started with Julia Programming (6pgs avaliable via \u0026ldquo;First Pages\u0026rdquo; as Preview/\u0026ldquo;Look Inside!\u0026quot;) Writing Scientific Software Ch 2 (22pgs): Scientific Computation and numerical analysis Start Lab 1 If it will help you with the lab: Think Julia Ch 2: Variables, Expressions \u0026amp; Statements    Week 2  Prior to Monday\u0026rsquo;s class  Writing Scientific Software Ch 3: Priorities (6pg) Writing Scientific Software Ch 4: Famous Disasters (4pg) Best Practices for Scientiﬁc Computing: Sec. 1-4 (6pg)   Prior to Thursday\u0026rsquo;s class  Best Practices for Scientiﬁc Computing: Sec. 5-9 (5pg) Start Lab 2    Week 3  Prior to Monday\u0026rsquo;s class  Writing Scientific Software Ch 7: Software Design (26pg, ok to skip 7.11-12) Best Practices for Code Review   Prior to Thursday\u0026rsquo;s class  A beginner\u0026rsquo;s guide to Big-O notation Big-O Cheat Sheet Start Lab 3    Week 4  Prior to Monday\u0026rsquo;s class  Writing Scientific Software Ch 6: Computer Organization (12pg) Either  Introduction to High Performance Computing for Scientists and Engineers Ch 1: Modern Processors (32pg) -or- Introduction to High-Performance Computing Ch 1-1.3.4.1: Single-processor Computing (13pg)     Prior to Thursday\u0026rsquo;s class  Writing Scientific Software Ch 17.3: Profiling (2pg) Why does Julia work so well? Submit Project Proposal    Week 5  Prior to Tuesday\u0026rsquo;s class  Introduction to High Performance Computing for Scientists and Engineers Ch 2: Serial Optimization (26pg)   Prior to Thursday\u0026rsquo;s class  Start Lab 4     Lab/Homework Exercises  Tools, Floating Point Arithmetic, Functions, Tests (Due Aug 29)\n Exercise 1: Core development tools  ICDS-ACI portal git GitHub.com Julia Jupyter Notebooks Pluto Notebooks   Exercise 2: Floating Point Arithmetic, Functions, Tests Exercise 3: Personal Goals (save at least 15 minutes for this one)  Assertions, Unit Testing, Countinuous Integrations, Benchmarking (due Sept 5)  Exercise 1: Benchmarking, Big-O Analysis, Compute vs Memory Limits Exercise 2: Numerical Stability of N-body Integration Exercise 3: Unit Testing for Floating Point Arithmetic, Defensive Programming, Assertions, Continuous Integration, End-to-end testing, Validation  Memory Access, Disk I/O, DataFrames (due Sept 12)\n Exercise 1: Benchmarking File I/O \u0026amp; Calling Python Packages Exercise 2: DataFrames, Join, Query Exercise 3: Dense Matrix-Vector Multiply   TODO: Add remaining labs\n Class Project Schedule  Project proposal (due Sept 16) Serial version of code (due Oct 6) Peer code review (due Oct 14) Parallel version of code (multi-core) (due Nov 4) Second parallel version of code (distributed-memory/GPU/cloud) (due Nov 18) Completed code \u0026amp; documentation (due Dec 2) Class presentations (Nov 30 - Dec 10, detailed schedule )   "},{"uri":"https://psuastro528.github.io/labs/","title":"Lab/Homework Exercises","tags":[],"description":"","content":"Tools, Floating Point Arithmetic, Functions, Tests (Due Aug 29)\n Exercise 1: Core development tools  ICDS-ACI portal git GitHub.com Julia Jupyter Notebooks Pluto Notebooks   Exercise 2: Floating Point Arithmetic, Functions, Tests Exercise 3: Personal Goals (save at least 15 minutes for this one)  Assertions, Unit Testing, Countinuous Integrations, Benchmarking (due Sept 5)  Exercise 1: Benchmarking, Big-O Analysis, Compute vs Memory Limits Exercise 2: Numerical Stability of N-body Integration Exercise 3: Unit Testing for Floating Point Arithmetic, Defensive Programming, Assertions, Continuous Integration, End-to-end testing, Validation  Memory Access, Disk I/O, DataFrames (due Sept 12)\n Exercise 1: Benchmarking File I/O \u0026amp; Calling Python Packages Exercise 2: DataFrames, Join, Query Exercise 3: Dense Matrix-Vector Multiply   "},{"uri":"https://psuastro528.github.io/project/","title":"Class Project","tags":[],"description":"","content":"Students are encouraged to choose a class project that could benefit their research interests. Students should discuss their plans before submitting the project proposal, so as to maximize the chances that they choose a project that is interesting enough to be worth parallelizing, yet simple enough that they can complete the project (while implementing the best practices discussed in this course) in a reasonable ammount of time. Students who have not started their dissertation research may ask the instructor for project suggestions.\nFor the class project, students will put into practice the software development practices they learn in this course, including assertions, tests, documentation, version control, modular design, and packaing for easy resuse by others. Students will participate in a peer code review process to identify opportunities to improve their coding.\nNext, students will identify an appropriate portion of the code to optimize, optimize it for serial computation, and compare benchmark results. Students will parallelize the an appropriate portion of the code for two different computing architectures and explore how their code performance scales. Students will package their code so that others can easily install and run the code to reproduce some simple calculation. In the final report and presentation, students will describe their findings and lessons learned, so the full class can learn from their experience.\nThe regular homework exercises are designed to provide the scafolding to help students succeed with a class project. In any weeks where you complete the homework exercises quickly, consider making progress on your class project. While students will choose different projects, all should share the same key elements:\n Project Proposal Serial Code that passes tests (serial) First Peer Code Review (of serial code) Code parallelized for multi-core system Second Peer Code Review (of parallelized code) Code parallelized for distributed-memory, accelerator or cloud Benchmarking results showing how the performance of the code scales with increasing number of processors for multiple problem sizes Presentation to class (Presentation Schedule) Documentation and packaging of code for reuse by others  See the grading rubrics for details of the expectations for each part of the project.\n"},{"uri":"https://psuastro528.github.io/goals/","title":"Learning Goals","tags":[],"description":"","content":"Learning Goals \u0026amp; Objectives Week 1  Understand course goals, overview, organization Recognize opportunities to improve producitivty through software development practices Exercise 1: Use software development tools  Access ICDS-ACI Portal\u0026rsquo;s Jupyter Notebook Server using Julia Kernel Optionally access Julia+Git on your own computer Use Git \u0026amp; GitHub.com for retreiving and submitting lab assignments   Exercise 2: Floating Point Arithmetic, Functions, Tests  Write code as a function Use/write tests of code Become vigilant about potential pitfalls with floating-point arithmetic   Exercise 3: Develop personal goals for semester  Week 2  Priorities for Scientific Computing Exercise 1: Benchmarking  Benchmark functions accurately Predict cost of an algorithm based on Big-O analysis Identify real world complications that affect scaling   Exercise 2: Numerical Stability of N-body Integration  Integrate differential equations Compare the accuracy and numerical stability of results as a function of time step, order and integration Appreciate importance of numerical stability   Exercise 3: Model for Radial Velocity of a Star  Practice documenting your functions effectively Write effective tests for floating point calculations Reduce bugs via composite types and named function parameters Reduce bugs via assertions Identify bugs promptly via unit testing Identify bugs promptly via continuous integration testing End-to-end Testing to validate code    Week 3  Exercise 1  Recognize pros/cons of different file formats   Exercise 2  Recognize importance of choosing an efficient algorithm Use DataFrames efficiently via join and queries   Exercise 3  Recognize significance of memory layout \u0026amp; data structures   Class Project  Apply \u0026ldquo;Programming in the Large\u0026rdquo; to your class project Choose appropriate file format for a project Choose appropraite memory layout \u0026amp; data structures for a project    Week 4  Describe steps a CPU performs surrounding actual arithmetic Anticipate when performance will be affected by cache size Project  Plan data structures to optimize for memory access Profile code to identify code worth optimizing Document code to increase chances of useful feedback from peer code review    Week 5  Exercises  Fit a model to data Identify type instability Write type stable functions Profile code Identify inefficiencies Optimize code for serial execution    Week 6  Describe what an optimizing compiler can optimize for you Describe what an optimizing compiler can\u0026rsquo;t optimize for you Understand how linear algebra libraries acheive peak performance through memory access pattern Describe interaction between global variables and type stability of functions Explain why parallelism in increasingly important Describe function overloading \u0026amp; multiple dispatch Describe benefits of use abstract types and containers of abstract types Describe benefits of an Application Programming Interface  Week 7  Lab 5, Exercise 1  Read \u0026amp; write models using a probabilistic programming language Estimate uncertainties in model parameters using Markov chain Monte Carlo   Project  Preparing for a code review Use GitHub Issues to report issues   Readings / Discussions  Evaluating the suitability of a problem for different parallel architectures    Week 8  Lab 5, Exercise 2  Choose an appropriate number of worker processors for your compute node Load code and packages on worker nodes Parallelize code using pmap Parallelize code using SharedArray\u0026rsquo;s Parallelize code using map and mapreduce on DistributedArray\u0026rsquo;s Parallelize code using @distributed for loop Parallelize code using Threads.@threads   Project  Provide constructive feedback in code review Use GitHub Issues to manage tasks for code base   Readings / Discussions  Evaluating the suitability of a problem for different parallel architectures    Week 9  Lab 6, Exercise 1  Submit a batch job via PBS Read and write data from batch job Run multiple jobs using a job array   Lab 6, Exercise 2:  Reinforce programming using Distributed Arrays Explain differences in performance when using multiple processor cores on same node versus using multiple processor cores on different nodes   Project  Run project code as batch job on the ICS-ACI cluster   Readings / Discussions  Evaluating the suitability of a problem for different parallel architectures    Week 10  Lab 7, Exercise 1  Run GPU code on ICS-ACI Accelerate linear algebra computations with GPU Recognize what problem sizes and likely to result in acceleration with a GPU for linear algebra   Lab 7, Exercise 2:  Perform custom scientific computations using high-level GPU interface Improve performance by reducing kernel launches via broadcasting and GPU kernel fusion Improve performance by reducing memory transfers via GPU reductions Recognize what types of problems and problem sizes are likely to result in acceleration with a GPU when using a high-level programming interface   Lab 7, Exercise 3:  Write a GPU kernel Improve performance through reduced memory usage Recognize when a custom kernel is likely improve GPU performance   Project  Gain experience parallelizing a real world code Identify changes need to acheive significant performance benefit via parallelization   Readings / Discussions  Describe how GPU differs from CPU Assess the prospects for a given algorithm to acheive a significant speed-up using a GPU    Week 11  Readings / Discussions  Identify common challenges for providing reproducible software \u0026amp; workflow Describe how Julia\u0026rsquo;s package manager facilitate reproducible research Describe other common tools \u0026amp; strategies for facilitating reproducible research   Project  Parallelize real world code Acheive significant performance benefit via parallelization    Week 12  Lab 8, Exercise 1: Create a Julia Package  Package your project software so it can readily be used by others   Lab 8, Exercise 2: Reflect on your Goals for the Semester  Appreciate your growth as a software developer over the semester Identify any areas you wish to contiune to build skills and good habits beyond this semester   Project  Gain experience with second mechanism for parallelizing real world code Work towards acheiving a significant performance benefit via second parallelization   Readings / Discussions  Describe benefits and disadvanages of cloud computing Determine whether a project would be well suited for running in the cloud    Week 13-15  Project  Characterize peformance of class project Characterize performance as a function of problem size Characterize performance as a function of number of processors (both strong and weak scaling) Predict how much performance could be improved with further optimization/parallelization Make code easy for others to reuse Make benchmarks easy to reproduce (for their own system)   Project Presentations  Explain reasons for observed performance Share lessons learned in course of class project    "},{"uri":"https://psuastro528.github.io/tips/","title":"How-To&#39;s &amp; Tips","tags":[],"description":"","content":"Tips  Using ICDS-ACI/Roar   Starting \u0026amp; Submitting Assignments   Add your tips You can add your tips by creating a page in the content/tips directory and making a pull request at this site\u0026rsquo;s source. Thanks!\n"},{"uri":"https://psuastro528.github.io/tips/aci/","title":"Using ICDS-ACI/Roar","tags":[],"description":"","content":"Need to update this page for Fall 2021 Instructions for Completing Labs via ICS ACI Portal  Setup Julia kernel to work with ICS-ACI (only needs to be done once per user) Start a Jupyter Notebook session on ACI   Setup Julia kernel to work with ACI\u0026rsquo;s Jupyter notebook server  Browse to portal.aci.ics.psu.edu Login (if necessary) Click Interactive Apps on top menu Before using Julia on ACI for the first time  Choose ACI Interactive Desktop Click Launch Wait while your job starts Once the Launch noVNC in new tab button appears, click it   Open a terminal via second button on bottom toolbar Run the following code in the terminal  module load python/3.6.3-anaconda5.0.1 cd work mkdir julia_depot # Setup a Julia package depot in your ACI work directory cd julia_depot export JULIA_DEPOT_PATH=$PWD echo \u0026#34;export JULIA_DEPOT_PATH=$PWD\u0026#34; \u0026gt;\u0026gt; ~/.bashrc cd .. # Install Julia in your work directory mkdir julia_install cd julia_install/ wget https://julialang-s3.julialang.org/bin/linux/x64/1.0/julia-1.0.2-linux-x86_64.tar.gz tar -xf julia-1.0.2-linux-x86_64.tar.gz cd julia-1.0.2 # Setup paths so Julia can be found # If you\u0026#39;ve not used ICS-ACI before (or have used it without changing the # default settings), then the follow lines should work. export PATH=$PWD/bin:$PATH export LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH export LD_LIBRARY_PATH=$PWD/lib/julia:$LD_LIBRARY_PATH echo \u0026#34;export PATH=$PWD/bin:$PATH\u0026#34; \u0026gt;\u0026gt; ~/.bashrc echo \u0026#34;export LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH\u0026#34; \u0026gt;\u0026gt; ~/.bashrc echo \u0026#34;export LD_LIBRARY_PATH=$PWD/lib/julia:$LD_LIBRARY_PATH\u0026#34; \u0026gt;\u0026gt; ~/.bashrc # But if you have already been using ICS-ACI, then you may have adjusted # your default paths in a way that prevents the ICS-ACI portal from starting # properly. (Or a program may have done it for you. In that case, I # suggest commenting out the lines of your .bashrc, .bash_profile, # .bash_login or .profile that set your PATH variable. # Then logout of aci-i and log back in, so that you\u0026#39;re back to the \u0026#34;default\u0026#34; # PATH. Then try following command (not commented out) # export PATH=${PATH}:/storage/home/ebf11/work/julia_install/julia-1.0.2/bin:/opt/aci/sw/python/3.6.3_anaconda-5.0.1/scripts:/usr/lib64/qt-3.3/bin # to update your path default to including julia and python. # Setup IJulia and a few packages that we\u0026#39;ll be using lots julia -e \u0026#39;using Pkg; Pkg.add([\u0026#34;IJulia\u0026#34;,\u0026#34;Weave\u0026#34;,\u0026#34;NBInclude\u0026#34;])\u0026#39;  If you do not already have ssh keys setup on ICS-ACI, then create them with:  # Create ssh-keys (unless you\u0026#39;ve already done that on ACI) ssh-keygen -t rsa -b 4096 # follow prompts, default location should be ok cat ~/.ssh/id_rsa.pub  If this is your first time using git, then enter something for your name and email (you may wish to use your github id rather than your real name, and a non-email address like nobody@nowhere.org).  git config --global user.email \u0026#34;nobody@nowhere.org\u0026#34; git config --global user.name \u0026#34;Your Github Id\u0026#34;  Authorize your ssh-keys on GitHub, following these instructions but manually copying the key rather than using xclip (i.e., starting from step 2) Shutdown the session and close the browser window/tab with the ACI Interactive Desktop Go back to the \u0026ldquo;My Interactive Sessions\u0026rdquo; tab in the ACI Portal, click \u0026ldquo;Delete\u0026rdquo; for this Sessions and confirm.   Start a Jupyter notebook session on ACI Each time in the future you want to start a Jupyter notebook session on ICS-ACI\n Browse to portal.aci.ics.psu.edu Login (if necessary) Click Interactive Apps on top menu Choose Jupyter Notebook  Select:  Anaconda version: 5.0.1-3.6.3 Allocation: Open Number of hours: 2 hours Node type: ACI-i   Click Launch Wait while your job starts   Once the Connect to Jupyter Notebook Server button appears, click it  Near the upper right, there\u0026rsquo;s a New button, from which you can create a new blank notebook using Julia 1.0.2 or access a terminal or text editor. If you\u0026rsquo;d like to create a blank notebook, then choose New.Julia 1.0.2 A new browser tab should open where you can work with a notebook interactively. Do your work, remembering to save your notebook after key edits and before you quit.   See [../submitting](Starting \u0026amp; Submitting Assignments) for more information on accessing and submitting assignments. When you\u0026rsquo;re done, close notebook tabs and click logout in upper right (of the Jupyter server session). Go back to the \u0026ldquo;My Interactive Sessions\u0026rdquo; tab in the ACI Portal, click \u0026ldquo;Delete\u0026rdquo; for this Sessions and confirm.  "},{"uri":"https://psuastro528.github.io/tips/aci/initial_setup/","title":"Initial Setup for Astro 528 on ACI","tags":[],"description":"","content":"TODO: Need to update this page for Fall 2021 Setup Julia kernel to work with ACI\u0026rsquo;s Jupyter notebook server  Browse to portal.aci.ics.psu.edu Login (if necessary) Click Interactive Apps on top menu Before using Julia on ACI for the first time  Choose ACI Interactive Desktop Click Launch Wait while your job starts Once the Launch noVNC in new tab button appears, click it   Open a terminal via second button on bottom toolbar Run the following code in the terminal  module load python/3.6.3-anaconda5.0.1 cd work mkdir julia_depot # Setup a Julia package depot in your ACI work directory cd julia_depot export JULIA_DEPOT_PATH=$PWD echo \u0026#34;export JULIA_DEPOT_PATH=$PWD\u0026#34; \u0026gt;\u0026gt; ~/.bashrc cd .. # Install Julia in your work directory mkdir julia_install cd julia_install/ wget https://julialang-s3.julialang.org/bin/linux/x64/1.0/julia-1.0.2-linux-x86_64.tar.gz tar -xf julia-1.0.2-linux-x86_64.tar.gz cd julia-1.0.2 # Setup paths so Julia can be found # If you\u0026#39;ve not used ICS-ACI before (or have used it without changing the # default settings), then the follow lines should work. export PATH=$PWD/bin:$PATH export LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH export LD_LIBRARY_PATH=$PWD/lib/julia:$LD_LIBRARY_PATH echo \u0026#34;export PATH=$PWD/bin:$PATH\u0026#34; \u0026gt;\u0026gt; ~/.bashrc echo \u0026#34;export LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH\u0026#34; \u0026gt;\u0026gt; ~/.bashrc echo \u0026#34;export LD_LIBRARY_PATH=$PWD/lib/julia:$LD_LIBRARY_PATH\u0026#34; \u0026gt;\u0026gt; ~/.bashrc # But if you have already been using ICS-ACI, then you may have adjusted # your default paths in a way that prevents the ICS-ACI portal from starting # properly. (Or a program may have done it for you. In that case, I # suggest commenting out the lines of your .bashrc, .bash_profile, # .bash_login or .profile that set your PATH variable. # Then logout of aci-i and log back in, so that you\u0026#39;re back to the \u0026#34;default\u0026#34; # PATH. Then try following command (not commented out) # export PATH=${PATH}:/storage/home/ebf11/work/julia_install/julia-1.0.2/bin:/opt/aci/sw/python/3.6.3_anaconda-5.0.1/scripts:/usr/lib64/qt-3.3/bin # to update your path default to including julia and python. # Setup IJulia and a few packages that we\u0026#39;ll be using lots julia -e \u0026#39;using Pkg; Pkg.add([\u0026#34;IJulia\u0026#34;,\u0026#34;Weave\u0026#34;,\u0026#34;NBInclude\u0026#34;, \u0026#34;Pluto\u0026#34;, \u0026#34;PlutoUI\u0026#34;])\u0026#39;  If you do not already have ssh keys setup on ICS-ACI, then create them with:  # Create ssh-keys (unless you\u0026#39;ve already done that on ACI) ssh-keygen -t rsa -b 4096 # follow prompts, default location should be ok cat ~/.ssh/id_rsa.pub  If this is your first time using git, then enter something for your name and email (you may wish to use your github id rather than your real name, and a non-email address like nobody@nowhere.org).  git config --global user.email \u0026#34;nobody@nowhere.org\u0026#34; git config --global user.name \u0026#34;Your Github Id\u0026#34;  Authorize your ssh-keys on GitHub, following these instructions but manually copying the key rather than using xclip (i.e., starting from step 2) Shutdown the session and close the browser window/tab with the ACI Interactive Desktop Go back to the \u0026ldquo;My Interactive Sessions\u0026rdquo; tab in the ACI Portal, click \u0026ldquo;Delete\u0026rdquo; for this Sessions and confirm.  "},{"uri":"https://psuastro528.github.io/tips/aci/jupyter/","title":"Jupyter Notebooks on ACI","tags":[],"description":"","content":"TODO: Need to update this page for Fall 2021 Start a Jupyter notebook session on ACI Each time in the future you want to start a Jupyter notebook session on ICS-ACI\n Make sure you have an account on ACI and have completed the initial setup Browse to portal.aci.ics.psu.edu Login (if necessary) Click Interactive Apps on top menu Choose Jupyter Notebook  Select:  Anaconda version: 5.0.1-3.6.3 Allocation: Open Number of hours: 2 hours Node type: ACI-i   Click Launch Wait while your job starts   Once the Connect to Jupyter Notebook Server button appears, click it  Near the upper right, there\u0026rsquo;s a New button, from which you can create a new blank notebook using Julia 1.0.2 or access a terminal or text editor. If you\u0026rsquo;d like to create a blank notebook, then choose New.Julia 1.0.2 A new browser tab should open where you can work with a notebook interactively. Do your work, remembering to save your notebook after key edits and before you quit.   See [../submitting](Starting \u0026amp; Submitting Assignments) for more information on accessing and submitting assignments. When you\u0026rsquo;re done, close notebook tabs and click logout in upper right (of the Jupyter server session). Go back to the \u0026ldquo;My Interactive Sessions\u0026rdquo; tab in the ACI Portal, click \u0026ldquo;Delete\u0026rdquo; for this Sessions and confirm.  "},{"uri":"https://psuastro528.github.io/tips/aci/julia_parallel_on_aci/","title":"Fix for SSH keys on ACI","tags":[],"description":"","content":"TODO: Need to Update for Fall 2021 When you first try submiting a batch job to ACI to run Julia on multiple processors, you may get one of two error messages relaed to your SSH keys requiring a password or your ssh keys not being authorized.\nFirst, try sshing from one ACI system to another (e.g., ssh aci-b.aci.ics.psu.edu). Does it just connect you? Or does it ask you for a password? If it asks for a password, is it asking for your Penn State password or the password you setup for your ssh keys?\nIf it asks you for your Penn State Password\u0026hellip; You appear to not have ssh keys setup on ACI.\n Run the script at the bottom of this page on ACI. Authorize your github account sent/receive info using your new ssh keys, as described here. Try submitting ex1_parallel.pbs again  If it asks you for the password to your ssh keys\u0026hellip; You need to create ssh keys that don\u0026rsquo;t have a password.\n Run the updateKeys.sh script at the bottom of this page. Reauthorize your github account sent/receive info using your new ssh keys, as described here. Try submitting ex1_parallel.pbs again  If it does not ask you for any password\u0026hellip; You\u0026rsquo;re probably very close (or you have a problem that we haven\u0026rsquo;t encountered before). Please try running the following commands from the ACI command line. Then try submitting a parallel job again.\n# Authorize for this location (home is shared on the compute nodes) cp ~/.ssh/authorized_keys ~/.ssh/authorized_keys.replaced cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys # Setting up the host key checking... echo \u0026#34;StrictHostKeyChecking no\u0026#34; \u0026gt; ~/.ssh/config # Correct the permissions chmod 444 ~/.ssh/config chmod 640 ~/.ssh/authorized_keys chmod 700 ~/.ssh One more thing to try\u0026hellip; If you\u0026rsquo;re still having trouble, then\n Download the roundRobinKnownHosts.sh script below onto ACI.  wget http://psuastro528.github.io/tips/julia_parallel_on_aci.files/roundRobinKnownHosts.sh Make the script executable  chmod u+x roundRobinKnownHosts.sh Run the script for aci-i, aci-b and datamgr  ./roundRobinKnownHosts.sh aci-i.aci.ics.psu.edu \u0026gt;\u0026gt; ~/.ssh/known_hosts ./roundRobinKnownHosts.sh aci-b.aci.ics.psu.edu \u0026gt;\u0026gt; ~/.ssh/known_hosts ./roundRobinKnownHosts.sh datamgr.aci.ics.psu.edu \u0026gt;\u0026gt; ~/.ssh/known_hosts Script for setting up ssh keys for using Julia in parallel. The updateKeys.sh script below will replace your ssh keys with new ones that should work with julia in parallel. If you run the updateKeys.sh script, then you\u0026rsquo;ll likely need to add the new ssh key to the list of authorized keys for your github account in order to continue pulling and pushing between ACI and github. As far as I know, the roundRobinKnownHosts.sh script doesn\u0026rsquo;t break anything.\n  Shell scripts   roundRobinKnownHosts.sh  (0 kB)   updateKeys.sh  (4 kB)   "},{"uri":"https://psuastro528.github.io/tips/aci/jupyter_gpu_nodes/","title":"Running Jupyter on a GPU node","tags":[],"description":"","content":"TODO: Need to Update for Fall 2021\nYou can currently access a K4000 GPU on the ACI interactive nodes from the Jupyter notebook server. Students in the class can access more powerful P100 GPUs (with support for double precission arithmetic) via the CyberLAMP cluster by specifying the following PBS options:\n -A cyberlamp_class -l qos=cl_class -l nodes=1:ppn=1:gpus=1  If you would like to run Jupyter on a GPU node, then you can try the following instructions kindly provided by Justin Petucci:\n Download firefox singularity image:  mkdir -p ~/work/sw/singularity cd ~/work/sw/singularity singularity pull shub://jpetucci/firefox_icsaci  Launch an Interactive Desktop session from OpenOnDemand\n  Submit an interactive batch job (you will need to change the resources like memory and walltime based on your needs):\n  qsub -I -X -A cyberlamp_class -l qos=cl_class -l nodes=1:ppn=1:gpus=1 -l walltime=2:00:00 After your job starts, start a screen session:  screen Load the Python module:  module load python/3.6.3-anaconda5.0.1 Start Jupyter:  jupyter notebook  Copy the link for the notebook server. For example, the address might look like http://localhost:8888/?token=de99f0c76cbcfcb183693ff0491f00f278d781bb3586ea8e . Do not try to use the address given as an example.\n  Detach the screen session: press control+A+D to detach from the screen session\n  Launch firefox:\n  singularity run ~/work/sw/singularity/jpetucci-firefox_icsaci-master-latest.simg Paste the address of the notebook server into firefox  Good luck. If you find corrections, pleaset submit a PR to improve these instructions.\n"},{"uri":"https://psuastro528.github.io/tips/submitting/","title":"Starting &amp; Submitting Assignments","tags":[],"description":"","content":"Need to update this page for Fall 2021 Instructions for Completing Labs via ICS ACI Portal  Clone your Github Repository on ACI (only need to do once per assignment) Test your code Commit your work and push to Github Submit your work via Github pull request Review the feedback on your submission   Clone your github repository to begin a new assignment  Request a Jupyter notebook session on ACI (see getting started) While waiting for it to start, let\u0026rsquo;s get the url for the repo to be cloned.  If you haven\u0026rsquo;t followed the link to create your repo for this week\u0026rsquo;s assignment, do that now. Following that link should trigger GitHub to create a private git repository named labN-GITHUBID (where N is the week number and GITHUBID is the GitHub username that you\u0026rsquo;re logged in as at the time you follow the link). Navigate to the github repository you\u0026rsquo;ll be using in your browser. Click Clone or download. If it says \u0026ldquo;Clone with https\u0026rdquo;, click \u0026ldquo;Use ssh\u0026rdquo;. Click the clipboard icon to copy the url onto your clipboard   Return to your browser tab with \u0026ldquo;My Interactive Sessions\u0026rdquo;. Hopefully, there\u0026rsquo;s now a Connect to Jupyter Notebook Server button. Click it Go to the newly opened tab, you\u0026rsquo;ll have a Jupyter Notebook Server. Find New button and choose Terminal In the new terminal tab, clone your github repo by running  git clone REPO_URL # where REPO_URL is what you\u0026#39;ll paste from the clipboard  Change into the directory that was created for the repository (we\u0026rsquo;ll call REPO_DIR) and setup all the packge dependancies required (as specified by the Project.toml or test/Project.toml file).  cd REPO_DIR julia -e \u0026#39;using Pkg; Pkg.activate(\u0026#34;.\u0026#34;); Pkg.instantiate(); \u0026#39;  Optional (can do later if needed): In case the instructor makes changes to the template, it would be useful to be able to merge in those changes easily. To prepare for that, let\u0026rsquo;s set a remote upstream repository. Here I assume that your REPO_URL was https://github.com/GITHUBID/example-GITHUBID.git. Notice that we\u0026rsquo;re replacing the first GITHUB id by the organization name \u0026ldquo;PsuAstro528\u0026rdquo; and remove the \u0026ldquo;-GITHUBID\u0026rdquo; at the end.  git remote add upstream git@github.com:PsuAstro528/example.git  Go back to the browser tab with your Jupyter notebook server running. Click the directory name of the repository that you just installed. Open a Jupyter notebook (file ending in .ipynb) in that repo, or use the New button to create a new one. Do your work in the Jupyter notebook. When you\u0026rsquo;re done with a notebook, save it and close the tab.   Test your code  Make sure you\u0026rsquo;ve committed all your changes (including adding any new files) Check that your code passes the tests for each exercise as you go in a separate test notebook like test_myself.ipynb:  using NBInclude @nbinclude(\u0026#34;exercise1.ipynb\u0026#34;) include(\u0026#34;test/test1.jl\u0026#34;)  If you make changes and retest, then restart the kernel for the test notebook to be sure there aren\u0026rsquo;t unintended carryover effects You can test your full repository even more similarly to how it will be tested by the continuous integration testing by opening a terminal window and running julia test/runtests.jl   Convert your Jupyter notebook to Markdown  You\u0026rsquo;ll skip this step for any assignments that are Pluto notebooks, since Pluto notebooks are already valid Julia code. Return to the terminal tab # (or open a new one) Run the following commands  cd YOUR_REPO_DIRECTORY # You\u0026#39;ll need to replace YOUR_REPO_DIRECTORY and NOTEBOOK_NAME julia -e \u0026#39;using Weave; convert_doc(\u0026#34;NOTEBOOK_NAME.ipynb\u0026#34;,\u0026#34;NOTEBOOK_NAME.jmd\u0026#34;)\u0026#39; --- \u0026lt;a id=\u0026#34;commit-push\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; ### Commit your changes and push to Github - Return to the terminal tab (in YOUR_REPO_DIRECTORY) - Run the following commands ```shell git add NOTEBOOK_NAME.jmd # Only need to do this once per new file if you use the -a option with \u0026#34;git commit\u0026#34; below. Otherwise, need to do each time you want to deposit a new version of the file into your respository. git commit -a -m \u0026#34;note about what you\u0026#39;ve done\u0026#34; # Commit all changes you\u0026#39;ve made git push # Uploads your progress to github  If this repository is configured to apply tests via continuous integration, then check back on whether your changes pass the tests.   When you\u0026rsquo;re all done, close browser tabs and remember to go back to the \u0026ldquo;My Interactive Sessions\u0026rdquo; tab in the ACI Portal, click \u0026ldquo;Delete\u0026rdquo; for this Sessions and confirm.   Submit your work via Github pull request  Make sure you\u0026rsquo;ve committed all your changes Check that your code passes all the tests (or as many as practical in reasonable ammount of your time) Navigate to your github repository for the assignment Click New Pull Request button (second button from left, below the orange bar) Set the left button to \u0026ldquo;base:original\u0026rdquo;. Leave the right button \u0026ldquo;compare:master\u0026rdquo;. Review the updates to the page and make sure this is the version you intend to submit. Enter a name for the pull request in the text box to the right of your avitar/icon. Optionally, write a longer messages in the larger box below Click Create Pull Request   Review the feedback on your submission (your pull request)  Browse to your github repository. Click Pull Requests, click the name of your pull request. In the conversations tab (default), you and the instructor can discuss the pull request using the text box at the bottom of the page. In the \u0026ldquo;Files changed\u0026rdquo; tab, the instructor can provide comments on specific lines of your submission. You can view the comments, reply, close the pull request, make more changes, create a new pull request, etc.  "},{"uri":"https://psuastro528.github.io/resources/","title":"Resources","tags":[],"description":"","content":"  Online Textbooks \u0026amp; Tutorials     Software     Hardware Resources     Additional Resources     Improve this page You can add your suggestions by submitting a pull request for editing this file\u0026rsquo;s source. Thanks!\n"},{"uri":"https://psuastro528.github.io/resources/textbooks/","title":"Online Textbooks &amp; Tutorials","tags":[],"description":"","content":"Julia  Think Julia: How to Think Like a Computer Scientist  Related Courses  Applications of Parallel Computers (UC Berkeley CS 267)  Lawrence Livermore National Laboratory  Introduction to Parallel Computing by Blaise Barney OpenMP Message Passing Interface (MPI) OpenACC slides from NVIDIA  Texas Advanced Computing Center  Introduction to High-Performance Computing by Eijkhout, Chow \u0026amp; van de Geijn (2006) Parallel Programming in MPI and OpenMP by Eijkhout (2017) \u0026mdash; pdf version \u0026mdash; source  Improve this page You can add your suggestions by submitting a pull request for editing this file\u0026rsquo;s source. Thanks!\n"},{"uri":"https://psuastro528.github.io/resources/software/","title":"Software","tags":[],"description":"","content":"Julia  Julia Manual Think Julia: How to Think Like a Computer Scientist Introcution to Applied Linear Algebra: Vectors, Matrices and Least Squares: Julia Language Companion The Fast Track to Julia 1.0 Learn Julia in Y Minutes Why Julia? Julia Tutorials Julia Blog Julia Discourse Forum Julia on StackOverflow Julia on Reddit Julia Twitter feed Julia Slack channel  Jupyter  DataQuest Tutorial on Jupyter Setting up Jupyter for Julia Jupyter with multiple languages Diffing Jupyter notebooks Binder for sharing Jupyter notebooks  Git  GitHub Guides Git for Everyone Data Camp on Git Git Desktop  Linux Command Line  Data Camp on Shell  Docker  Docker Orientation Docker for homework exercises: Github Repo Cloud.Docker.com Repo Jupyter Docker Stacks: More ready-to-run Docker images containing Jupyter applications User guide Setting up Docker on Linux How to remove Docker containers, images, volumes, networks )  Docker containers:  Data Science Notebook Old custom container for Spring 2019  Licensing  Choose an open source license  Improve this page You can add your suggestions by submitting a pull request for editing this file\u0026rsquo;s source. Thanks!\n"},{"uri":"https://psuastro528.github.io/resources/hardware/","title":"Hardware Resources","tags":[],"description":"","content":"Penn State Resources Roar: Institue for Computational \u0026amp; Data Sciences\u0026rsquo;s Advanced CyberInfrastructure (ICDS-ACI)  Getting Started on ICS-ACI Roar User\u0026rsquo;s Guide Roar Training Series Roar On-demand Tutorial Videos Open On Demand Portal (written for OSU, but much of info is similar)  Cloud Computing  Penn State Cloud Program  Cloud Computing  Amazon EC2 Google Compute Engine Google Colaboratory GPU acceleration for Julia using Google Colaboratory Domino Data Labs  Improve this page You can add your suggestions by submitting a pull request for editing this file\u0026rsquo;s source. Thanks!\n"},{"uri":"https://psuastro528.github.io/resources/other/","title":"Additional Resources","tags":[],"description":"","content":"Academic Success, Learning Assistance, \u0026amp; Student Resources The Eberly College of Science is committed to the academic success of students enrolled in the College\u0026rsquo;s courses and undergraduate programs. When in need of help, students can utilize various College and University wide resources for learning assistance. For more information see: http://www.science.psu.edu/advising/success/.\n"},{"uri":"https://psuastro528.github.io/lessons/week1/","title":"Week 1: Development Tools","tags":[],"description":"","content":"Lessons / Resources  Learning goals   Readings   Course Overview (slides)   Exercises   Discussion Topics Week 1   Instructions for using ACI  Getting Started with Julia on ACI Starting \u0026amp; Submitting Assignments  "},{"uri":"https://psuastro528.github.io/lessons/week1/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 1  Understand course goals, overview, organization Recognize opportunities to improve producitivty through software development practices Exercise 1: Use software development tools  Access ICDS-ACI Portal\u0026rsquo;s Jupyter Notebook Server using Julia Kernel Optionally access Julia+Git on your own computer Use Git \u0026amp; GitHub.com for retreiving and submitting lab assignments   Exercise 2: Floating Point Arithmetic, Functions, Tests  Write code as a function Use/write tests of code Become vigilant about potential pitfalls with floating-point arithmetic   Exercise 3: Develop personal goals for semester  Lessons along the way  Strings, Modules, Namespace, Types, include Packages, Functions, Docstrings, Pseudo-random numbers, Broadcasting, Single \u0026amp; double precssion, Type stability, Online algorithms Write markdown text  "},{"uri":"https://psuastro528.github.io/lessons/week1/read/","title":"Readings","tags":[],"description":"","content":"Week 1:  Prior to Monday\u0026rsquo;s class  Think Julia Ch 1: The Way of the Program Github tutorial (at least through “Fork a Repo”)   Prior to Thursday\u0026rsquo;s class  The Rationale for Julia: Getting Started with Julia Programming (6pgs avaliable via \u0026ldquo;First Pages\u0026rdquo; as Preview/\u0026ldquo;Look Inside!\u0026quot;) Writing Scientific Software Ch 2 (22pgs): Scientific Computation and numerical analysis Start Lab 1 If it will help you with the lab: Think Julia Ch 2: Variables, Expressions \u0026amp; Statements    "},{"uri":"https://psuastro528.github.io/lessons/week1/course_overview/","title":"Course Overview (slides)","tags":[],"description":"","content":" ## Welcome Penn State Astro 528 High-Performance Scientific Computing for Astrophysics Eric Ford --- ## Safety \u0026 Respect --- ## Course goals Enhance your skills for scientific computing - Increase your productivity + Choose right tool for right task + Reduce time debugging + Improve reproducibility + Increase impact of your software - Enable you to + Analyze \"Big Data\" + Increase resolution of simulations + Include more complex physics --- ### Course outline - Software Development Practices - Writing efficient serial code - Parallelizing code efficiently ___ ### Software Development Practices Note: Ask what students think of when they hear \"software development practices\". ___ ### Software Development Practices - Version control - Testing \u0026 Continuous Integration - Debugging - Documenting \u0026 Literate Programming - Coding standards - Reviewing code - Reproducibility - Workflow ___ ### Writing efficient serial code - Processor architectures - Memeory heirarchy - Networking - Programming languages - Choosing algorithms - Benchmarking - Profiling - Compilzer optimizations - Optimizing ___ ### Parallelizing code efficiently - Shared-memory (e.g., one workstation) - Distributed-memory (e.g., cluster) - Accelerators + GPUs + TPUs (volunteers?) - Cloud Note: Ask if any students already using parallel codes. If so, how were they parallelized? --- ### Specific Objectives - Increase technical knowledge + Readings, online lessons \u0026 class discussion - Practice fundamentals on a small scalle + Lab/homework exercises + Make lots of mistakes quickly \u0026 learn from them + Make good habits routine - Transfer skills into real work environment + Class project + Apply new skills to your research + Build deeper expertise in topics most relevant to you + Share what you learn with the class ___ ### Readings, presentation ![textbooks](/images/textbooks.jpg) ___ ### Readings, presentation - Textbooks + _Writing Scientific Software: A Guide to Good Style_ + _ThinkJulia: How to Think like a Computer Scientist_ + _Introduction to High Performance Computing for Scientists and Engineers_ (definitely optional) - Online PDFs - Online tutorials - Recordings? Note: Ask students if they would like to record classes. Ask students if they like the idea of a pre-recorded lesson prior to class. ___ ### Class discussions - Let's learn from each other - Introductions + Name + Department (if not Astro) + What skill you hope to strengthen through this course --- ## Let's get you set up ### Accounts - Penn State - [ICDS-ACI](https://ics.psu.edu/computing-services/account-setup/) - [Github](https://github.com)  ___ ### Get Started For your first lab session, you'll: - Follow link for lab 1 from Canvas announcement - View _your_ new repository on [Github](https://github.com) - Login to where you'll run your Jupyter notebooks (with Julia kernel) + [ICDS-ACI Portal](http://portal.aci.ics.psu.edu/) + [Install locally](https://julialang.org/downloads) (not for today) - _Clone_ your \"repo\" for the lab - Start working through ex1.ipynb, then ex2.ipynb There are [more detailed instructions](../resources) on the website. ___ ### Commiting Changes - Need to UPDATE for Fall - _Commit_ your changes to local \"repo\" - Can commit Pluto notebooks directly as .jl files. - For Jupyter notebooks, first make a markdown version for human-readable version control + Use Weave's convert_doc to conver Jupyter notebook (ex1.ipynb) into Julia Markdown (ex1.jmd) + Add \u0026 commit both ex?.ipynb and ex?.jmd files to your local repo - Before signing off for the session, \"push\" your commits to GitHub - When done with lab, create a _pull request_ to merge your work into the _branch_ named \"original\". - See [more detailed instructions](lessons/week1/how-to-use-aci/#commit-push) \u0026 ask questions as you go ___  # Questions? [Jump to start](#/0/0\")       function initSlides() { Reveal.initialize({ embedded : true, controls : \"true\", center: \"false\" ,\thistory: \"false\" , progress: \"true\" , transition: \"slide\", dependencies: [ { src: '\\/revealjs\\/lib\\/js\\/classList.js\"', condition: function() { return !document.body.classList; } }, { src: '\\/revealjs\\/plugin\\/markdown\\/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '\\/revealjs\\/plugin\\/markdown\\/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '\\/revealjs\\/plugin\\/highlight\\/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '\\/revealjs\\/plugin\\/zoom-js\\/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '\\/revealjs\\/plugin\\/notes\\/notes.js', async: true, condition: function() { return !!document.body.classList; } } ] }); }   See it fullscreen var toto = document.getElementById('slideContent').innerHTML document.getElementById('slideFrame').contentWindow.document.write(document.getElementById('slideContent').innerHTML); document.getElementById('slideContent').remove(); document.addEventListener(\"DOMContentLoaded\",function(){ setTimeout(function () { document.getElementById('slideFrame').contentWindow.initSlides() ; }, 2000); }); function slideFullScreen() { document.open(); document.write(toto); document.close(); initSlides() }  "},{"uri":"https://psuastro528.github.io/lessons/week1/lab/","title":"Exercises","tags":[],"description":"","content":"Tools, Floating Point Arithmetic, Functions, Tests (Due Aug 29)\n Exercise 1: Core development tools  ICDS-ACI portal git GitHub.com Julia Jupyter Notebooks Pluto Notebooks   Exercise 2: Floating Point Arithmetic, Functions, Tests Exercise 3: Personal Goals (save at least 15 minutes for this one)  If you\u0026rsquo;re waiting on getting your account on ICDS-ACI, then I\u0026rsquo;d suggest that you start with exercise 3, since thinking about your goals does not require any accounts or special software.\nIf you\u0026rsquo;re still waiting on getting your account on ICDS-ACI, then you could using a local installation of Julia. If that gives you trouble, then you could use mybinder.org to start tinkering on the assignments.\nHowever, you will not be able to save your work directly to a github repository when using mybinder.org. Instead, you could use File.Download As.Notebook to download your notebook before exiting your session. Then you could copy it into your github repository. While this is workable for the first few labs, you\u0026rsquo;ll need to get ACI working for later assignments where performance is actually important part of the assignment.\nLessons / Resources  Getting Started with Julia on ACI Julia Manual Think Julia: How to Think Like a Computer Scientist Learn Julia in Y Minutes    "},{"uri":"https://psuastro528.github.io/lessons/week1/discuss/","title":"Discussion Topics Week 1","tags":[],"description":"","content":" # Discussion Topics Astro 528, Week 1 High-Performance Scientific Computing for Astrophysics --- ## What makes scientific software special? Note: Floating-point arithmetic, Numerically intensive, Large data sets, Sophisticated tool sets, Rapidly changing specifications. All also show up in other applications. ___ ## Comparing to Computer Software Industry - How is scientific sofware development different? - ...similar? --- ## Floating Point Arithmetic - When should we be paranoid? - What can we do about it? ___ ## Floating Point Arithmetic - Would using extended precision number help? + DoubleFloats.jl: Double16, Double32, Double64 - When would it not help? --- ## Your Questions How (often) to submit reading questions? ___ ## Languages - Why other langues slower? - What is Julia _not_ good for? --- # Questions about Lab ___ ## One-pass versus a two-pass algorithm? - What does `var(x)` do? ___ ## Do I need to declare a variable's type? Languages: - Static (e.g., C/C++, Fortran) - Dynamic (e.g., perl, Python) - Optional (Julia) ___ ## Julia's Type Heirarchy - Float32       function initSlides() { Reveal.initialize({ embedded : true, controls : \"true\", center: \"false\" ,\thistory: \"false\" , progress: \"true\" , transition: \"slide\", dependencies: [ { src: '\\/revealjs\\/lib\\/js\\/classList.js\"', condition: function() { return !document.body.classList; } }, { src: '\\/revealjs\\/plugin\\/markdown\\/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '\\/revealjs\\/plugin\\/markdown\\/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '\\/revealjs\\/plugin\\/highlight\\/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '\\/revealjs\\/plugin\\/zoom-js\\/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '\\/revealjs\\/plugin\\/notes\\/notes.js', async: true, condition: function() { return !!document.body.classList; } } ] }); }   See it fullscreen var toto = document.getElementById('slideContent').innerHTML document.getElementById('slideFrame').contentWindow.document.write(document.getElementById('slideContent').innerHTML); document.getElementById('slideContent').remove(); document.addEventListener(\"DOMContentLoaded\",function(){ setTimeout(function () { document.getElementById('slideFrame').contentWindow.initSlides() ; }, 2000); }); function slideFullScreen() { document.open(); document.write(toto); document.close(); initSlides() }  "},{"uri":"https://psuastro528.github.io/lessons/week2/","title":"Week 2: Priorities","tags":[],"description":"","content":"Lessons / Resources  Learning goals     Readings     Exercises     "},{"uri":"https://psuastro528.github.io/lessons/week2/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 2  Priorities for Scientific Computing Exercise 1: Benchmarking  Benchmark functions accurately Predict cost of an algorithm based on Big-O analysis Identify real world complications that affect scaling   Exercise 2: Numerical Stability of N-body Integration  Integrate differential equations Compare the accuracy and numerical stability of results as a function of time step, order and integration Appreciate importance of numerical stability   Exercise 3: Model for Radial Velocity of a Star  Practice documenting your functions effectively Write effective tests for floating point calculations Reduce bugs via composite types and named function parameters Reduce bugs via assertions Identify bugs promptly via unit testing Identify bugs promptly via continuous integration testing End-to-end Testing to validate code    Lessons along the way  Just-in-Time (JIT) Compilation Types of languages  Compiled vs Interpretted vs JIT Static/dynamic type-checking   Plotting with Plots.jl Keyword/Named function arguements view(array, inds\u0026hellip;) Integration Algorithms  leapfrog symplectic    "},{"uri":"https://psuastro528.github.io/lessons/week2/read/","title":"Readings","tags":[],"description":"","content":"Week 2:  Prior to Monday\u0026rsquo;s class  Writing Scientific Software Ch 3: Priorities (6pg) Writing Scientific Software Ch 4: Famous Disasters (4pg) Best Practices for Scientiﬁc Computing: Sec. 1-4 (6pg)   Prior to Thursday\u0026rsquo;s class  Best Practices for Scientiﬁc Computing: Sec. 5-9 (5pg) Start Lab 2    "},{"uri":"https://psuastro528.github.io/lessons/week2/lab/","title":"Exercises","tags":[],"description":"","content":"Assertions, Unit Testing, Countinuous Integrations, Benchmarking (due Sept 5)  Exercise 1: Benchmarking, Big-O Analysis, Compute vs Memory Limits Exercise 2: Numerical Stability of N-body Integration Exercise 3: Unit Testing for Floating Point Arithmetic, Defensive Programming, Assertions, Continuous Integration, End-to-end testing, Validation  Lessons / Resources  Getting Started with Julia on ACI Starting \u0026amp; Submitting Assignments Julia Manual Think Julia: How to Think Like a Computer Scientist Learn Julia in Y Minutes Documentation for DifferentialEquations.jl  "},{"uri":"https://psuastro528.github.io/lessons/week3/","title":"Week 3: Software Design","tags":[],"description":"","content":"Lessons / Resources  Learning goals     Readings     Exercises     "},{"uri":"https://psuastro528.github.io/lessons/week3/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 3  Exercise 1  Recognize pros/cons of different file formats   Exercise 2  Recognize importance of choosing an efficient algorithm Use DataFrames efficiently via join and queries   Exercise 3  Recognize significance of memory layout \u0026amp; data structures   Class Project  Apply \u0026ldquo;Programming in the Large\u0026rdquo; to your class project Choose appropriate file format for a project Choose appropraite memory layout \u0026amp; data structures for a project    Lessons along the way  Big-O notation Calling Python from Julia File formats: CSV, FITS, HDF5, JLD2, Feather  "},{"uri":"https://psuastro528.github.io/lessons/week3/read/","title":"Readings","tags":[],"description":"","content":"Week 3:  Prior to Monday\u0026rsquo;s class  Writing Scientific Software Ch 7: Software Design (26pg, ok to skip 7.11-12) Best Practices for Code Review   Prior to Thursday\u0026rsquo;s class  A beginner\u0026rsquo;s guide to Big-O notation Big-O Cheat Sheet Start Lab 3    "},{"uri":"https://psuastro528.github.io/lessons/week3/lab/","title":"Exercises","tags":[],"description":"","content":"Memory Access, Disk I/O, DataFrames (due Sept 12)\n Exercise 1: Benchmarking File I/O \u0026amp; Calling Python Packages Exercise 2: DataFrames, Join, Query Exercise 3: Dense Matrix-Vector Multiply   Lessons / Resources  Getting Started with Julia on ACI Starting \u0026amp; Submitting Assignments Julia Manual Think Julia: How to Think Like a Computer Scientist Learn Julia in Y Minutes Regular expressions in julia Astropy File Formats  FITSIO library written in C HDF5 Feather format   Julia packages for reading files  PyCall.jl documentation. Julia\u0026rsquo;s JLD2.jl package Julia\u0026rsquo;s HDF5.jl package Julia\u0026rsquo;s FITSIO.jl package Feather.jl FileIO.jl   Querying DataFrames.  Query.jl DataFramesMeta.jl)    "},{"uri":"https://psuastro528.github.io/lessons/week4/","title":"Week 4: Computer Architectures","tags":[],"description":"","content":"Lessons / Resources  Learning goals     Readings     Project Proposal due     Exercises     "},{"uri":"https://psuastro528.github.io/lessons/week4/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 4  Describe steps a CPU performs surrounding actual arithmetic Anticipate when performance will be affected by cache size Project  Plan data structures to optimize for memory access Profile code to identify code worth optimizing Document code to increase chances of useful feedback from peer code review    Lessons along the way  Bus Registers FPUs Prefetch Pipelining Out of order execution Cache: levels, lines, latency, associative Code introspection Type stability: @code_warntype Strict typing, sub-types, union types Performance impact of global's  "},{"uri":"https://psuastro528.github.io/lessons/week4/read/","title":"Readings","tags":[],"description":"","content":"Week 4  Prior to Monday\u0026rsquo;s class  Writing Scientific Software Ch 6: Computer Organization (12pg) Either  Introduction to High Performance Computing for Scientists and Engineers Ch 1: Modern Processors (32pg) -or- Introduction to High-Performance Computing Ch 1-1.3.4.1: Single-processor Computing (13pg)     Prior to Thursday\u0026rsquo;s class  Writing Scientific Software Ch 17.3: Profiling (2pg) Why does Julia work so well? Submit Project Proposal    "},{"uri":"https://psuastro528.github.io/lessons/week4/project/","title":"Project Proposal due","tags":[],"description":"","content":"Use the link provided via course announcement or Canvas to create your repository for the project proposal.\nGrading Rubric  Statement of the project goal (0 points, but required so the rest makes sense) Description of the inputs (1 point) Description of the outputs (1 point) Detailed plan for how the code will be tested (1 point) Discussion of the relevant range of problem sizes (1 point) Complete list of what computer architectures, programming languages, and libraries you will use, as well as an justification of your choices (1 point)  "},{"uri":"https://psuastro528.github.io/lessons/week5/","title":"Week 5: Optimization","tags":[],"description":"","content":"Lessons / Resources  Learning goals     Readings     Exercises     "},{"uri":"https://psuastro528.github.io/lessons/week5/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 5  Exercises  Fit a model to data Identify type instability Write type stable functions Profile code Identify inefficiencies Optimize code for serial execution    Lessons along the way  Optimization Algorithms  Linear optimization: matrix solve Non-linear optimization: Levenberg-Marquardt, Conjugate Gradient Descent, BFGS   Use of gradients  Jacobian Autodifferentiation   @code_warntype \u0026amp; Traceur ProfileView  "},{"uri":"https://psuastro528.github.io/lessons/week5/read/","title":"Readings","tags":[],"description":"","content":"Week 5   Prior to Tuesday\u0026rsquo;s class\n Introduction to High Performance Computing for Scientists and Engineers Ch 2: Serial Optimization (26pg)    Prior to Thursday\u0026rsquo;s class\n Start Lab 4    Additional resources\n Julia Performance Tips    "},{"uri":"https://psuastro528.github.io/lessons/week5/lab/","title":"Exercises","tags":[],"description":"","content":"Profiling, Optimization "},{"uri":"https://psuastro528.github.io/lessons/week6/","title":"Week 6: Memory Systems","tags":[],"description":"","content":"Lessons / Resources  Learning goals     "},{"uri":"https://psuastro528.github.io/lessons/week6/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 6  Describe what an optimizing compiler can optimize for you Describe what an optimizing compiler can\u0026rsquo;t optimize for you Understand how linear algebra libraries acheive peak performance through memory access pattern Describe interaction between global variables and type stability of functions Explain why parallelism in increasingly important Describe function overloading \u0026amp; multiple dispatch Describe benefits of use abstract types and containers of abstract types Describe benefits of an Application Programming Interface  Lessons along the way "},{"uri":"https://psuastro528.github.io/lessons/week7/","title":"Week 7: Parallel Computing","tags":[],"description":"","content":"Lessons / Resources  Learning goals     Serial Code for Project due     "},{"uri":"https://psuastro528.github.io/lessons/week7/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 7  Lab 5, Exercise 1  Read \u0026amp; write models using a probabilistic programming language Estimate uncertainties in model parameters using Markov chain Monte Carlo   Project  Preparing for a code review Use GitHub Issues to report issues   Readings / Discussions  Evaluating the suitability of a problem for different parallel architectures    Lessons along the way  Statistical inference  Posterior Sampling Heirarchical models Markov chain Monte Carlo    "},{"uri":"https://psuastro528.github.io/lessons/week7/project/","title":"Serial Code for Project due","tags":[],"description":"","content":"At this point the code does not need to be optimized. If you have time, it would be best to include the results of benchmarking and/or profiling in the README, to help both you and the reviewer identify which sections are ammenable to optimization.\nGrading Rubric  Code performs proposed tasks (1 point) Comprehensive set of unit tests, at least one integration or regression test (1 point) Code passes tests (1 point) Student code uses a version control system effectively (1 point) Repository includes many regular, small commits (1 point) Documentation for functions\u0026rsquo; purpose and design (1 point) Comprehensive set of assertions (1 point) Variable/function names consistent, distinctive \u0026amp; meaningful (1 point) Useful \u0026amp; consistent code formatting \u0026amp; style (1 point) Code is modular, rather than having chunks of same code copied and pasted (1 point)  Preparing Your Own Code for Review Provide overview to help reviewer Please provide your reviewers with a README or other instructions to help them figure out how to spend their time reviewing your code in a way that is most likely to be helpful to you.\nMake sure code is in plain text files (i.e., not only Jupyter notebooks) Jupyter and Pluto notebooks are great to document how to use your code. As functions mature, it\u0026rsquo;s nature to move well tested functions into \u0026lsquo;.jl\u0026rsquo; files. If your code is in the form of julia code (.jl files) or markdown (.jmd) or a Pluto notebook (also a .jl file), then reviewer can already comment on your code directly in GitHub. If you\u0026rsquo;ve been developing code inside a Jupyter notebook (.ipynb file), then remember to create (and commit and push) a .jl or .jmd version for your reviewers to comment on, just as you\u0026rsquo;ve been doing for homework assignments.\njulia -e \u0026#39;using Weave; convert_doc(\u0026#34;NOTEBOOK_NAME.ipynb\u0026#34;,\u0026#34;NOTEBOOK_NAME.jmd\u0026#34;)\u0026#39; Organize your files. If you only have a few functions, then (for now) it\u0026rsquo;s reasonable to have just one file for your main code and one file for tests. If you already have a larger code base, then organize your functions into multiple files .jl and place them in a src directory. Similiarly, use test, and optionally examples and docs directories to make it clear where user/reviewers can find tests, examples and additional documentation.\nGive your reviewer permission to access your repository. Go to your repository\u0026rsquo;s GitHub page and click \u0026ldquo;Settings\u0026rdquo; and \u0026ldquo;Collaborators \u0026amp; teams\u0026rdquo;. Under \u0026ldquo;Collaborators\u0026rdquo; (near the bottom), there\u0026rsquo;s a box \u0026ldquo;Search by username, full name or email address\u0026rdquo;. Enter the github username of your peer reviewer(s). Then click \u0026ldquo;Add collaborator\u0026rdquo;. The easiest option is to leave the permission level as \u0026ldquo;Write\u0026rdquo;.1 That should trigger an email inviting them to join the repository2. If your project repo was created by following the link I gave, then I should already have access to your project repository. If you created your project repository some other way, then please send me an email with \u0026ldquo;Astro 528 project url\u0026rdquo; in the subject line and the repo url in the message body (as well as the github id of your partner if working in a team).\n  If you\u0026rsquo;d rather not give your peer reviewer write access to your repository, then you could create a new repository, copy your files into that repository, and given your peer reviewer write access to just that repository copy. You\u0026rsquo;d also need to invite your instructor to have access to your new repository. (Personally, I doubt it\u0026rsquo;s worth the extra effort.) \u0026#x21a9;\u0026#xfe0e;\n Some times automated emails from github can be overlooked. So if it might be nice if you also click \u0026ldquo;Copy invite link\u0026rdquo;, click the little clipboard icon, and send them an email saying \u0026ldquo;here\u0026rsquo;s the link to my repository for you to review\u0026rdquo;. \u0026#x21a9;\u0026#xfe0e;\n   "},{"uri":"https://psuastro528.github.io/lessons/week8/","title":"Week 8: Parallel Programming I","tags":[],"description":"","content":"Lessons / Resources  Learning goals     "},{"uri":"https://psuastro528.github.io/lessons/week8/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 8  Lab 5, Exercise 2  Choose an appropriate number of worker processors for your compute node Load code and packages on worker nodes Parallelize code using pmap Parallelize code using SharedArray\u0026rsquo;s Parallelize code using map and mapreduce on DistributedArray\u0026rsquo;s Parallelize code using @distributed for loop Parallelize code using Threads.@threads   Project  Provide constructive feedback in code review Use GitHub Issues to manage tasks for code base   Readings / Discussions  Evaluating the suitability of a problem for different parallel architectures    Lessons along the way  Reinforce programming patterns demonstrated in Lab 5, Exercise 2  Organize code into files and a module Using function-like objects Using broadcasting Using abstract types Using parametric types    "},{"uri":"https://psuastro528.github.io/lessons/week4/lab/","title":"Exercises","tags":[],"description":"","content":" Profiling, Optimization "},{"uri":"https://psuastro528.github.io/lessons/week9/","title":"Week 9: Parallel Programming II","tags":[],"description":"","content":"Lessons / Resources  Learning goals     "},{"uri":"https://psuastro528.github.io/lessons/week9/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 9  Lab 6, Exercise 1  Submit a batch job via PBS Read and write data from batch job Run multiple jobs using a job array   Lab 6, Exercise 2:  Reinforce programming using Distributed Arrays Explain differences in performance when using multiple processor cores on same node versus using multiple processor cores on different nodes   Project  Run project code as batch job on the ICS-ACI cluster   Readings / Discussions  Evaluating the suitability of a problem for different parallel architectures    Lessons along the way "},{"uri":"https://psuastro528.github.io/lessons/week10/","title":"Week 10: Accelerators &amp; GPUs","tags":[],"description":"","content":"Lessons / Resources  Learning goals     "},{"uri":"https://psuastro528.github.io/lessons/week10/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 10  Lab 7, Exercise 1  Run GPU code on ICS-ACI Accelerate linear algebra computations with GPU Recognize what problem sizes and likely to result in acceleration with a GPU for linear algebra   Lab 7, Exercise 2:  Perform custom scientific computations using high-level GPU interface Improve performance by reducing kernel launches via broadcasting and GPU kernel fusion Improve performance by reducing memory transfers via GPU reductions Recognize what types of problems and problem sizes are likely to result in acceleration with a GPU when using a high-level programming interface   Lab 7, Exercise 3:  Write a GPU kernel Improve performance through reduced memory usage Recognize when a custom kernel is likely improve GPU performance   Project  Gain experience parallelizing a real world code Identify changes need to acheive significant performance benefit via parallelization   Readings / Discussions  Describe how GPU differs from CPU Assess the prospects for a given algorithm to acheive a significant speed-up using a GPU    "},{"uri":"https://psuastro528.github.io/lessons/week11/","title":"Week 11: Packaging &amp; Reproducility","tags":[],"description":"","content":"Lessons / Resources  Learning goals     First Parallel Project Code due     "},{"uri":"https://psuastro528.github.io/lessons/week11/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 11  Readings / Discussions  Identify common challenges for providing reproducible software \u0026amp; workflow Describe how Julia\u0026rsquo;s package manager facilitate reproducible research Describe other common tools \u0026amp; strategies for facilitating reproducible research   Project  Parallelize real world code Acheive significant performance benefit via parallelization    Lessons along the way  Virtual machines Projects \u0026amp; environments Containers \u0026amp; images Docker \u0026amp; Singularity  "},{"uri":"https://psuastro528.github.io/lessons/week12/","title":"Week 12: Cloud Computing","tags":[],"description":"","content":"Lessons / Resources  Learning goals     "},{"uri":"https://psuastro528.github.io/lessons/week12/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 12  Lab 8, Exercise 1: Create a Julia Package  Package your project software so it can readily be used by others   Lab 8, Exercise 2: Reflect on your Goals for the Semester  Appreciate your growth as a software developer over the semester Identify any areas you wish to contiune to build skills and good habits beyond this semester   Project  Gain experience with second mechanism for parallelizing real world code Work towards acheiving a significant performance benefit via second parallelization   Readings / Discussions  Describe benefits and disadvanages of cloud computing Determine whether a project would be well suited for running in the cloud    "},{"uri":"https://psuastro528.github.io/lessons/week11/project/","title":"First Parallel Project Code due","tags":[],"description":"","content":"Submit First Parllel Code for Project  Choice of portion of code to parallelize (1 point) Choice of approach for parallelizing code (1 point) Code performs proposed tasks (2 point) Unit/regression tests comparing serial \u0026amp; parallel versions (1 point) Code passes tests (1 point) General code efficiency (1 point) Implementation/optimization of multi-core parallelization (2 points) Significant performance improvement (1 point)  "},{"uri":"https://psuastro528.github.io/lessons/weeks-end/","title":"Weeks 13-15: Project Presentations","tags":[],"description":"","content":"Lessons / Resources  Present Project to Class     Learning goals     "},{"uri":"https://psuastro528.github.io/lessons/week14/","title":"Week 14: Full Class Project due","tags":[],"description":"","content":"Lessons / Resources  Submit Completed Class Project     Due Dec 2 "},{"uri":"https://psuastro528.github.io/lessons/weeks-end/project/","title":"Present Project to Class","tags":[],"description":"","content":"Schedule of Student Presentations Grading Rubric for Project Presentation  Motivation/Introduction/Overview, so class can understand broader goals (1 point) Explanation of specific calculation being performed, so class can understand what follows (1 point) Documentation (README, API, etc.) provides clear instructions for others to use \u0026amp; test the software (1 point) Provide package, environment, container, or image, and clear instructions, so others can easily reproduce test results (1 point) Analysis/explanation of most time consuming part(s) of calculations (1 point) Analysis/explanation of how time required scales with problem size (1 point) Description of optimization and parallelziation approaches attempted (1 point) Analysis/explanation of performance comparison for different versions of code (1 point) Description/analysis/discussion of what lessons you learned from the class project (1 points) Overall clarity of presentation (1 points)  "},{"uri":"https://psuastro528.github.io/lessons/week14/project/","title":"Submit Completed Class Project","tags":[],"description":"","content":"Grading Rubric for second parallelization method  Choice of portion of code to parallelize (1 point) Choice of approach for parallelizing code (1 point) Code performs proposed tasks (2 point) Unit/regression tests comparing serial \u0026amp; parallel versions (1 point) Code passes tests (1 point) General code efficiency (1 point) Implementation/optimization of second type of parallelism (2 points) Significant performance improvement (1 point)  "},{"uri":"https://psuastro528.github.io/lessons/weeks-end/goals/","title":"Learning goals","tags":[],"description":"","content":"Weeks 13-15  Project  Characterize peformance of class project Characterize performance as a function of problem size Characterize performance as a function of number of processors (both strong and weak scaling) Predict how much performance could be improved with further optimization/parallelization Make code easy for others to reuse Make benchmarks easy to reproduce (for their own system)   Project Presentations  Explain reasons for observed performance Share lessons learned in course of class project    "},{"uri":"https://psuastro528.github.io/","title":"Penn State Astro 528: High-Performance Scientific Computing for Astrophysics (Fall 2021)","tags":[],"description":"","content":"High-Performance Scientific Computing for Astrophysics Astro 528 (Fall 2021) High-Performance Scientific Computing for Astrophysics will combine class discussion and programming exercises to train students in the use of modern computing hardware and programming strategies for application to astronomy and astrophysics research. Students will gain experience applying these practices during a class project (potentially in support of the student’s dissertation research).\n Syllabus Schedule Labs Class Project Additional Resources  "},{"uri":"https://psuastro528.github.io/_footer/","title":"","tags":[],"description":"","content":"© Eric Ford - 2021 creative commons cc-by\nPenn State \u0026mdash; Astronomy \u0026amp; Astrophysics \u0026mdash; Institute for Computational \u0026amp; Data Sciences\n"},{"uri":"https://psuastro528.github.io/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://psuastro528.github.io/tags/","title":"Tags","tags":[],"description":"","content":""}]
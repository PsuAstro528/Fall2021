[{"uri":"https://psuastro528.github.io/syllabus/basic_info/","title":"Basic Course Information","tags":[],"description":"","content":" Course: Astro 528: High-Performance Scientific Computing for Astrophysics (Fall 2021) Class Meetings: 3:30-4:30pm Mondays \u0026amp; 1:30-3:00pm Thursdays via Zoom (see meeting IDs inside Canvas) Davey Lab 538 is also reserved for students who choose to join the class from there (subject to government, university, college and departmental health and safety policies) Instructor: Eric Ford  Email: ebf11 at psu dot edu Phone: x3-5558   Graduate Teaching Assistant: Matthias He  Email: myh7 at psu dot edu   Office Hours: Fridays 12:15-1:15pm (or by appointment) via Zoom (see meeting ID inside Canvas) Website: https://psuastro528.github.io/  "},{"uri":"https://psuastro528.github.io/syllabus/topics/","title":"Course Topics","tags":[],"description":"","content":" Overview of Scientific Computing, High Performance Computing, Data Science \u0026amp; Big Data Priorities for Scientific Computing Types \u0026amp; Choices of Programming Languages Floating Point Arithmetic Best Practices for Scientific Programming  Version Control (e.g., git) Testing Continuous Integration Documentation \u0026amp; Literate Programing Debugging Benchmarking \u0026amp; Profiling Reproducible Results \u0026amp; Workflows Packages, Environments, Containers \u0026amp; Images Efficient Workflows   Optimizing Code Performance  Modern Processors, Memory \u0026amp; Networking Architectures Choice of Algorithms Choice of Data Structures Serial Codes Shared Memory Systems (i.e., muli-core within one node) Distrbiuted Memory Systems (e.g., across multiple nodes) Hardware Accelerators (e.g., GPUs, Intel Phi) Cloud Computing Strong \u0026amp; Weak Scaling   Experience  Practice good programming habits on series of exercises Apply best practices to a real science project    "},{"uri":"https://psuastro528.github.io/syllabus/readings/","title":"Readings","tags":[],"description":"","content":"Textbooks The required textbooks for this course are:\n Writing Scientific Software: A Guide to Good Style by Suely Oliveira, Cambridge University Press, 1st edition, September 18, 2006, ISBN-10: 0521858968. (I recommend considering a used version.) Think Julia: How to Think like a Computer Scientist by Ben Lauwens and Allen Downey, 1st edition, May 14, 2019. ISBN-10:1492045039 (I recommend using the version avaliable online for free.)  I will also suggest readings from an optional textbook:\n Statistics with Julia: Fundamentals for Data Science, Machine Learning and Artificial Intelligence. by Yoni Nazarathy and Hayden Klok, Springer Series in the Data Sciences, PDF of draft version. (I recommend using the version avaliable online for free.) Introduction to High Performance Computing for Scientists and Engineers by Georg Hager \u0026amp; Gerhard Wellein, CRC Press, 1st edition, July 2, 2010, ISBN-10: 143981192X Whenever readings from Introduction to High Performance Computing for Scientists and Engineers are suggested, there will be alternative online reading assignments for students who prefer not to purchase another textbook. Hopefully, different students reading from different sources will help stimulate interesting discussion about commonalities and differences across sources.  Additional Readings We will also make use of a variety of web resources, likely including:\n “Best Practices for Scientific Computing” (Wilson et al. 2012) “What Every Programmer Should Know about Floating-Point Arithmetic” (Goldberg 1991) “What Every Programmer Should Know about Memory” (Drepper 2007) Bayesian Statistics using Julia and Turing Introduction to Parallel Computing (Blaise Barney) Introduction to High-Performance Computing by Eijkhout, Chow \u0026amp; van de Geijn (2006) Parallel Programming in MPI and OpenMP by Eijkhout (2017) \u0026mdash; pdf version \u0026mdash; source The Why’s and How’s of Licensing Scientific Code Docker Orientation  Additional Julia Resources  Julia Manual Julia Language Discourse The Julia Language Slack  "},{"uri":"https://psuastro528.github.io/syllabus/assignments/","title":"Assessed Work","tags":[],"description":"","content":"The assessed work for this course consists of computer lab/homework assignments (40%), a class project (50%) and class discussion (10%; including either contributing to class discussion and/or submitting reading questions. There are no exams. The class project will have several components and will be described in more detail below.\nThe planned assignment due dates are in the schedule section of the syllabus. Any revision to the due dates will be announced at the time they are assigned.\nAssignments are due on the same day as a class session are due by 11am Eastern Time. If the University is closed on the due date of an assignment (due to bad weather or any other reason), then the assignment will be due by 11am before the next class session (that is not canceled).\nLab/Homework Exercises Early in the semester, homework assignments will be assigned once a week. Later in the semester, homework assignments will become shorter and/or less frequent, since you will be working on your class project. Students will begin each homework exercise by following a link that will create a clone of the starter git repository. Students are to read and think about the questions posted, and add/edit code as suggested in the exercise, making multiple small commits as they go. Homework exercises are to be submitted by a pull request from the student\u0026rsquo;s github repository.\nMost assignments will not have a unique solution, and comparing the accuracy and/or performance of different solutions will likely prove educational. Therefore, rather than providing “the solution”, we will typically discuss selected student solutions during class to help illustrate the advantages and disadvantages of different approaches.\nThe homework assignments are designed to be educational. The experience of working on the assignment is more valuable than having “the solution”. As this is a three credit class, it is expected that students will devote an average of 5 hours per week to the course outside of class. If we estimate an average of ~1 hour/week for reading, then that leaves ~4 hours per week to work on homework assignments or your class project outside of class. If a student completes a homework assignment with less than ~2 hours of effort, then I would encourage them to go beyond the minimum to complete the assignment and try to come up with an even more efficient solution to the problem or to devote extra time to their project. Conversely, if you have done the readings, participated in class and devoted 4 hours of focused effort outside of class to a homework assignment, then you should stop coding! At that point, write up a short description of what you\u0026rsquo;ve done, what\u0026rsquo;s working, what problems you\u0026rsquo;ve encountered and what you think you would try next. Don\u0026rsquo;t let one homework assignment take an unreasonable amount of your time. I will adjust the length and difficulty of the homework assignments based on what students turn in. Since some students will have more programming experience than others, I will try to make each homework assignment somewhat more than the average student can do in 4 hours, so that all students are challenged. If you are so interested that you choose to work longer on a homework assignment, then please create and tag a commit with where you were after 4 hours of focused effort, so that I have a realist idea of how much students are accomplishing in a reasonable amount of time.\nClass Project The class project (worth a total of 50% of final grade) includes the following key elements:\n a written proposal outlining your project (5%), implementing a solution to your problem that passes your tests and uses programming practices from class in time for the peer code review (10%), performing a helpful code review on a peer\u0026rsquo;s project (5%; see example code review checklist), optimizing performance for a multi-core shared-memory system (i.e., modern workstation; 10%), optimizing performance using either a distributed memory system (e.g., cluster), a many-core accelerator (e.g., GPU or Intel Phi), or on the cloud (e.g., Amazon Elastic Compute Cloud, Domino) (10%), and a ~15 minute presentation (including time for questions) to the class describing your project, comparing the performance of different versions of your code as a function of problem size, and describing lessons learned (10%).  Project Proposals Students are encouraged to propose a project that closely relates to their research interests. Student are strongly encouraged to discuss their ideas with the instructor far enough in advance of the deadline, that they can refine or change plans prior to the proposal due date. If you have no idea and would like the instructor to suggest a project, then let the instructor know by the end of the first week and suggestions can be offered.\nThe written proposal should include:\n the project goal, a description of the inputs (e.g., initial conditions or input datasets, astrophysical model parameters, implementation parameters), a description of the outputs, a detailed plan for how the code will be tested (from unit tests to verification), a discussion of the relevant range of problem sizes, what computer architectures, programming languages, and libraries you will use, as well as an justification of your choices.  More information about the expectations for class projects and grading rubrics are provided in the class project section of the website.\nReadings \u0026amp; Reading Questions Students will be expected to read assignments (or review a website, watch an online presentation, or listen to audio) before class on the days indicated, so they will be prepared to participate in class discussions and/or make progress writing code for the assignment. All students should submit an average of at least one question per week about the week\u0026rsquo;s readings via TopHat by 11am Eastern Time on the day of discussion-based classes (typically Mondays; as opposed to Thursdays which will typically be lab-based classes). There is a link to the course TopHat site inside the Canvas webpage. Submitting well before class starts is important, so the instructor will have time to read the questions and organize the day’s discussion based on actual student questions. You\u0026rsquo;re also encouraged to take a look at questions submitted by other students and give a \u0026ldquo;thumbs up\u0026rdquo; to indicate those questions that you\u0026rsquo;d also like to be addressed in class. In the event of technically difficulties, you can email your question to the instructor with \u0026ldquo;Astro 528 Reading Question\u0026rdquo; in the subject line.\nClass Participation In-class discussions and coding sessions will be an important part of the course, so students should aim to participate regularly. Students who are reluctant to ask questions in class are especially encouraged to ask extra questions prior to class, as described above. If you know you need to miss class due to research travel or health issues, then let the instructor know in advance whenever practical. It may be possible to watch recordings of missed classes. If that is not practical for some reason, make plans to get a classmate\u0026rsquo;s notes for any missed class sessions.\nExam Policy There will be no exams.\nTimeliness of assignments Students should start all assignments well before the due date, so they can resolve any technical difficulties well in advance of the deadline. When assignments are discussed in class on the day they are due, then credit will be given based on what is submitted prior to class. In cases where turning in assignments on time is not practical due to illness, family emergency, or other university-approved excuse, assignments should still be completed and turned in, but those assignments may not be included when computing the course grade. If portions of the class project totalling more than 10% of course grade can not be completed before the course end date due to illness, family emergency, etc., then the student can elect to receive a “deferred grade” (DF) and to submit the remaining portions of the project no later than eight weeks after the course end date. Students electing this option should be familiar with the PSU DF policies.\n"},{"uri":"https://psuastro528.github.io/syllabus/requirements/","title":"Requirements","tags":[],"description":"","content":"Course Prerequisites This course is designed for Astronomy \u0026amp; Astrophysics graduate students. While Astro 501 is listed as a corerequsite by the registrar, that is primarily a formality, so that non-Astrophysics students will contact me to discuss their background before registering. Previously, we have had some graduate students from physics and engineering who did very well in the course. Of course, some extra thought may be required to figure out how concepts from the course presented in the context of astronomy or astrophysics could be applied to their own field of study.\nEntering Astronomy \u0026amp; Astrophysics graduate students span a wide range in terms of level of experience with programming. The goal is for all students to improve their understanding of computing, software development skills and programming patterns, regardless of whether they enter as a novice or experienced programmer. Students entering with significant computing skills should aim to achieve more than students entering with minimal experience. Astronomy graduate students who are not already familiar with using the Unix/Linux/OS X command line interface and/or with no programming experience are encouraged to take the course, but should be prepared to put in some extra effort early in the semester. If you let me know about your background, I can suggest some resources to help you get started and/or schedule a time to meet with you to answer questions.\nComputing Requirements Hardware We anticipate that students will have access to a laptop computer or workstation with good internet to work on exercises both during and outside of classes (pairing up is encouraged even if you both have laptops). As long as students have a good internet connection, then their local computer can be used for accessing cloud resources and need not be high-powered. If anyone is likely to work form a location with poor internet speed/reliability, then they are encouraged install and run software locally, particularlly for the early part of the class. While students will still need to submit jobs to the ICDS Roar supercomputer during the second half of the class, much of the software development can be done locally before connecting to Roar to submit jbos and retrieve results.\nBasic Software Students will need regular access to the following software:\n Browser: Many cloud resources such as those we will be using regularly (e.g., ACI OpenOnDemand Portal/, GitHub, etc.) require a modern browser. Based on documentation that I\u0026rsquo;ve found for the most demanding sites, I beleive that that Chrome (22+), Firefox (16+), and Internet Explorer (11+) should work, however it\u0026rsquo;s not practical for the instructor to test each possible browser, OS, etc. I plan to test the in class and homework exercises using Chrome. If you find a problem that arises or is fixed by changing browsers, please let the instructor and class know, so others can benefit from your experience.  Many of the early assignments could be executed either on the student\u0026rsquo;s local computer, Penn State\u0026rsquo;s Roar supercomputer, also known as Advanced CyberInfrastructure (ACI) operated by the Institute for Computational \u0026amp; Data Sciences. However, once we get to parallelizing code, students will need to use the HPC resources provided by ACI anyway. Therefore, all students should setup an account for use ACI during the later parts of the course, regardless of whether they install local software.\nOptional Software For students who find it convenient to install additional software on their local computer, they would likely to want to setup:\n Julia with the IJulia and Pluto packages for accessing Jupyter and Pluto notebooks. An integrated development environment that supports Julia, such as:  VS Code and the Julia for VSCode extension (recommended) Atom text editor and the Juno extension (no longer supported)   Jupyter (Typically, Jupyter will be setup automatically by adding the IJulia package within Julia.) ssh: While most operations can be performed without ssh, it may prove handy to have an ssh client on your laptop. In particular, setting up ssh keys for github can make it easier to connect to a laptop/desktop workstation to your github repository without needing to retype passwords as often.  Some students may prefer to setup their system using a Docker container that includes Julia, Python, R and Jupter notbook. (If anyone tweaks this to prepare a custom dockerfile for the class, please share it with the rest of the class.) To use Docker containers, students will need to install:\n Docker CE VirtualBox (if using Windows 7 or Windows 10 Home)  Accounts  All students should request an ACI account (via theICDS website before the second class meeting. Students should create an account on GitHub. Note that we will examine and discuss student\u0026rsquo;s code both during class and via peer code review. Students may choose to protect their privacy by choosing a github account id that does not identify them. Students may wish to create a separate github account just for this class, so as to avoid being identified by other projects. Prior to the second class meeting, students should send the instructor their PSU and GitHub userids. Students should make use of Top Hat for submitting reading questions. Top Hat Activation Instructions are avaliable.  "},{"uri":"https://psuastro528.github.io/syllabus/expectations/","title":"Expectations","tags":[],"description":"","content":"Safety Students are required to follow all Penn State requirements related to safety, particularly in relation to the COVID-19 pandemic, masking and distancing.\nPenn State University requires everyone to wear a face mask in all university buildings, including classrooms, regardless of vaccination status. ALL STUDENTS MUST wear a mask appropriately (i.e., covering both your mouth and nose) while you are indoors on campus. This is to protect your health and safety as well as the health and safety of your classmates and the university community. Anyone joining class from Davey 538 (or any other shared indoor space on campus) is expected to comply at all times. Students who refuse to wear masks appropriately may face disciplinary action for Code of Conduct violations. If you feel you cannot wear a mask, then please join class from off campus.\nSince the class is remote synchronous, the process for resolving any violations of the Code of Conduct will be triggered by a student reporting the violation to the instructor. In particular, if a student observes someone not wearing a mask properly in Davey 538 during class period, then they should report the violation to the instructor promptly. If a student refuses to comply, then the matter will be referred to Penn State\u0026rsquo;s Office of Student Conduct.\nWhile some students may be comfortable working in close proximity with a partner on a lab assignment or class project, others may prefer to maintain more physical distance. Students are expected to respect others\u0026rsquo; requests for physical distancing.\nEtiquette Students are expected to be civil and considerate during class, regardless of whether it is online or in person. In particular, we want to create an environment where everyone feels comfortable asking questions and sharing imperfect code. Students should refrain from any actions that distract their classmates, instructor or the class. It\u0026rsquo;s understandable the cell phones will often be used for two factor authentication, but they should be silenced and put away during class once you\u0026rsquo;ve authenticated. Taking notes on laptops or looking up information relevant to class discussion is encouraged. However, apps and windows unrelated to the class should be closed throughout class.\nIf you join class from Davey 538, then please bring headphones, so everyone won\u0026rsquo;t hear audio from your computer (especially during breakout sessions on Thursdays, but potentially also during group discussions if different computers have different audio lag).\nThe Eberly College of Science has a Code of Mutual Respect and Cooperation. This code embodies the values that we hope our faculty, staff, and students possess and will endorse to make The Eberly College of Science a place where every individual feels respected and valued, as well as challenged and rewarded.\nAll students are responsible for knowing and following all the rules and regulations for this course as set forth in the syllabus (including the details on the class web site) and what is announced in class. In case of any ambiguity, ask the instructor to clarify.\nAcademic Integrity Students are expected to present their own work for homework assignments and the class project. Students are be strongly encouraged to consult with each other as part of completing assignments (in addition to making use of pair coding, as described below). How does one reconcile these two? One good rule of thumb is that you (whether an individual or a pair coding team) want to ask for help in planning what to do or figuring out what could be causing a problem, but when it comes time to implement those ideas, you should write the code yourself. When you collaborate with a classmate to develop a plan, you should each implement it individually.\nA second good rule of thumb is that you should not copy and paste text or code for a homework assignment. Any time you do (e.g., if you were to modify code from the Julia base or a package developed by a third party), you should clearly credit the source and indicate this via inline documentation in both the code which parts are you own and which were borrowed. That doesn\u0026rsquo;t mean that you\u0026rsquo;ll get credit for other people\u0026rsquo;s work, but it will mean you\u0026rsquo;ve been upfront about what was your contribution. If you\u0026rsquo;re ever unsure whether something is ok, you should ask and include an explanation of the contributions of others in your code and whatever you turn in.\nPair Coding You are encouraged to engage in “pair coding” for the homework assignments and/or the class project. When pair coding, you can choose to either: 1) have each student be the “driver” for their own part of the assignment (probably best for class projects) or 2) swap between “driver” and “navigator” roles frequently within each question (probably best for homework). Any time you pair code, you should always indicate who you paired with for each task. You may not have one student be the driver for all of exercise 1, then swap and have another student be the driver for all of exercise 2, as that makes it likely that the “navigator” will not understand the solution as well as the “driver”. When you engage in pair coding, then you should clearly indicate which student you worked with, so you can both get credit.\nComparing work with others Whether you complete assignments individually or in pairs, you are encouraged to compare your implementation’s code, accuracy and performance to that of your other classmates. Before you make changes after such a comparison, tag your repository with \u0026ldquo;precompare\u0026rdquo; (if for the whole assignment) or \u0026ldquo;precompare-N\u0026rdquo; (where N is the exercise number if you compare one exercise at a time within an assignment). In the pull request, add a few lines summarizing what changes you made and what you learned from the experience (e.g., how much of a difference the change made, if there are are drawbacks to the new approach).\nTimeliness of assignments Students should start all assignments well before the due date, so they can resolve any technical difficulties comfortably in advance of the deadline. Since assignments will typically be discussed in class on the day they are due, credit will be given based on what is submitted prior to class. In cases where turning in assignments on time is not practical due to illness, family emergency, or other university-approved excuse, assignments should still be completed and turned in, but those assignments may not be included when computing the course grade. If portions of the class project totalling more than 10% of course grade can not be completed before the course end date due to illness, family emergency, etc., then the student can elect to receive a “deferred grade” (DF) and to submit the remaining portions of the project no later than eight weeks after the course end date. Students electing this option should be familiar with the PSU DF policies.\nRecordings of classes In anticipation that some students may miss classes due to health issues, classes may be recorded. Ay students who prefer to not ask questions while being recorded are encouraged to submit questions in advance of class.\nVideo and audio recordings of classes (via Zoom) are part of the class activities. Any video and audio recordings are used for educational use/purposes and only may be made available to all students presently enrolled in the class. For purposes where the recordings will be used in future class sessions/lectures, any type of identifying information will be adequately removed.\nAccording to University Policy, students must get express permission from their instructor to record class sessions. Screenshots showing instructors and students are considered recordings. Even if permission is granted, student-initiated recordings must be used only for educational purposes for the students enrolled in the initiating student’s class. Recordings may be used only during the period in which the student is enrolled in the class. Authorized student-initiated recordings may not be posted or shared in any fashion outside of the class, including online or through other media, without the express written consent of the course instructor or appropriate University administrator. Students who engage in the unauthorized distribution of class recordings may be held in violation of the University’s Code of Conduct, and/or liable under Federal and State laws.\n"},{"uri":"https://psuastro528.github.io/syllabus/","title":"Syllabus","tags":[],"description":"","content":"High-Performance Scientific Computing for Astrophysics Astro 528: Fall 2021 Scope \u0026amp; Sprit of the Course High-Performance Scientific Computing for Astrophysics will combine class discussion and programming exercises to train students in the use of modern computing hardware and programming strategies for application to astronomy and astrophysics research. Students will gain experience applying these practices during a class project (potentially in support of the student’s dissertation research). While Astro 528 is primarily intended for graduate students in the astronomy \u0026amp; astrophysics program, it is likely also beneficial for graduate students in other physical sciences and engineering.\nThis course can count toward the Penn State Graduate Minor in Computational Science. It is complementary to Phys/Astro 587 Computational Physics/Astrophysics, the recent Astro 585: Astrostatistics and Stat/IST 557: Data Mining. The combination of these four courses with the domain expertise from their Ph.D. program would provide students with an excellent introduction to Data Science.\nGoals \u0026amp; Objectives The primary goal is for students to improve their skills in scientific computing, including programming practices for achieving reproducible results and high-performance scientific computing with an eye towards scaling up to larger problems and Big Data. To achieve this, students will develop a basic understanding of modern computer architectures, memory systems, programming languages and common programming patterns. Exercises provide students with experience applying established programming practices (e.g., version control, coding standards, unit testing, debugging, profiling, documenting and reviewing code) and optimizing performance using multi-core processors, clusters, GPUs and (hopefully) cloud computing.\nAll of these objectives may not be realized within the one-semester course, and we will adapt the scope and emphasis based on student interests and programming experience. The version of the syllabus on the course website will be updated throughout the semester. Students should check the website regularly for updates.\n Basic Course Information   Course Topics   Readings   Assessed Work   Requirements   Expectations   Resources \u0026amp; Accomodations    Course Schedule Additional Resources  "},{"uri":"https://psuastro528.github.io/syllabus/accomodations/","title":"Resources &amp; Accomodations","tags":[],"description":"","content":"Academic Success, Learning Assistance, \u0026amp; Student Resources The Eberly College of Science is committed to the academic success of students enrolled in the College\u0026rsquo;s courses and undergraduate programs. When in need of help, students can utilize various College and University wide resources for learning assistance. (https://science.psu.edu/current-students/support-network)\nAccomodations Note to Students with Disabilities:\nPenn State welcomes students with disabilities into the University’s educational programs. Every Penn State campus has an office for students with disabilities. Student Disability Resources (SDR) website provides contact information for every Penn State campus (http://equity.psu.edu/sdr/disability-coordinator). For further information, please visit Student Disability Resources website http://equity.psu.edu/sdr/).\nIn order to receive consideration for reasonable accommodations, you must contact the appropriate disability services office at the campus where you are officially enrolled, participate in an intake interview, and provide documentation: See documentation guidelines (http://equity.psu.edu/sdr/guidelines). If the documentation supports your request for reasonable accommodations, your campus disability services office will provide you with an accommodation letter. Please share this letter with your instructors and discuss the accommodations with them as early as possible. You must follow this process for every semester that you request accommodations.\nCounseling and Psychological Services Many students at Penn State face personal challenges or have psychological needs that may interfere with their academic progress, social development, or emotional wellbeing. The university offers a variety of confidential services to help you through difficult times, including individual and group counseling, crisis intervention, consultations, online chats, and mental health screenings. These services are provided by staff who welcome all students and embrace a philosophy respectful of clients’ cultural and religious backgrounds, and sensitive to differences in race, ability, gender identity and sexual orientation.\n Counseling and Psychological Services at University Park (CAPS): 814-863-0395 Penn State Crisis Line (24 hours/7 days/week): 877-229-6400 Crisis Text Line (24 hours/7 days/week): Text LIONS to 741741  This is likely to be another particularly challenging year, and students are encouraged to make use of these services.\nEducational Equity Penn State takes great pride to foster a diverse and inclusive environment for students, faculty, and staff. Acts of intolerance, discrimination, or harassment due to age, ancestry, color, disability, gender, gender identity, national origin, race, religious belief, sexual orientation, or veteran status are not tolerated and can be reported through Educational Equity via the Report Bias webpage.\n"},{"uri":"https://psuastro528.github.io/project/code_reviews/prep/","title":"Preparing your Code for Review","tags":[],"description":"","content":"Preparing Your Own Code for Review Provide overview to help reviewer Please provide your reviewers with a README or other instructions to help them figure out how to spend their time reviewing your code in a way that is most likely to be helpful to you.\nMake sure code is in plain text files (i.e., not only Jupyter notebooks) Jupyter and Pluto notebooks are great to document how to use your code. As functions mature, it\u0026rsquo;s nature to move well tested functions into \u0026lsquo;.jl\u0026rsquo; files. If your code is in the form of julia code (.jl files) or markdown (.jmd) or a Pluto notebook (also a .jl file), then reviewer can already comment on your code directly in GitHub. If you\u0026rsquo;ve been developing code inside a Jupyter notebook (.ipynb file), then remember to create (and commit and push) a .jl or .jmd version for your reviewers to comment on, just as you\u0026rsquo;ve been doing for homework assignments.\njulia -e \u0026#39;using Weave; convert_doc(\u0026#34;NOTEBOOK_NAME.ipynb\u0026#34;,\u0026#34;NOTEBOOK_NAME.jmd\u0026#34;)\u0026#39; Organize your files. If you only have a few functions, then (for now) it\u0026rsquo;s reasonable to have just one file for your main code and one file for tests. If you already have a larger code base, then organize your functions into multiple files .jl and place them in a src directory. Similiarly, use test, and optionally examples and docs directories to make it clear where user/reviewers can find tests, examples and additional documentation.\nGive your reviewer permission to access your repository. Go to your repository\u0026rsquo;s GitHub page and click \u0026ldquo;Settings\u0026rdquo; and \u0026ldquo;Collaborators \u0026amp; teams\u0026rdquo;. Under \u0026ldquo;Collaborators\u0026rdquo; (near the bottom), there\u0026rsquo;s a box \u0026ldquo;Search by username, full name or email address\u0026rdquo;. Enter the github username of your peer reviewer(s). Then click \u0026ldquo;Add collaborator\u0026rdquo;. The easiest option is to leave the permission level as \u0026ldquo;Write\u0026rdquo;.1 That should trigger an email inviting them to join the repository2. If your project repo was created by following the link I gave, then I should already have access to your project repository. If you created your project repository some other way, then please send me an email with \u0026ldquo;Astro 528 project url\u0026rdquo; in the subject line and the repo url in the message body (as well as the github id of your partner if working in a team).\nSetup Continuous Integration Testing While it\u0026rsquo;s not required for the first code submission, eventually you will want to setup continuous integration testing. Previously, we used Travis-CI, but now I think using GitHub Actions will be easier.\n  If you\u0026rsquo;d rather not give your peer reviewer write access to your repository, then you could create a new repository, copy your files into that repository, and given your peer reviewer write access to just that repository copy. You\u0026rsquo;d also need to invite your instructor to have access to your new repository. (Personally, I doubt it\u0026rsquo;s worth the extra effort.) \u0026#x21a9;\u0026#xfe0e;\n Some times automated emails from github can be overlooked. So if it might be nice if you also click \u0026ldquo;Copy invite link\u0026rdquo;, click the little clipboard icon, and send them an email saying \u0026ldquo;here\u0026rsquo;s the link to my repository for you to review\u0026rdquo;. \u0026#x21a9;\u0026#xfe0e;\n   "},{"uri":"https://psuastro528.github.io/project/code_reviews/how_to/","title":"How to Conduct Code Review","tags":[],"description":"","content":"Once you\u0026rsquo;ve been granted permission to a repository to review, browse to the repository on GitHub, take a look at the README (or whatever other documentation they provided).\nNext, browse the source files on GitHub by clicking on the file to review. Try to provide specific feedback on potential opporunities for improvement in each of the categories listed below. In most cases, I think it will generally be easiest to create a new issue for each suggestion linked to the line(s) of codes that you\u0026rsquo;re commenting on (see below for step-by-step instructions). In cases, where it would be more useful to describe a repeated issue once (e.g., \u0026ldquo;Your function docstrings did not explain what the inputs should be.\u0026quot;), then you can create one (or a few issues) and then in the comment section mention that \u0026ldquo;This issue appears repeatedly in this function (or file)\u0026quot;.\nLogistics of providing comments via GitHub Issues When you see a specific line of code that you\u0026rsquo;d like to comment on, click the line number to the left of the code. A box containing \u0026ldquo;\u0026hellip;\u0026rdquo; will appear just to the left of the line number. If you click there, you\u0026rsquo;ll get a drop-down menu. Choose \u0026ldquo;Reference in new issue\u0026rdquo;. At that point you\u0026rsquo;ll be brought to a new screen where you can describe the issue you\u0026rsquo;ve identified. If you want to comment on a chunk of code (rather than one line), then first click on the line number of the beginning of the block you want to comment on. Then hold down \u0026ldquo;Shift\u0026rdquo; and click on the line number at the end of the block you want to comment on. Then click the box containing \u0026ldquo;\u0026hellip;\u0026quot;, and choose \u0026ldquo;Reference in a new issue\u0026quot;g\nIf your feedback is something quite straight forward (e.g., missing docstring, uneven spacing), then just a few words in the title will be sufficient to convey the issue to the author. The lines you selected will be quoted, so the authors can see the code you\u0026rsquo;re commenting on. When you have a more substantive suggestions, then you should write a sentence or paragraph explaining your suggestion for why/how the code (or documentation) could be improved. Once you\u0026rsquo;ve finished explaining that suggestion, \u0026ldquo;Submit new issue.\u0026rdquo; This will trigger an email to the repository owner (and anyone else who is \u0026ldquo;watching\u0026rdquo; the repository; to watch a repository click on the box with the eyeball in the upper right).\nSpecific Suggestions After you\u0026rsquo;ve reviewed the code, look over the issues you created to sure that you\u0026rsquo;ve provided at least one suggestion in each of the four categories below. For each categories, I\u0026rsquo;ve include a list with examples of types of suggestions that could be useful to be on the look out for.\nReadability \u0026amp; Documentation (1 point)  Documentation  Functions that could benefit from better documentation of purpose, inputs or puts Functions that could benefit from better documentation of their design or implementation Type or modules that could benefit from documentation Documentation that is obsolete, redundant or not helpful   Style  Indentation \u0026amp; spacing that could be improved Places where an error/warning messages could be added/improved Fixing inconsistencies in coding style (e.g., Julia Style Guide)   Old code that could be removed (never reached or commented out)  Testing \u0026amp; Assertions (1 point)  Additional assertions Additional unit tests Additional integration and/or regression tests  Organization, Modularity \u0026amp; Maintainability (1 point)  Overall organization of the code Repeated code could be moved into a function Defining a composite type to improve code readability/organization Improving names for variables, functions, types, modules, etc. Places where could use interfaces (rather than directly accessing fields) Places where moving code into separate files/directories would be helpful Opportunities to make functions more generic  Efficiency \u0026amp; Performance (1 point)  Data structures that may inhibit memory/cache performance Places were unnecessary/repeated work could be eliminated Functions where another algorithm may be more efficient Non-const global variables that could be avoided Functions where type instability could affect performance Places where developer might want to try benechmarking an alternative implementation  General Suggestions After providing specific suggestions, step back to think about the big picture. Try to provide constructive suggestions for how the developer(s) could improve their programming practices. If it would be useful to add comments at specific lines of code on the pull request, you\u0026rsquo;re welcome to do so. Even in you do that case, please provide a summmary of your main suggestsions as a separate issue with title \u0026ldquo;Code review summary\u0026rdquo;. (1 point)\nBugs? If you think you may have found a bugs, then please let the developer know. If it\u0026rsquo;s an implementation detail (e.g., missing minus sign, need to use deepcopy instead of copy), then please comments at the point of the bug in responce to the developer(s) pull request. If it\u0026rsquo;s a bigger issue, then you can create an \u0026ldquo;Issue\u0026rdquo; via GitHub, where the developer and user can discuss that potential bug.\n"},{"uri":"https://psuastro528.github.io/project/code_reviews/follow_up/","title":"Follow-up on your Code Review","tags":[],"description":"","content":"Making use of your code review On GitHub, browse to your repository and click the \u0026ldquo;Issues\u0026rdquo; tab. Then you should have a list of all the issues that have been created. You can click on each issue\u0026rsquo;s name to see the specific lines of code they cited and to read the reviewer\u0026rsquo;s full comments. Some suggestions will clearly be good ideas and easy to fix quickly. Once you\u0026rsquo;ve updated the code as appropraite (commited and pushed that change), then you can enter \u0026ldquo;Done\u0026rdquo; in the box at the bottom and click \u0026ldquo;Close issue\u0026rdquo;. Other issues may benefit from you replying to the reviewer to ask for further information (e.g., \u0026ldquo;Are you asking what the variable \u0026lsquo;x\u0026rsquo; is?\u0026quot;). Other issues may just require more time to incorporate. You\u0026rsquo;re welcome to try out more advanced features (e.g., adding labels to help you prioritize issues, assiging one of your team members to deal with each issue, etc. Once you close an issue it\u0026rsquo;ll no longer show up on the default issues page (but you can still go back to see them by clicking \u0026ldquo;Closed\u0026rdquo;), so it\u0026rsquo;s easy to focus on the open issues. Feel free to create your own issues (especially if you\u0026rsquo;re working in a team) to help organize the work for the rest of the project.\n"},{"uri":"https://psuastro528.github.io/project/code_reviews/rubric/","title":"Rubric for Peer Review","tags":[],"description":"","content":"Grading Rubric for Assessing the Peer Review  Constructive suggestions for improving programming practices (1 point) Specific, constructive suggestions for improving code readability/documentation (1 point) Specific, constructive suggestions for improving tests and/or assertions (1 point) Specific, constructive suggestions for improving code modularity/organization/maintainability (1 point) Specific, constructive suggestions for improving code efficiency (1 point) Finding any bugs (if code author confirms) (bonus points?)  "},{"uri":"https://psuastro528.github.io/lessons/","title":"Schedule","tags":[],"description":"","content":" Readings, Tutorials \u0026amp; Other Preparation for Class Slides \u0026amp; Notebooks from Class Discussions Lab/Homework Exercises Class Project   Preparing for Class Week 1  Prior to Monday\u0026rsquo;s class  Think Julia Ch 1: The Way of the Program Github tutorial (at least through “Fork a Repo”,)  Follow advice for \u0026ldquo;Connecting over SSH\u0026rdquo; rather than \u0026ldquo;Connecting over HTTPS\u0026rdquo;     Prior to Thursday\u0026rsquo;s class  Setup account on Roar/ICDS-ACI The Rationale for Julia: Getting Started with Julia Programming (6pgs avaliable via \u0026ldquo;First Pages\u0026rdquo; as Preview/\u0026ldquo;Look Inside!\u0026quot;) Writing Scientific Software Ch 2 (22pgs): Scientific Computation and numerical analysis If it will help you with the lab: Think Julia Ch 2: Variables, Expressions \u0026amp; Statements    Week 2  Prior to Monday\u0026rsquo;s class  Writing Scientific Software Ch 3: Priorities (6pg) Writing Scientific Software Ch 4: Famous Disasters (4pg) Best Practices for Scientiﬁc Computing: Sec. 1-4 (6pg)   Prior to Thursday\u0026rsquo;s class  Best Practices for Scientiﬁc Computing: Sec. 5-9 (5pg) Submit Lab 1    Week 3  No class Monday (Labor Day Holiday) Prior to Thursday\u0026rsquo;s class  Writing Scientific Software Ch 7: Software Design (26pg, ok to skip 7.11-12) A beginner\u0026rsquo;s guide to Big-O notation Big-O Cheat Sheet (a useful reference, not to read end-to-end) Submit Lab 2    Week 4  Prior to Monday\u0026rsquo;s class  Submit Project Proposal Writing Scientific Software Ch 6: Computer Organization (12pg) Either  Introduction to High Performance Computing for Scientists and Engineers Ch 1: Modern Processors (32pg) -or- Introduction to High-Performance Computing Ch 1-1.3.4.1: Single-processor Computing (13pg)     Prior to Thursday\u0026rsquo;s class  Writing Scientific Software Ch 17.3: Profiling (2pg) Why does Julia work so well? Submit Lab 3    Week 5  Prior to Monday\u0026rsquo;s class  Introduction to High Performance Computing for Scientists and Engineers Ch 2: Serial Optimization (26pg) and/or Performance Tips (just the bold section headings is enough for now; come back to read more about any specific tip when it applies to your project)   Prior to Thursday\u0026rsquo;s class  Submit Lab 4    Week 6  Prior to Monday\u0026rsquo;s class  Writing Scientific Software Ch 14: Memory Allocation \u0026amp; Garbage Collection (excluding 4.5; 11pg) Writing Scientific Software Ch 12.1: Caches \u0026amp; memory hierarchies, 12.4 Threashing, 12.5 Designing for memory hierarchies, 12.6 Dynamic data structures and memory hierarchies (pg) Latency Numbers Every Programmer Should Know Optionally one of  Introduction to High Performance Computing for Scientists and Engineers Ch 3 Data Access Optimization (excluding 3.1.2, 3.3, 3.3; 20pg) Introduction to High-Performance Computing Ch 1.7: Programming strategies for high performance (16pg)     Prior to Thursday\u0026rsquo;s class  Best Practices for Code Review Submit Lab 5    Week 7\n Prepare for Code Review  No new readings, but be helpful to review: Best Practices for Code Review Code Reiew Best Practices from Palantir Blog 13 Code Review Standards Inspired by Google    Week 8  Prior to Monday\u0026rsquo;s class  Introduction to Parallel Computing Sec B-E -or- Introduction to High-Performance Computing Ch 2.1-2.4: Parallel Computing (19pg) -or- Introduction to High Performance Computing for Scientists and Engineers:  Ch 4 Parallel Computers (20pg) -and- Ch 5 Basics of Parallelization (22pg)      Week 9  Prior to Monday\u0026rsquo;s class  Distributed Processing with Julia (stop after Parralel Map and Loops)    Week 10  Prior to Monday\u0026rsquo;s class  An Introduction to GPU Programming from UC Berkeleys\u0026rsquo; CS 267 Introduction to GPU Programming in Julia    Week 11  Prior to Monday\u0026rsquo;s class  Best Practices for Scientific Computing: (Sec 2; yes, let\u0026rsquo;s all read it again!) Best Practices for Scientific Computing: (Reference list on last page, just in case you didn\u0026rsquo;t notice it before!)    Week 12 Week 13  Prior to Monday\u0026rsquo;s class  Writing Scientific Software Ch 17.1: Make (4pg; if using C/C++ or Fortran for project) -or- Julia Package Development: Sec. 1-3 (stop after Updating Packages; if using Julia for project)     Slides \u0026amp; Notebooks  Week 1, Monday: Course Overview Week 1, Thursday: Scientific Programming \u0026amp; Floating Point Arithmetic Week 2, Discussion: Priorities for Scientific Computing: Unit Testing, Documenting, Generic Code \u0026amp; Specifying Types Week 2, Q\u0026amp;A: Git Week 3, Discussion: Priorities for Scientific Computing: Correctness, Documentation Week 3, Q\u0026amp;A: Two-language Problem, Expert vs Non-Expert Interfaces Week 4: Compilation, Code inspection, Vectorization, Memory Hierarchy Week 5: What to Optimize, Programming Interfaces, Abstract Types Week 6: Memory Allocation \u0026amp; Code Review Week 7, Monday: Code Review Best Practices Week 7, Thursday: Introduction to Parallelization Week 8, Monday: Parallelization: Q\u0026amp;A and Scaling Laws Week 9, Monday Discussion: Using the Roar supercomputer Week 9, Monday Q\u0026amp;A: Distributed memory programming Week 10, Monday Discussion: GPU Computing Week 10, Thursday Q\u0026amp;A: GPU Computing   Lab/Homework Exercises  Lab 1: Tools \u0026amp; Fundamentals: Floating Point Arithmetic, Functions, Tests (Due Sept 2)\n Exercise 1: Get started using core development tools  ICDS-ACI portal git GitHub.com Julia Pluto Notebooks   Exercise 2: Floating Point Arithmetic, Functions, Tests Exercise 3: Personal Goals (save at least 15 minutes for this one)  Lab 2: Best Practices: Assertions, Unit Testing, Continuous Integrations, Benchmarking (due Sept 9)  Exercise 1: Benchmarking, Big-O Analysis, Compute vs Memory Limits Exercise 2: Numerical Stability of N-body Exercise 3: Assertions, Unit Tests \u0026amp; Continuous Integration Testing  Lab 3: Memory Access, Disk I/O, DataFrames (due Sept 16)\n Exercise 1: Dense Matrix-Vector Multiply: Optimizing serial code, Memory access paterns, Benchmarking Exercise 2: Benchmarking File I/O (no Python dependencies) Exercise 2: Benchmarking File I/O (\u0026amp; Calling Python Packages)   Lab 4: Higher-level Languages \u0026amp; Probabilistic Programming (due Sept 23)\n Exercise 1: Auto-differentiation \u0026amp; Optimization (as in minimization/maximization of a function) Exercise 2: Probabilistic Programming Language   Lab 5: Serial Optimizations: Profiling, Type Stability, Code Inspection \u0026amp; Optimization Patterns (due Sept 30)\n Exercise 1: Profiling Exercise 2: Type Stability \u0026amp; Code Inspection   Lab 6: Parallel Programming I: Shared-memory Systems (due Oct 21)\n Exercise 1: Parallelization for Multi-Core Workstations via Multiple-Threads Exercise 2: Parallelization for Multi-Core Workstations via Multiple Processes   Lab 7: Parallel Programming II: Batch Jobs \u0026amp; Distributed Memory Systems (due Oct 28)\n Exercise 1: Submitting Batch Jobs to ICS-ACI Cluster Exercise 2: Parallelization for Distributed-memory Systems (e.g., Clusters, Cloud) Exercise 3: Run your project code as a batch job on ICS-ACI   Lab 8: Parallel Programming III: GPUs \u0026amp; Other Hardware Accelerators (due Nov 11)\n Exercise 1: Getting Setup for GPU Computing \u0026amp; Linear Algebra Exercise 2: GPU Kernels \u0026amp; Array Programming   Lab 9: Reproducibility: Packages, Environments, Containers \u0026amp; the Cloud (TBC; due Nov 18)\n TBD    Class Project Schedule  Project proposal (due Sept 13) Serial version of code (due Oct 4) Peer code review (due Oct 11) Parallel version of code (multi-core) (due Nov 1) Second parallel version of code (distributed-memory/GPU/cloud) (due Nov 18) Completed code, documentation, tests, packaging (optional) \u0026amp; reflection (due Dec 2) Class presentations (Nov 29 - Dec 9, detailed schedule )   "},{"uri":"https://psuastro528.github.io/labs/","title":"Lab/Homework Exercises","tags":[],"description":"","content":"\nLabs \u0026amp; Homework Exercises  Lab 1: Tools \u0026amp; Fundamentals     Lab 2: Best Practices     Lab 3: Memory Hierarchy     Lab 4: Probabilistic Programming     Lab 5: Serial Optimization     Lab 6: Parallelization I     Lab 7: Parallelization II     Lab 8: GPU Accelerators     Lab 9: Reproduciblity     Reusing \u0026amp; citing this work If you use any of these materials in academic work (e.g., courses, papers), please cite Ford, Eric B. 2021 doi:10.26207/zt99-ba86. If you use any of these materials in websites, please consider linking to PSU Astro 528: High-Performance Computing for Astrophysics course materials (Fall 2021).\nThe course materials are licensed as follows:\n The code is under the MIT license. The text is under the CC BY-SA 4.0 license.  "},{"uri":"https://psuastro528.github.io/labs/lab1/","title":"Lab 1: Tools &amp; Fundamentals","tags":[],"description":"","content":"Lab 1: Tools \u0026amp; Fundamentals: Floating Point Arithmetic, Functions, Tests (Due Sept 2)\n Exercise 1: Get started using core development tools  ICDS-ACI portal git GitHub.com Julia Pluto Notebooks   Exercise 2: Floating Point Arithmetic, Functions, Tests Exercise 3: Personal Goals (save at least 15 minutes for this one)  If you\u0026rsquo;re waiting on getting your account on ICDS-ACI, then I\u0026rsquo;d suggest that you start with exercise 3, since thinking about your goals does not require any accounts or special software.\nIf you\u0026rsquo;re still waiting on getting your account on ICDS-ACI, then you could using a local installation of Julia. If that gives you trouble, then you could use JuliaHub or Binder to start tinkering on the assignments. For running Pluto notebooks on Binder, you can use Pluto.jl on Binder. From the html versions linked above, click \u0026ldquo;Edit or run this notebook\u0026rdquo; in the upper right and then click the binder button. Be patient, as it\u0026rsquo;ll take a while to build a virtual machine for you to use.\nNote that you will not be able to save your work directly to a github repository when using Binder. Instead, you could click the triangle and circle icon in the upper right and choose to download a \u0026ldquo;Notebook file\u0026rdquo; exiting your session. Then you could copy it into your github repository. While this is workable for the first few labs, you\u0026rsquo;ll need to get ACI working for later assignments where performance is actually important part of the assignment.\nAdditional Resources  Getting Started with Julia on ACI Starting \u0026amp; Submitting Assignments Julia Resources   "},{"uri":"https://psuastro528.github.io/labs/lab2/","title":"Lab 2: Best Practices","tags":[],"description":"","content":"Lab 2: Best Practices: Assertions, Unit Testing, Continuous Integrations, Benchmarking (due Sept 9)  Exercise 1: Benchmarking, Big-O Analysis, Compute vs Memory Limits Exercise 2: Numerical Stability of N-body Exercise 3: Assertions, Unit Tests \u0026amp; Continuous Integration Testing  Lessons / Resources  Getting Started with Julia on ACI Starting \u0026amp; Submitting Assignments Julia Resources  Packages used  Documentation for DifferentialEquations.jl  "},{"uri":"https://psuastro528.github.io/labs/lab3/","title":"Lab 3: Memory Hierarchy","tags":[],"description":"","content":"Lab 3: Memory Access, Disk I/O, DataFrames (due Sept 16)\n Exercise 1: Dense Matrix-Vector Multiply: Optimizing serial code, Memory access paterns, Benchmarking Exercise 2: Benchmarking File I/O (no Python dependencies) Exercise 2: Benchmarking File I/O (\u0026amp; Calling Python Packages)   Lessons / Resources  Details for this class  Getting Started with Julia on ACI Starting \u0026amp; Submitting Assignments   Julia  Julia Manual Think Julia: How to Think Like a Computer Scientist Learn Julia in Y Minutes   File Formats  FITSIO library written in C HDF5 Apache Arrow   Julia packages for reading files  Julia\u0026rsquo;s FileIO.jl high-level API Julia\u0026rsquo;s JLD2.jl package Julia\u0026rsquo;s HDF5.jl package Julia\u0026rsquo;s FITSIO.jl package Julia\u0026rsquo;s [Apache Arrow.jl implementation Feather.jl PyCall.jl documentation.   Querying DataFrames  Query.jl DataFramesMeta.jl) JuliaDB.jl   Miscelaneous  Regular expressions in julia Astropy    "},{"uri":"https://psuastro528.github.io/labs/lab4/","title":"Lab 4: Probabilistic Programming","tags":[],"description":"","content":"Lab 4: Higher-level Languages \u0026amp; Probabilistic Programming (due Sept 23)\n Exercise 1: Auto-differentiation \u0026amp; Optimization (as in minimization/maximization of a function) Exercise 2: Probabilistic Programming Language   Resources  Autodifferentiation  ForwardDiff.jl DiffResults.jl ReverseDiff.jl Zygote.jl   Model Fitting  Optim.jl LsqFit.jl GLM.jl   Minimization Algorithms  [Gradient Descent](https://en.wikipedia.org/wiki/Gradient_descent Downhill Simplex BFGS   Probabilistic Programming  Turing.jl MCMCChains.jl Soss.jl   Sampling Algorithms  NUTS    "},{"uri":"https://psuastro528.github.io/labs/lab5/","title":"Lab 5: Serial Optimization","tags":[],"description":"","content":"Lab 5: Serial Optimizations: Profiling, Type Stability, Code Inspection \u0026amp; Optimization Patterns (due Sept 30)\n Exercise 1: Profiling Exercise 2: Type Stability \u0026amp; Code Inspection   "},{"uri":"https://psuastro528.github.io/labs/lab6/","title":"Lab 6: Parallelization I","tags":[],"description":"","content":"Lab 6: Parallel Programming I: Shared-memory Systems (due Oct 21)\n Exercise 1: Parallelization for Multi-Core Workstations via Multiple-Threads Exercise 2: Parallelization for Multi-Core Workstations via Multiple Processes   "},{"uri":"https://psuastro528.github.io/labs/lab7/","title":"Lab 7: Parallelization II","tags":[],"description":"","content":"Lab 7: Parallel Programming II: Batch Jobs \u0026amp; Distributed Memory Systems (due Oct 28)\n Exercise 1: Submitting Batch Jobs to ICS-ACI Cluster Exercise 2: Parallelization for Distributed-memory Systems (e.g., Clusters, Cloud) Exercise 3: Run your project code as a batch job on ICS-ACI   "},{"uri":"https://psuastro528.github.io/labs/lab8/","title":"Lab 8: GPU Accelerators","tags":[],"description":"","content":"Lab 8: Parallel Programming III: GPUs \u0026amp; Other Hardware Accelerators (due Nov 11)\n Exercise 1: Getting Setup for GPU Computing \u0026amp; Linear Algebra Exercise 2: GPU Kernels \u0026amp; Array Programming   "},{"uri":"https://psuastro528.github.io/labs/lab9/","title":"Lab 9: Reproduciblity","tags":[],"description":"","content":"Reproducibility: Packages, Environments \u0026amp; Containers Lab 9: Reproducibility: Packages, Environments, Containers \u0026amp; the Cloud (TBC; due Nov 18)\n TBD   "},{"uri":"https://psuastro528.github.io/slides/","title":"Slides &amp; Notebooks","tags":[],"description":"","content":"Slides \u0026amp; Notebooks  Week 1, Monday: Course Overview Week 1, Thursday: Scientific Programming \u0026amp; Floating Point Arithmetic Week 2, Discussion: Priorities for Scientific Computing: Unit Testing, Documenting, Generic Code \u0026amp; Specifying Types Week 2, Q\u0026amp;A: Git Week 3, Discussion: Priorities for Scientific Computing: Correctness, Documentation Week 3, Q\u0026amp;A: Two-language Problem, Expert vs Non-Expert Interfaces Week 4: Compilation, Code inspection, Vectorization, Memory Hierarchy Week 5: What to Optimize, Programming Interfaces, Abstract Types Week 6: Memory Allocation \u0026amp; Code Review Week 7, Monday: Code Review Best Practices Week 7, Thursday: Introduction to Parallelization Week 8, Monday: Parallelization: Q\u0026amp;A and Scaling Laws Week 9, Monday Discussion: Using the Roar supercomputer Week 9, Monday Q\u0026amp;A: Distributed memory programming Week 10, Monday Discussion: GPU Computing Week 10, Thursday Q\u0026amp;A: GPU Computing  "},{"uri":"https://psuastro528.github.io/project/","title":"Class Project","tags":[],"description":"","content":"Students are encouraged to choose a class project that could benefit their research interests. Students should discuss their plans before submitting the project proposal, so as to maximize the chances that they choose a project that is interesting enough to be worth parallelizing, yet simple enough that they can complete the project (while implementing the best practices discussed in this course) in a reasonable ammount of time. Students who have not started their dissertation research may ask the instructor for project suggestions.\nFor the class project, students will put into practice the software development practices they learn in this course, including assertions, tests, documentation, version control, modular design, and packaing for easy resuse by others. Students will participate in a peer code review process to identify opportunities to improve their coding.\nNext, students will identify an appropriate portion of the code to optimize, optimize it for serial computation, and compare benchmark results. Students will parallelize the an appropriate portion of the code for two different computing architectures and explore how their code performance scales. Students will package their code so that others can easily install and run the code to reproduce some simple calculation. In the final report and presentation, students will describe their findings and lessons learned, so the full class can learn from their experience.\nThe regular homework exercises are designed to provide the scafolding to help students succeed with a class project. In any weeks where you complete the homework exercises quickly, consider making progress on your class project. While students will choose different projects, all should share the same key elements:\n Project Proposal Serial Code that passes tests (serial) First Peer Code Review (of serial code) Code parallelized for multi-core system Second Peer Code Review (of parallelized code) Code parallelized for distributed-memory, accelerator or cloud Benchmarking results showing how the performance of the code scales with increasing number of processors for multiple problem sizes Presentation to class (Presentation Schedule) Documentation and packaging of code for reuse by others  See the grading rubrics for details of the expectations for each part of the project.\n"},{"uri":"https://psuastro528.github.io/project/proposal/","title":"Project Proposal due","tags":[],"description":"","content":"Use the link provided via course announcement or Canvas to create your repository for the project proposal.\nGrading Rubric  Statement of the project goal (0 points, but required so the rest makes sense) Description of the inputs. Be sure to specify what parameters (e.g., dataset size, resolution of grid, number of samples, etc.) will be used to explore how performance scales (1 point) Description of the outputs (1 point) Detailed plan for how the code will be tested (1 point) Discussion of the relevant range of problem sizes (1 point) Complete list of what computer architectures, programming languages, and libraries you will use, as well as an justification of your choices (1 point)  "},{"uri":"https://psuastro528.github.io/project/serial/","title":"Serial Code for Project due","tags":[],"description":"","content":"At this point the code does not need to be optimized. If you have time, it would be best to include the results of benchmarking and/or profiling in the README, to help both you and the reviewer identify which sections are ammenable to optimization.\nGrading Rubric  Code performs proposed tasks (1 point) Comprehensive set of unit tests, at least one integration or regression test (1 point) Code passes tests (1 point) Student code uses a version control system effectively (1 point) Repository includes many regular, small commits (1 point) Documentation for functions\u0026rsquo; purpose and design (1 point) Comprehensive set of assertions (1 point) Variable/function names consistent, distinctive \u0026amp; meaningful (1 point) Useful \u0026amp; consistent code formatting \u0026amp; style (1 point) Code is modular, rather than having chunks of same code copied and pasted (1 point)  Preparing Your Own Code for Review Provide overview to help reviewer Please provide your reviewers with a README or other instructions to help them figure out how to spend their time reviewing your code in a way that is most likely to be helpful to you.\nMake sure code is in plain text files (i.e., not only Jupyter notebooks) Jupyter and Pluto notebooks are great to document how to use your code. As functions mature, it\u0026rsquo;s nature to move well tested functions into \u0026lsquo;.jl\u0026rsquo; files. If your code is in the form of julia code (.jl files) or markdown (.jmd) or a Pluto notebook (also a .jl file), then reviewer can already comment on your code directly in GitHub. If you\u0026rsquo;ve been developing code inside a Jupyter notebook (.ipynb file), then remember to create (and commit and push) a .jl or .jmd version for your reviewers to comment on, just as you\u0026rsquo;ve been doing for homework assignments.\njulia -e \u0026#39;using Weave; convert_doc(\u0026#34;NOTEBOOK_NAME.ipynb\u0026#34;,\u0026#34;NOTEBOOK_NAME.jmd\u0026#34;)\u0026#39; Organize your files. If you only have a few functions, then (for now) it\u0026rsquo;s reasonable to have just one file for your main code and one file for tests. If you already have a larger code base, then organize your functions into multiple files .jl and place them in a src directory. Similiarly, use test, and optionally examples and docs directories to make it clear where user/reviewers can find tests, examples and additional documentation.\nGive your reviewer permission to access your repository. Go to your repository\u0026rsquo;s GitHub page and click \u0026ldquo;Settings\u0026rdquo; and \u0026ldquo;Collaborators \u0026amp; teams\u0026rdquo;. Under \u0026ldquo;Collaborators\u0026rdquo; (near the bottom), there\u0026rsquo;s a box \u0026ldquo;Search by username, full name or email address\u0026rdquo;. Enter the github username of your peer reviewer(s). Then click \u0026ldquo;Add collaborator\u0026rdquo;. The easiest option is to leave the permission level as \u0026ldquo;Write\u0026rdquo;.1 That should trigger an email inviting them to join the repository2. If your project repo was created by following the link I gave, then I should already have access to your project repository. If you created your project repository some other way, then please send me an email with \u0026ldquo;Astro 528 project url\u0026rdquo; in the subject line and the repo url in the message body (as well as the github id of your partner if working in a team).\n  If you\u0026rsquo;d rather not give your peer reviewer write access to your repository, then you could create a new repository, copy your files into that repository, and given your peer reviewer write access to just that repository copy. You\u0026rsquo;d also need to invite your instructor to have access to your new repository. (Personally, I doubt it\u0026rsquo;s worth the extra effort.) \u0026#x21a9;\u0026#xfe0e;\n Some times automated emails from github can be overlooked. So if it might be nice if you also click \u0026ldquo;Copy invite link\u0026rdquo;, click the little clipboard icon, and send them an email saying \u0026ldquo;here\u0026rsquo;s the link to my repository for you to review\u0026rdquo;. \u0026#x21a9;\u0026#xfe0e;\n   "},{"uri":"https://psuastro528.github.io/project/code_reviews/","title":"Peer Code Reviews","tags":[],"description":"","content":"  Preparing your Code for Review   How to Conduct Code Review   Follow-up on your Code Review   Rubric for Peer Review   Additional resources with various perspectives on how to conduct an effective code review  Best Practices for Code Review Code Reiew Best Practices from Palantir Blog 13 Code Review Standards Inspired by Google  "},{"uri":"https://psuastro528.github.io/project/parallel1/","title":"First Parallel Project Code due","tags":[],"description":"","content":"Submit First Parallel Code for Project  Choice of portion of code to parallelize (1 point) Choice of approach for parallelizing code (1 point) Code performs proposed tasks (2 point) Unit/regression tests comparing serial \u0026amp; parallel versions (1 point) Code passes tests (1 point) General code efficiency (1 point) Implementation/optimization of multi-core parallelization (2 points) Significant performance improvement (1 point)  "},{"uri":"https://psuastro528.github.io/project/parallel2/","title":"Second Parallel Implementation","tags":[],"description":"","content":"Grading Rubric for second parallelization method  Choice of portion of code to parallelize (1 point) Choice of approach for parallelizing code (1 point) Code performs proposed tasks (2 point) Unit/regression tests comparing serial \u0026amp; parallel versions (1 point) Code passes tests (1 point) General code efficiency (1 point) Implementation/optimization of second type of parallelism (2 points) Significant performance improvement (1 point)  "},{"uri":"https://psuastro528.github.io/project/final_submission/","title":"Completed Project","tags":[],"description":"","content":"Grading Rubric for Final Project Submission  Results of benchmarking code (typically included in project README, but more comprehensive benchmarking could be in a separate document, notebook or directory)  Performance versus problem size for fixed number of workers (1 point) Performance versus number of workers for fixed problem size (1 point)   Documentation:  README: (1 point)  Project overview Instructions on how to install and run code CI testing or detailed instructions on how to rerun tests Results of benchmarking and/or pointer to where results can be found Overview of code/package structure (if project is larger than one notebook)   Docstrings: Coverage, clarity and quality (1 point)   Summary of lessons learned (1 point)  "},{"uri":"https://psuastro528.github.io/project/presentations/","title":"Project Presentations","tags":[],"description":"","content":"Schedule of Student Presentations Grading Rubric for Project Presentation  Motivation/Introduction/Overview of project, so class can understand broader goals (1 point) Explanation of specific calculation being performed, so class can understand what follows (1 point) Description of optimization and parallelziation approaches attempted (1 point) Analysis/explanation  Identify most time consuming part(s) of calculations and specify what is being benchmarked (0 points) Benchmarks of how performance of each version scales with problem size for fixed number of workers (1/2 point) Benchmarks of how performance of parallel versions scales with nubmer of workers for given problem size (1/2 point)   Description/analysis/discussion of what lessons you learned from the class project (1 point)  "},{"uri":"https://psuastro528.github.io/project/rubrics/","title":"Grading Rubrics","tags":[],"description":"","content":"Class Project The class project consists of several parts, each of which has its own submission deadline. It is particularly important that you provide code for peer review on time, so that your peer reviewer is able to provide thoughtful and helpful feedback in time for it to improve your code for the latter parts of the project. The project grade will be based on:\nProject Components  Project Proposal (5 points) Checkpoint 1: Serial version of code (10 points) Checkpoint 2: Multi-core version of code (10 points) Peer code reviews (5 points) Checkpoint 3: Distributed-memory/GPU/TPU/Cloud version of code (10 points) Final Submission: Completed project code with documetation, benchmarking results and summary of lessons learned. (5 points) Project Presentation (5 points)  The grading rubric for each part of the proposal is provided below.\nProject Proposal  Statement of the project goal (0 points, but required so the rest makes sense) Description of the inputs. Be sure to specify what parameters (e.g., dataset size, resolution of grid, number of samples, etc.) will be used to explore how performance scales (1 point) Description of the outputs (1 point) Detailed plan for how the code will be tested (1 point) Discussion of the relevant range of problem sizes (1 point) Complete list of what computer architectures, programming languages, and libraries you will use, as well as an justification of your choices (1 point)  Serial version of code  Code performs proposed tasks (1 point) Comprehensive set of unit tests, at least one integration or regression test (1 point) Code passes tests (1 point) Student code uses a version control system effectively (1 point) Repository includes many regular, small commits (1 point) Documentation for functions\u0026rsquo; purpose and design (1 point) Comprehensive set of assertions (1 point) Variable/function names consistent, distinctive \u0026amp; meaningful (1 point) Useful \u0026amp; consistent code formatting \u0026amp; style (1 point) Code is modular, rather than having chunks of same code copied and pasted (1 point)  Peer Code Reviews  Constructive suggestions for improving programming practices (1 point) Specific, constructive suggestions for improving code readability/documentation (1 point) Specific, constructive suggestions for improving tests and/or assertions (1 point) Specific, constructive suggestions for improving code modularity/organization/maintainability (1 point) Specific, constructive suggestions for improving code efficiency (1 point) Finding any bugs (if code author confirms) (bonus points?)  For more information, see instructions for code review.\nFirst parallel version of code Typically, the first parallel version runs on multiple cores using a shared memory system.\n Choice of portion of code to parallelize (1 point) Choice of approach for parallelizing code (1 point) Code performs proposed tasks (2 point) Unit/regression tests comparing serial \u0026amp; parallel versions (1 point) Code passes tests (1 point) General code efficiency (1 point) Implementation/optimization of multi-core parallelization (2 points) Significant performance improvement (1 point)  Submit second parallel version of code Typically, the second parallel version of the code is parallelized using one of: multiple cores with distributed-memory or a GPU. Other alternatives include using Intel Phis, TPUs, or a cloud environment like JuliaHub.\n Choice of portion of code to parallelize (1 point) Choice of approach for parallelizing code (1 point) Code performs proposed tasks (2 point) Unit/regression tests comparing serial \u0026amp; parallel versions (1 point) Code passes tests (1 point) General code efficiency (1 point) Implementation/optimization of second type of parallelism (2 points) Significant performance improvement (1 point)  Completed Project:  Results of benchmarking code (typically included in project README, but more comprehensive benchmarking could be in a separate document, notebook or directory)  Performance versus problem size for fixed number of workers (1 point) Performance versus number of workers for fixed problem size (1 point)   Documentation:  README: (1 point)  Project overview Instructions on how to install and run code CI testing or detailed instructions on how to rerun tests Results of benchmarking and/or pointer to where results can be found Overview of code/package structure (if project is larger than one notebook)   Docstrings: Coverage, clarity and quality (1 point)   Summary of lessons learned (1 point)  Project Presentation  Motivation/Introduction/Overview of project, so class can understand broader goals (1 point) Explanation of specific calculation being performed, so class can understand what follows (1 point) Description of optimization and parallelziation approaches attempted (1 point) Analysis/explanation  Identify most time consuming part(s) of calculations and specify what is being benchmarked (0 points) Benchmarks of how performance of each version scales with problem size for fixed number of workers (1/2 point) Benchmarks of how performance of parallel versions scales with nubmer of workers for given problem size (1/2 point)   Description/analysis/discussion of what lessons you learned from the class project (1 point)  "},{"uri":"https://psuastro528.github.io/goals/","title":"Learning Goals","tags":[],"description":"","content":"Learning Goals \u0026amp; Objectives Week 1  Understand course goals, organization and expectations Recognize opportunities to improve productivity through software development practices Exercise 1: Use software development tools  Access ICDS-ACI Portal\u0026rsquo;s Jupyter Server with BYOE (bring your own environment) Optionally setup Julia+Pluto+git on your own computer Use Git \u0026amp; GitHub.com for retrieving and submitting lab assignments Use variables, strings and Markdown in Julia Use unit tests   Exercise 2: Floating Point Arithmetic, Functions  Write code as a function Use/write tests of code Recognize potential pitfalls with floating-point arithmetic   Exercise 3: Develop your personal goals for semester  Week 2  Priorities for Scientific Computing Exercise 1: Benchmarking  Benchmark functions accurately Predict cost of an algorithm based on Big-O analysis Identify real world complications that affect scaling   Exercise 2: Numerical Stability of N-body Integration  Integrate differential equations Compare the accuracy and numerical stability of results as a function of time step, order and integration algorithm Appreciate importance of numerical stability   Exercise 3: Assertions, Unit Tests \u0026amp; Continuous Integration Testing  Write effective tests for floating point calculations Reduce bugs via assertions Identify bugs promptly via unit testing Identify bugs promptly via continuous integration testing End-to-end Testing to validate code    Week 3  Exercise 1  Recognize significance of memory layout \u0026amp; data structures Optimize serial code   Exercise 2  Recognize pros/cons of different file formats   Class Project  Apply \u0026ldquo;Programming in the Large\u0026rdquo; to your class project Choose appropriate file format for a project Choose appropriate memory layout \u0026amp; data structures for a project    Week 4  Describe steps a CPU performs surrounding actual arithmetic Anticipate when performance will be affected by cache size Exercises  Fit a model to data Read \u0026amp; write models using a probabilistic programming language Estimate uncertainties in model parameters using Markov chain Monte Carlo   Project  Plan data structures to optimize for memory access Consider whether autodifferentiation and/or probablistic program model is appropriate for your project    Week 5  Exercises  Profile code Identify type instability via code inspection macros Identify opportunities for optimziation  Writing type stable functions Optimize performance by reducing memory allocaitons   Optimize code for serial execution   Project  Profile code to identify code worth optimizing Document code to increase chances of useful feedback from peer code review    Week 6  Describe what an optimizing compiler can optimize for you Describe what an optimizing compiler can\u0026rsquo;t optimize for you Understand how linear algebra libraries acheive peak performance through memory access pattern Describe interaction between global variables and type stability of functions Explain why parallelism in increasingly important Describe function overloading \u0026amp; multiple dispatch Describe benefits of use abstract types and containers of abstract types Describe benefits of an Application Programming Interface  Week 7  Project  Provide constructive feedback in code review Use GitHub Issues to manage tasks for code base   Readings / Discussions  Evaluating the suitability of a problem for different parallel architectures    Week 8  Lab 6: Shared Memory Computing Patterns   Choose an appropriate number of worker processors for your compute node \u0026amp; problem\n  Parallelize code using shared memory model \u0026amp; multiple threads, using tools such as:\n ThreadsX.map and ThreadsX.mapreduce Threads.@threads ThreadsX.foreach FLoops.jl and ThreadedEx (recommended) Threads Folds.jl (alternative)    Parallelize code using shared memory model \u0026amp; multiple processes, using tools such as:\n pmap SharedArrays DistributedArrays.jl w/ using map and mapreduce @distributed for loop FLoops.jl and DistributedEx (recommended) Folds.jl (alternative)     Readings / Discussions  Evaluating the suitability of a problem for different parallel architectures    Week 9  Lab 7, Exercise 1: Run batch jobs on ICDS-ACI/Roar:  Submit a batch job via PBS Read and write data from batch job Run multiple jobs using a job array   Lab 7, Exercise 2: Parallelize code for Distributed memory model, using patterns such as:  Load code and packages on worker nodes Parallelize code over multiple compute nodes, using at least one of:  pmap (recommended) DistributedArrays.jl with map and mapreduce (recommended) FLoops.jl and DistributedEx (recommended) @distributed for loop (alternative) Parallelize code using Dagger.jl (alternative)   Explain differences in performance when using multiple processor cores on same node versus using multiple processor cores on different nodes   Project  Run project code as batch job on the ICDS-ACI cluster   Readings / Discussions  Evaluating the suitability of a problem for different parallel architectures    Week 10  Project  Gain experience parallelizing a real world code Identify changes need to acheive significant performance benefit via parallelization   Readings / Discussions  Describe how GPU differs from CPU Assess the prospects for a given algorithm to achieve a significant speed-up using a GPU    Week 11  Lab 8, Exercise 1  Run GPU code on ICDS-ACI/Roar Accelerate linear algebra computations with GPU Recognize what problem sizes and likely to result in acceleration with a GPU for linear algebra   Lab 8, Exercise 2:  Learn to write a GPU kernel, using KernelAbstractions.jl Improve performance by reducing memory transfers via GPU reductions Perform custom scientific computations using high-level GPU interface, such as  map or mapreduce on CuArray from CUDA.jl (recommended), or Folds.jl with CUDAEx() executor from FoldsCUDA.jl   Improve performance through reduced memory allocations Recognize what types of problems and problem sizes are likely to result in acceleration with a GPU when using a high-level programming interface or custom GPU kernel   Project  Parallelize real world code Achieve significant performance benefit via parallelization    Week 12  Project  Gain experience with second mechanism for parallelizing real world code Work towards achieving a significant performance benefit via second parallelization   Readings / Discussions  Describe benefits and disadvantages of cloud computing Determine whether a project would be well suited for running in the cloud    Week 13  Readings / Discussions  Identify common challenges for providing reproducible software \u0026amp; workflow Describe how Julia\u0026rsquo;s package manager facilitate reproducible research Describe other common tools \u0026amp; strategies for facilitating reproducible research    Week 14  Project  Characterize performance of class project Characterize performance as a function of problem size Characterize performance as a function of number of processors (both strong and weak scaling) Predict how much performance could be improved with further optimization/parallelization Make code easy for others to reuse Make benchmarks easy to reproduce (for their own system) Complete/clean-up project documentation and packaging    Week 13-15  Explain reasons for observed performance of class project Share lessons learned in course of each class project  "},{"uri":"https://psuastro528.github.io/tips/","title":"How-To&#39;s &amp; Tips","tags":[],"description":"","content":"Tips  Using ICDS-ACI/Roar   Lab Exercises   Add your tips You can add your tips by creating a page in the content/tips directory and making a pull request at this site\u0026rsquo;s source. Thanks!\n"},{"uri":"https://psuastro528.github.io/tips/aci/","title":"Using ICDS-ACI/Roar","tags":[],"description":"","content":"Using Roar, aka Penn State\u0026rsquo;s ICDS-ACI  Creating Account on Roar   Initial Setup on Roar   SSH keys on ACI   Git   Pluto Notebooks on ACI   Jupyter Notebooks on ACI   ACI Remote Desktop   Running Jupyter on a GPU node   "},{"uri":"https://psuastro528.github.io/tips/aci/create_account/","title":"Creating Account on Roar","tags":[],"description":"","content":"Create Account at ICDS-ACI/Roar All students should request an ACI account before the second class meeting.\nOn the account request form,\n specify ebf11 as the sponsor account, list Astro528 as the research description, leave computational and Data Requirements box blank (since they already know what will be required for the class.)  Students who already have an ACI account should contact Justin Petucci (jmp579@psu.edu) to request that they add your account to the Astro 528 group.\n"},{"uri":"https://psuastro528.github.io/tips/aci/initial_setup/","title":"Initial Setup on Roar","tags":[],"description":"","content":"Initial Setup for Roar / ICDS-ACI   Request an account on \u0026ldquo;Roar\u0026rdquo;, the supercomputing facility run by Penn State\u0026rsquo;s Institute for Computational and Data Science (ICDS) Advanced CyberInfrastructure (ACI) group.\n  Once your account is active, go to the ACI portal, go to Clusters._ACI Shell Access.\n  Run \u0026lsquo;/gpfs/group/RISE/classroom/astro_528/scripts/updateKeys.sh’ to setup your ssh keys on ACI. You can accept most of the default prompts, but I recommend that you do NOT enter a password for your ssh key (we\u0026rsquo;ll discuss why in a few weeks). If you do use a password, then you’ll have extra work to do before Lab 7.\n  Authorize your ssh-keys on GitHub, as described in SSH keys on ACI.\n  If this is your first time on ACI (or first time using git on ACI), then configure git.\n  Make a few updates to your ACI environment. To make this easy, Justin has provided a script that you can easily run from ACI, /gpfs/group/RISE/classroom/astro_528/scripts/class_setup setup. If you’re curious, this will update your .bashrc startup script so that it automatically loads a module (so software for the course is in your path; module use /gpfs/group/RISE/sw7/modules), and move your .julia and .conda directories from the home filesystem to the work filesystem (since those can get rather large). If you already have customized your Roar envivironment for your research, then you may want to look at the script and make changes incrementally, so you don’t accidentally break something. If something does break, you can run /gpfs/group/RISE/classroom/astro_528/scripts/class_setup restore to undo the setup changes above.\n  Exit from the console and you should be good to go!\n  "},{"uri":"https://psuastro528.github.io/tips/aci/sshkeys/","title":"SSH keys on ACI","tags":[],"description":"","content":"For students using Roar for the first time, start a terminal on a Roar node, and run the following script\n/gpfs/group/RISE/classroom/astro_528/scripts/updateKeys.sh once at the beginning of the semester.\nThis will:\n Properly setting up keys for password-less ssh to compute nodes which is sometimes required by some distributed computing models, Generate keys for github, Modify ssh config file, and Set proper permissions on all ssh files/directories.  I recommend that you do NOT enter a password for your ssh key. (If you do use a password, then you’ll have extra work to do before Lab 7.)\nOnce you run the updateKeys.sh script, then you\u0026rsquo;ll need to add the new ssh key to the list of authorized keys for your github account in order to push code from ACI to github.\n Follow the link to your github repository for Lab 1 (the one like https://github.com/PsuAstro528/lab1-yourgithubid), Look for the green \u0026ldquo;Code\u0026rdquo; button near the top. There will be a message about not having SSH keys setup. Click \u0026ldquo;add a new public key\u0026rdquo;. In the Title box enter \u0026ldquo;ACI key\u0026rdquo; (or your preferred identifier). In the \u0026ldquo;Key\u0026rdquo; box paste the contents of the file ~/.ssh/id_rsa.pub from the ACI system. You can get your ssh public key by running \u0026lsquo;cat ~/.ssh/id_rsa.pub\u0026rsquo; from the command line while logged into Roar (or download it from the ACI portal by going to Files.Home Directory, clicking \u0026ldquo;Show Dotfiles\u0026rdquo; (at the top of the page), double clicking .ssh, clicking id_rsa.pub and then download. Then copy from your favorite text editor.)  "},{"uri":"https://psuastro528.github.io/tips/aci/git/","title":"Git","tags":[],"description":"","content":"For students using Roar for the first time, start a terminal on a Roar node, and run the following script\ngit config --global user.email \u0026#34;nobody@nowhere.org\u0026#34; git config --global user.name \u0026#34;Your Github Id\u0026#34; once at the beginning of the semester.\nSome students may wish to use your github id rather than your real name, and a non-email address like nobody@nowhere.org to protect their privacy.\n"},{"uri":"https://psuastro528.github.io/tips/aci/pluto/","title":"Pluto Notebooks on ACI","tags":[],"description":"","content":"Start a JupyterLab server configured to offer the Julia kernel on ACI Each time in the future you want to start a Jupyter notebook session on ICDS-ACI.\n Make sure you have an account on ACI and have completed the initial setup Browse to portal.aci.ics.psu.edu Login (if necessary) Click Interactive Apps on top menu Choose BYOE Jupyter Server_  Select:  Jupyter Interface: JupyterLab Environment setup: source /gpfs/group/RISE/sw7/conda_envs/julia/env/setup Allocation: ebf11_d_g_gc_default Number of hours: 2 hours (can choose longer if you plan to continue after class or outside of class) Number of cores: 2 (can choose more outside of class time once start parallel labs and project) Node type: ACI-b GPU (either No GPU or 1 GPU once start GPU lab or for project) Memory per core: 4 GB (can choose more outside of class time once start project)   Click Launch Click Launch Wait while your job starts   Once the Connect to JupyterLab Server button appears, click it  The top row of tiles (labeled \u0026ldquo;Notebook\u0026rdquo;) should include a tile labeled \u0026ldquo;Pluto.jl\u0026rdquo;. Click it. A new browser tab should open with a Pluto session. For a blank notebook, click \u0026ldquo;new notebook\u0026rdquo;, or enter the path to a notebook you\u0026rsquo;d like to open in the text box under \u0026ldquo;Open from file\u0026rdquo; and click the \u0026ldquo;Open\u0026rdquo; button. Do your work, remembering to save your notebook before you quit.   See Starting \u0026amp; Submittiing Assignments for more information on accessing and submitting assignments. When you\u0026rsquo;re done, close notebook tabs and click logout in upper right (of the Jupyter server session). Go back to the \u0026ldquo;My Interactive Sessions\u0026rdquo; tab in the ACI Portal, click \u0026ldquo;Delete\u0026rdquo; for this Sessions and confirm.  "},{"uri":"https://psuastro528.github.io/tips/aci/jupyter/","title":"Jupyter Notebooks on ACI","tags":[],"description":"","content":"Start a JupyterLab server configured to offer the Julia kernel on ACI Each time in the future you want to start a Jupyter notebook session on ICDS-ACI.\n Make sure you have an account on ACI and have completed the initial setup Browse to portal.aci.ics.psu.edu Login (if necessary) Click Interactive Apps on top menu Choose BYOE Jupyter Server_  Select:  Jupyter Interface: JupyterLab Environment setup: source /gpfs/group/RISE/sw7/conda_envs/julia/env/setup Allocation: ebf11_d_g_gc_default Number of hours: 2 hours (can choose longer if you plan to continue after class or outside of class) Number of cores: 2 (can choose more outside of class time once start parallel labs and project) Node type: ACI-b GPU (either No GPU or 1 GPU once start GPU lab or for project) Memory per core: 4 GB (can choose more outside of class time once start project)   Click Launch Wait while your job starts   Once the Connect to JupyterLab Server button appears, click it  The top row of tiles (labeled \u0026ldquo;Notebook\u0026rdquo;) should include a tile labeled \u0026ldquo;Julia 1.6.0\u0026rdquo;. Click it. A new browser tab should open where you can work with a Jupyter notebook using a Julia kernel interactively. Do your work, remembering to save your notebook after key edits and before you quit.   See Starting \u0026amp; Submittiing Assignments for more information on accessing and submitting assignments. When you\u0026rsquo;re done, close notebook tabs and click logout in upper right (of the Jupyter server session). Go back to the \u0026ldquo;My Interactive Sessions\u0026rdquo; tab in the ACI Portal, click \u0026ldquo;Delete\u0026rdquo; for this Sessions and confirm.  "},{"uri":"https://psuastro528.github.io/tips/aci/remote_desktop/","title":"ACI Remote Desktop","tags":[],"description":"","content":"Starting a Remote Interactive Desktop session on ACI To start a remote Interactive Desktop session:\n Log into the ICDS-ACI Portal at https://portal.aci.ics.psu.edu/. Choose Interactive Apps, RHEL7 Interactive Desktop. Choose MATE (Gnome 2) for Dektop Environment. Select \u0026ldquo;ebf11_d_g_gc_default\u0026rdquo; for allocation and \u0026ldquo;ACI-b GPU Core\u0026rdquo; for node type. (Alternatively, one might choose open for allocation and \u0026ldquo;ACI-i\u0026rdquo; for node type.) Choose number of hours that you will be using the Interactive Desktop for this session. Click \u0026ldquo;Launch\u0026rdquo; Wait a little while, as your the system will submit a job to the scheduler. Once you have a button to start your session, click it. A new browser tab will open with a virtual desktop.  Starting Julia from the terminal  Open a terminal window by clicking Applications, System Tools, Terminal. If you ran the /gpfs/group/RISE/classroom/astro_528/scripts/class_setup setup at the beginning of the smester, then julia 1.6.0 will already be in your path. If not, then from the terminal, setup your environment variables to know about Julia 1.6 by running:  module use /gpfs/group/RISE/sw7/modules module load julia/1.6.0  Start Julia by running  julia Starting a Pluto session  If you\u0026rsquo;d like to launch a Pluto notebook server, you can install Pluto from within Julia with  using Pkg Pkg.add(\u0026#34;Pluto\u0026#34;) and then start it by running\nusing Pluto Pluto.run() Starting a Jupyter notebook session  If you\u0026rsquo;d like to launch a Jupyter notebook server, you can install IJulia from within Julia with  using Pkg Pkg.add(\u0026#34;IJulia\u0026#34;) and then start the Jupyter notebook by running\nusing IJulia notebook() "},{"uri":"https://psuastro528.github.io/tips/aci/jupyter_gpu_nodes/","title":"Running Jupyter on a GPU node","tags":[],"description":"","content":"TODO: Need to Update for Fall 2021 You can currently access a K4000 GPU on the ACI interactive nodes from the Jupyter notebook server. Students in the class can access more powerful P100 GPUs (with support for double precission arithmetic) via the CyberLAMP cluster by specifying the following PBS options:\n -A cyberlamp_class -l qos=cl_class -l nodes=1:ppn=1:gpus=1  If you would like to run Jupyter on a GPU node, then you can try the following instructions kindly provided by Justin Petucci:\n Download firefox singularity image:  mkdir -p ~/work/sw/singularity cd ~/work/sw/singularity singularity pull shub://jpetucci/firefox_icsaci  Launch an Interactive Desktop session from OpenOnDemand\n  Submit an interactive batch job (you will need to change the resources like memory and walltime based on your needs):\n  qsub -I -X -A cyberlamp_class -l qos=cl_class -l nodes=1:ppn=1:gpus=1 -l walltime=2:00:00 After your job starts, start a screen session:  screen Load the Python module:  module load python/3.6.3-anaconda5.0.1 Start Jupyter:  jupyter notebook  Copy the link for the notebook server. For example, the address might look like http://localhost:8888/?token=de99f0c76cbcfcb183693ff0491f00f278d781bb3586ea8e . Do not try to use the address given as an example.\n  Detach the screen session: press control+A+D to detach from the screen session\n  Launch firefox:\n  singularity run ~/work/sw/singularity/jpetucci-firefox_icsaci-master-latest.simg Paste the address of the notebook server into firefox  Good luck. If you find corrections, pleaset submit a PR to improve these instructions.\n"},{"uri":"https://psuastro528.github.io/tips/submitting/","title":"Lab Exercises","tags":[],"description":"","content":"Working with Lab/Homework Exercises  Starting Labs     Committing changes     Testing your labs     Submitting Labs     Logging out     "},{"uri":"https://psuastro528.github.io/tips/submitting/starting/","title":"Starting Labs","tags":[],"description":"","content":"Instructions for Starting Labs via ICS ACI Portal  Clone your Github Repository on ACI (only need to do once per assignment) Open notebook Save and commit changes as you go   Clone your github repository to begin a new assignment  Request a \u0026ldquo;BYOE Jupyter server\u0026rdquo; session via the ACI portal (see getting started) While waiting for it to start, let\u0026rsquo;s get the url for the repo to be cloned.  If you haven\u0026rsquo;t followed the link to create your repo for this week\u0026rsquo;s assignment, do that now. Following that link should trigger GitHub to create a private git repository named labN-GITHUBID (where N is the week number and GITHUBID is the GitHub username that you\u0026rsquo;re logged in as at the time you follow the link). Navigate to the github repository you\u0026rsquo;ll be using in your browser. Click Clone or download. If it says \u0026ldquo;Clone with https\u0026rdquo;, click \u0026ldquo;Use ssh\u0026rdquo;. Click the clipboard icon to copy the url onto your clipboard   Return to your browser tab with \u0026ldquo;My Interactive Sessions\u0026rdquo;. Hopefully, there\u0026rsquo;s now a Connect to Jupyter Server button. Click it. Go to the newly opened tab, you\u0026rsquo;ll have a Jupyter Lab Server. If you don\u0026rsquo;t see tiles for Python, Julia and Pluto Notebooks, then click File.New_Launcher. Find the Terminal tile or in the menu system, File.New.Terminal. In the new terminal tab, clone your github repo by running  git clone REPO_URL # where REPO_URL is what you\u0026#39;ll paste from the clipboard  Change into the directory that was created for the repository (we\u0026rsquo;ll call REPO_DIR) and setup all the package dependencies required (as specified by the Project.toml or test/Project.toml file or embedded in Pluto notebooks).  cd REPO_DIR julia --project -e \u0026#39;using Pkg; Pkg.instantiate(); \u0026#39;  Optional (can do later if needed): In case the instructor makes changes to the template, it would be useful to be able to merge in those changes easily. To prepare for that, let\u0026rsquo;s set a remote upstream repository. Here I assume that your REPO_URL was https://github.com/GITHUBID/example-GITHUBID.git. Notice that we\u0026rsquo;re replacing the first GITHUB id by the organization name \u0026ldquo;PsuAstro528\u0026rdquo; and remove the \u0026ldquo;-GITHUBID\u0026rdquo; at the end.  git remote add upstream git@github.com:PsuAstro528/example.git Unfortunately, Pluto notebooks can be a bit finicky. So in many cases it may make more sense to just download the replacement notebook from the starter repository and overwrite your.\nIf you did want to attempt to merge changes from the starting repository (e.g., for files other than Pluto notebooks), then you can run either\ngit pull upstream main or if you have a newer version of git\ngit pull upstream main --allow-unrelated-histories  Open notebook  Go back to the browser tab with your Jupyter Lab server running. If you do not see the tiles for Python, Julia and Pluto, then go to File.New_Launcher. If the lab contains Pluto notebooks (most lab exercises ending in .jl), then  Click the Pluto tile. A new tab will open in your browser for the Pluto session. In the \u0026ldquo;Open from file\u0026rdquo; box, type the path to the directory containing the repo, a forward slash and the name of the first notebook (e.g., \u0026lsquo;lab1-yourgithubid/ex1.jl\u0026rsquo;). Tab completion is often helpful.   If the lab contains Jupyter notebooks (files ending in .ipynb), then:  Click the directory name of the repository that you just installed. (If you don\u0026rsquo;t see a list of files on the left, then click the Folder icon in the upper left.) Double click on the name of the Jupyter notebook file (e.g., ex1.ipynb) A new tab within the JupyerLab browser tab will open with the Jupyter notebook.   Do your work in the notebook. When you\u0026rsquo;re done with a notebook, make sure it is saved (Ctrl+S) and close the tab.   Commit your changes Ideally, you\u0026rsquo;d commit small changes as you go. At a minimum, make sure that you commit your changes each time you are wrapping up a coding session or about to take a break.\n"},{"uri":"https://psuastro528.github.io/tips/submitting/commit/","title":"Committing changes","tags":[],"description":"","content":" Make sure you\u0026rsquo;ve saved all your changes (Ctrl+S) To commit changes to a single file:  git add ex1.jl git commit -m \u0026#34;note describing this change\u0026#34;  To commit your work on all files beginning with ex:  git add ex* git commit -m \u0026#34;note describing these changes\u0026#34; "},{"uri":"https://psuastro528.github.io/tips/submitting/testing/","title":"Testing your labs","tags":[],"description":"","content":"Test your code  Make sure you\u0026rsquo;ve saved all your changes (Ctrl+S) Make sure you\u0026rsquo;ve committed your changes to your local repository. Check that your code passes any tests embedded in each notebook as you go. To test a single exercise, you can use a terminal window, change into your repo directory, and run either:  julia --project=test test/test1.jl  To test al the exercises, you can run  julia --project=test test/runtests.jl   Once you\u0026rsquo;ve pushed your changes, it\u0026rsquo;s also good to double check that your lab passes the same test via the continuous integration testing provided by GitHub actions.\n  If you get an error message about packages not being installed, then run\n  julia --project=test -e \u0026#39;using Pkg; Pkg.instantiate(); \u0026#39; to make sure all the packages specified in test/Project.toml are installed before running your tests.\n"},{"uri":"https://psuastro528.github.io/tips/submitting/submitting/","title":"Submitting Labs","tags":[],"description":"","content":" Commit your changes Convert any Jupyter notebooks to Markdown Commit your work and Push to Github Review the feedback on your submission   Before you submit Ideally, you\u0026rsquo;d commit small changes as you go. At a minimum, make sure that you commit your changes to your local repository each time you are wrapping up a coding session or about to take a break. Consider testing your code on ACI (or you local computer) before submitting the final version of your code.\n Convert any Jupyter notebooks to Markdown   You\u0026rsquo;ll skip this step for any assignments that are Pluto notebooks, since Pluto notebooks are already valid Julia code.\n  Return to the terminal tab (or open a new one) and make sure you\u0026rsquo;re in your repo\u0026rsquo;s directory\n  Run the following commands\n  julia --project=. -e \u0026#39;using Weave; convert_doc(\u0026#34;NOTEBOOK_NAME.ipynb\u0026#34;,\u0026#34;NOTEBOOK_NAME.jmd\u0026#34;)\u0026#39; git add NOTEBOOK_NAME.jmd # Only need to do this once per new file you create if you use the -a option with \u0026#34;git commit\u0026#34; below. Otherwise, need to do each time you want to deposit a new version of the file into your respository.  Commit your changes and push to Github  Return to the terminal tab, make sure you\u0026rsquo;re in your repo\u0026rsquo;s directory. Run the following commands  git commit -a -m \u0026#34;Completed\u0026#34; # Commit all changes you\u0026#39;ve made to files being tracked and lets me know that you\u0026#39;re done with the assignment git push # Uploads your progress to github   Review the feedback on your submission  Browse to your github repository. GitHub classroom opens a pull request for each assignment automatrically Click Pull Requests, then click on Feedback, the name of the pull request that GitHub classroom created for us. In the \u0026ldquo;Checks\u0026rdquo; tab, click \u0026ldquo;Test notebook\u0026rdquo;. If there\u0026rsquo;s a red x next to the \u0026ldquo;test (\u0026hellip;)\u0026rdquo; job, then click on it to see the results of the continuous integration testing. This should happen several minutes after you push your changes. If you notice a problem that you\u0026rsquo;d like to fix, then you can make, commit and push more changes. In the Conversations tab (default), you and the instructor can discuss the pull request in general using the text box at the bottom of the page. In the \u0026ldquo;Files changed\u0026rdquo; tab, the instructor can provide comments on specific lines of your submission.  "},{"uri":"https://psuastro528.github.io/tips/submitting/exiting/","title":"Logging out","tags":[],"description":"","content":"When you\u0026rsquo;re all done with a lab (or just done for now):\n Save all changes to notebooks (Ctrl+S) Commit any changes to your repository, consider pushing those commits to GitHub. Close browser tabs for your Pluto session, any Jupyter notebooks, and the Jupyter Lab tab. Go back to the \u0026ldquo;My Interactive Sessions\u0026rdquo; tab in the ACI Portal, click \u0026ldquo;Delete\u0026rdquo; for this Sessions and confirm.  "},{"uri":"https://psuastro528.github.io/resources/","title":"Resources","tags":[],"description":"","content":"  Online Textbooks \u0026amp; Tutorials     Julia     Software     Hardware Resources     Improve this page You can add your suggestions by submitting a pull request for editing this file\u0026rsquo;s source. Thanks!\n"},{"uri":"https://psuastro528.github.io/resources/textbooks/","title":"Online Textbooks &amp; Tutorials","tags":[],"description":"","content":"Julia  Think Julia: How to Think Like a Computer Scientist Statistics with Julia: Fundamentals for Data Science, Machine Learning and Artificial Intelligence. by Yoni Nazarathy and Hayden Klok, Springer Series in the Data Sciences, PDF of draft version. (I recommend using the version avaliable online for free.)  Related Courses   Applications of Parallel Computers (UC Berkeley CS 267)\n  Introduction to Computational Thinking (MIT 18.S191)\n  Quantitative Economics with Julia\n  Parallel Programming  Lawrence Livermore National Laboratory  Introduction to Parallel Computing by Blaise Barney OpenMP Message Passing Interface (MPI) OpenACC slides from NVIDIA   Texas Advanced Computing Center  Introduction to High-Performance Computing by Eijkhout, Chow \u0026amp; van de Geijn (2006) Parallel Programming in MPI and OpenMP by Eijkhout (2017) \u0026mdash; pdf version \u0026mdash; source    Improve this page You can add your suggestions by submitting a pull request for editing this file\u0026rsquo;s source. Thanks!\n"},{"uri":"https://psuastro528.github.io/resources/julia/","title":"Julia","tags":[],"description":"","content":"Julia  Julia Manual Think Julia: How to Think Like a Computer Scientist Introcution to Applied Linear Algebra: Vectors, Matrices and Least Squares: Julia Language Companion The Fast Track to Julia 1.0 First Contact with Julia Learn Julia in Y Minutes Julia by Example Noteworthy Differences from other Languages Why Julia? Julia Tutorials Code Style Blue Julia Blog Julia Discourse Forum Julia on StackOverflow Julia Twitter feed Julia Slack channel  Pluto.jl  Basic Commands in Pluto  Improve this page You can add your suggestions by submitting a pull request for editing this file\u0026rsquo;s source. Thanks!\n"},{"uri":"https://psuastro528.github.io/resources/software/","title":"Software","tags":[],"description":"","content":"Julia Resources Jupyter  DataQuest Tutorial on Jupyter Setting up Jupyter for Julia Jupyter with multiple languages Diffing Jupyter notebooks Binder for sharing Jupyter notebooks  Git  GitHub Guides Git for Everyone Data Camp on Git Git Desktop  Linux Command Line  Data Camp on Shell Intro to Linux Command-Line for Beginners  Docker  Docker Orientation Docker for homework exercises: Github Repo Cloud.Docker.com Repo Jupyter Docker Stacks: More ready-to-run Docker images containing Jupyter applications User guide Setting up Docker on Linux How to remove Docker containers, images, volumes, networks )  Docker containers:  Data Science Notebook Old custom container for Spring 2019  Licensing  Choose an open source license  Improve this page You can add your suggestions by submitting a pull request for editing this file\u0026rsquo;s source. Thanks!\n"},{"uri":"https://psuastro528.github.io/resources/hardware/","title":"Hardware Resources","tags":[],"description":"","content":"Penn State Resources Roar: Institue for Computational \u0026amp; Data Sciences\u0026rsquo;s Advanced CyberInfrastructure (ICDS-ACI)  Getting Started on ICS-ACI Roar User\u0026rsquo;s Guide Roar Training Series Roar On-demand Tutorial Videos Open On Demand Portal (written for OSU, but much of info is similar)  Cloud Computing  Penn State Cloud Program  Cloud Computing  JuliaHub Domino Data Labs Amazon EC2 Google Compute Engine Google Colaboratory GPU acceleration for Julia using Google Colaboratory  Improve this page You can add your suggestions by submitting a pull request for editing this file\u0026rsquo;s source. Thanks!\n"},{"uri":"https://psuastro528.github.io/tools_used/","title":"The Making of Astro528","tags":[],"description":"","content":"Tools \u0026amp; Workflows for Astro 528 The following notes are primarily to serve as checklists, so the instructor can efficiently and reliably get stuff done for the course.\nI\u0026rsquo;d be happy to learn if they are useful to others. Feel free to create issues with suggestions and/or to submit pull requests with improvements via the github repo for the course website source.\nWorkflows: Software tools Acknowledgments "},{"uri":"https://psuastro528.github.io/tools_used/creating_labs/","title":"Creating lab assignments","tags":[],"description":"","content":"Workflow for creating lab assignments Create Development repostiory on GitHub:  Create an empty private repository named labN-dev at GitHub.  Go to the class organization page at GitHub, click New Repository Name: labN-dev Description: Lab N Private Uncheck Initialize README, .gitignore: None, License: None Create repository- Change into directory of lab exercises    Create local development repository  Change into directory of lab exercises cd ~/Teach/Astro528/Fall2021/exercises Create new Julia package with Project.toml file for the lab and add common packages.  using Pkg Pkg.generate(\u0026#34;labN\u0026#34;) Pkg.activate(\u0026#34;labN\u0026#34;) Pkg.add([\u0026#34;InteractiveUtils\u0026#34;,\u0026#34;Markdown\u0026#34;,\u0026#34;PlutoUI\u0026#34;,\u0026#34;PlutoTeachingTools\u0026#34;,\u0026#34;LaTeXStrings\u0026#34;])  Add template files from template repository (lab-template) into labN-dev directory  mv labN labN-dev cd labN-dev cp -r ../lab-template/* . cp -r ../lab-template/{.gitignore,.github} . Make local repository and commit template files git init git add .gitignore .github docker-compose.yml environment.yml LICENSE README.md src test git commit -m \u0026#34;template\u0026#34; Rename to use main branch, connect to remote repo and push to GitHub git branch -m master main git remote add origin git@github.com:PsuAstro528/labN-dev.git git push -u origin main Create \u0026amp; Switch to solution branch git checkout -b solution Make exercises (named exN.jl or exN.ipynb) and tests (named test/testN.jl)  Indicate code to be removed with missing in Pluto notebooks, so its easy to find. For Jupyter notebooks add comment SOLUTION.  git add ex?.jl ex?.ipynb test/test?.jl git commit -m \u0026#34;new exercise\u0026#34; Setup test directory Once assignments is ready for continuous integration testing, create/update the Project.toml file in test directory to include needed packages:\n  julia -e 'using Pkg; Pkg.activate(\u0026quot;test\u0026quot;); Pkg.add([\u0026quot;Test\u0026quot;,\u0026quot;InteractiveUtils\u0026quot;,\u0026quot;Markdown\u0026quot;,\u0026quot;PlutoUI\u0026quot;,\u0026quot;PlutoTeachingTools\u0026quot;,\u0026quot;LaTeXStrings\u0026quot;])'\n  Add any other packages required by any notebook to test/Project.toml\n  Test each exercise as you go: julia --project=test -e 'include(\u0026quot;test/test1.jl\u0026quot;)'\n  Test as a group: julia --project=test -e 'include(\u0026quot;test/runtests.jl\u0026quot;)'\n  Add Project.toml to the repo and make remote solution branch track local solution branch\n  git add test/Project.toml test/test?.jl git commit -m \u0026#34;tests for exN\u0026#34; git push -u origin solution` Check solution passes CI testing Check status of tests from Github Actions tab https://github.com/PsuAstro528/labN-dev/actions .\nMake Julia Markdown version of solutions  Once it passes CI tests and you\u0026rsquo;re ready to share, use Weave package to convert any Jupyter notebooks into jmd files.  julia -e \u0026#39;using Weave; convert_doc(\u0026#34;ex1.ipynb\u0026#34;,\u0026#34;ex1.jmd\u0026#34;);\u0026#39; julia -e \u0026#39;using Weave; convert_doc(\u0026#34;ex2.ipynb\u0026#34;,\u0026#34;ex2.jmd\u0026#34;);\u0026#39; julia -e \u0026#39;using Weave; convert_doc(\u0026#34;exN.ipynb\u0026#34;,\u0026#34;exN.jmd\u0026#34;);\u0026#39;  Add and commit exN.jl and exN.jmd to solution branch  git add ex?.jl ex?.jmd; git commit -m \u0026#34;convert from ipynb\u0026#34;  Checkout main branch and add notebook, Project and test files from solution branch.  git checkout main git checkout solution exN.jl git checkout solution exN.jmd git checkout solution test/testN.jl git checkout solution Project.toml git checkout solution test/Project.toml  Edit each exN.jl and/or exN.jmd to remove code  Search for SOLUTION and remove code not for students to see (Note to future self: Should I automate this?) Recreate any cleaned Jupyter notebook files exN.ipynb    julia -e \u0026#39;using Weave; convert_doc(\u0026#34;ex1.jmd\u0026#34;,\u0026#34;ex1.ipynb\u0026#34;);\u0026#39; julia -e \u0026#39;using Weave; convert_doc(\u0026#34;ex2.jmd\u0026#34;,\u0026#34;ex2.ipynb\u0026#34;);\u0026#39; julia -e \u0026#39;using Weave; convert_doc(\u0026#34;exN.jmd\u0026#34;,\u0026#34;exN.ipynb\u0026#34;);\u0026#39;  Check that you\u0026rsquo;re happy with the resulting notebooks, then add \u0026amp; commit them to main branch.  git add ex?.jl ex?.jmd ex?.ipynb test/test?.jl git commit -m \u0026#34;cleaned ex\u0026#34; git push Create Starer Repository for Students Create starter repostiory on GitHub.com from development repository\n Create an empty public lab named labN-start at GitHub as part of the organization for the class.  Go to https://github.com/PsuAstro528, click New Description: Lab N: List super-short lesson goals Public Uncheck Initialize README, .gitignore: None, License: None Create repository   Change into directory of lab exercises cd ~/Teach/Astro528/Fall2021/exercises cp -r labN-dev labN-start cd labN-start Make sure you\u0026rsquo;re in the labN-start subdirectory rm -rf .git git init git remote add origin git@github.com:PsuAstro528/labN-start.git  git add * git add .gitignore .github # .travis.yml git commit -m \u0026#34;init\u0026#34; git branch -m master main git push --set-upstream origin main Make original branch for comparison purposes and switch back to main branch\ngit checkout -b original git push -u origin original git checkout main Check that you\u0026rsquo;re happy with the labN-start repository\nServe HTML version of labs Set GitHub to serve html versions of labs.\n Wait until ExportPluto action builds html files Go to Settings.Pages https://github.com/PsuAstro528/labN-start/settings/pages For Soruce, select branch gh-pages. Save.  Distribute new laboratory assignment Go to https://classroom.github.com/classrooms\n Choose class New Assignment Create an Individual Assignment  Title: Astro 528 Lab N Repo prefix: labN Private Enable assignment invitation URL Add your starter code from GitHub: https://github.com/PsuAstro528/labN-start Deadline: Sunday 23:59pm Create Assignment   Copy Invitation Link and send it to students in a Canvas announcement  "},{"uri":"https://psuastro528.github.io/lessons/week1/","title":"Week 1: Development Tools","tags":[],"description":"","content":"Lessons / Resources  Course Overview   Learning goals   Readings    Lab 1 Thursday Discussion  Instructions for using ACI  Create Account on Roar/ICDS-ACI Initial Setup on ACI Pluto Notebooks on ACI Starting \u0026amp; Submitting Assignments  Install Julia \u0026amp; Pluto on your local machine (optional)  See instructions from MIT Intro to Computational Thinking course (For your lab assignments, you\u0026rsquo;ll use Step 2b: Open an existing notebook file, rather than Step 1a Open a notebook from the web.)  "},{"uri":"https://psuastro528.github.io/lessons/week1/course_overview/","title":"Course Overview","tags":[],"description":"","content":" ## Welcome Penn State Astro 528 High-Performance Scientific Computing for Astrophysics Eric Ford --- ## Safety \u0026 Respect ___ ### Masks - As of August 4, all students, faculty, staff and visitors are required to wear masks at all times in all indoor public spaces, including classrooms. - Any students who choose to join class from Davey 538 are expected to wear masks properly, covering the bridge of their nose and under their chin. - Studies indicate that surgical masks are much more effective than cotton masks. ___ ### Physical Distancing - While some students may be comfortable working closely with a partner, others may prefer to maintain physical distance. - Students are expected to respect others' requests for physical distancing. - It's ok to change one's mind mid-semester, as we learn more about the situation. ___ ### Please err on the side of caution - If not feeling well, please stay home. - If have reason to believe may have been exposed, please stay home. ___ - Being extra cautious during class will help peers and instructor to focus on learning, rather than worrying about their safety. - If engage in less safe activities outside of class, please take precautions. --- ## Course goals Enhance your skills for scientific computing - Increase your productivity + Choose right tool for right task + Reduce time debugging + Improve reproducibility - Enable you to + Analyze \"Big Data\" + Increase resolution of simulations + Include more complex physics + Increase impact of your software --- ### Course outline - Software Development Practices - Writing efficient serial code - Parallelizing code efficiently ___ ### Software Development Practices Note: Ask what students think of when they hear \"software development practices\". ___ ### Software Development Practices - Version control - Testing \u0026 Continuous Integration - Debugging - Documenting \u0026 Literate Programming - Coding standards - Reviewing code - Reproducibility - Workflow ___ ### Writing efficient serial code - Processor architectures - Memory hierarchy - Networking - Programming languages - Choosing algorithms - Benchmarking - Profiling - Compiler optimizations - Optimizing ___ ### Parallelizing code efficiently - Shared-memory (e.g., one workstation) - Distributed-memory (e.g., cluster) - Accelerators + GPUs + TPUs (volunteers?) - Cloud Note: Ask if any students already using parallel codes. If so, how were they parallelized? --- ### Specific Objectives - Increase technical knowledge + Readings, online lessons \u0026 class discussion - Practice fundamentals on a small scale + Lab/homework exercises + Make lots of mistakes quickly \u0026 learn from them + Make good habits routine - Transfer skills into real work environment + Class project + Apply new skills to your research + Build deeper expertise in topics most relevant to you + Share what you learn with the class ___ ### Readings, presentation ![textbooks](/images/textbooks.jpg) ___ ### Readings, presentation - Textbooks + _Writing Scientific Software: A Guide to Good Style_ + _ThinkJulia: How to Think like a Computer Scientist_ + _Introduction to High Performance Computing for Scientists and Engineers_ (definitely optional) - Online PDFs - Online tutorials - Recordings (will try, no guaranty) Note: Ask students if they would like to record classes. Ask students if they like the idea of a pre-recorded lesson prior to class. ___ ### Class discussions - Let's learn from each other - Introductions + Name (\u0026 pronouns if you like) + Department (if not Astro) + Year of your program + What skill you hope to strengthen through this course --- ## Let's get you set up ### Accounts - Penn State - [Roar (ICDS-ACI/Roar)](https://ics.psu.edu/computing-services/account-setup/) - [Github](https://github.com) - [TopHat](https://www.tophat.psu.edu/)  ___ ### Get Started For your first lab session, you'll: - Follow link for lab 1 from Canvas announcement - View _your_ new repository on [Github](https://github.com) - Login to where you'll run your code + [ICDS-ACI Portal](http://portal.aci.ics.psu.edu/) + [Install locally](https://julialang.org/downloads) (not for today) - _Clone_ your \"repo\" for the lab - Start Pluto notebook server - Start working through ex1.jl, then ex2.jl, ... There are [more detailed instructions](/tips) on the website. ___ ### Commiting Changes - [_Commit_ your changes to local \"repo\"](https://psuastro528.github.io/tips/submitting/commit/) - Can commit Pluto notebooks directly as .jl files. - Later one when using Jupyter notebooks + First make a markdown version for human-readable version control + Use Weave's convert_doc to convert Jupyter notebook (ex1.ipynb) into Julia Markdown (ex1.jmd) + Add \u0026 commit both ex?.ipynb and ex?.jmd files to your local repo - Before signing off for the session, [\"push\" your commits to GitHub](https://psuastro528.github.io/tips/submitting/submitting/#commit-push) - See [more detailed instructions](/tips/submitting) \u0026 ask questions as you go ___  # Questions? [Jump to start](#/0/0\")       function initSlides() { Reveal.initialize({ embedded : true, controls : \"true\", center: \"false\" ,\thistory: \"false\" , progress: \"true\" , transition: \"slide\", dependencies: [ { src: '\\/revealjs\\/lib\\/js\\/classList.js\"', condition: function() { return !document.body.classList; } }, { src: '\\/revealjs\\/plugin\\/markdown\\/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '\\/revealjs\\/plugin\\/markdown\\/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '\\/revealjs\\/plugin\\/highlight\\/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '\\/revealjs\\/plugin\\/zoom-js\\/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '\\/revealjs\\/plugin\\/notes\\/notes.js', async: true, condition: function() { return !!document.body.classList; } } ] }); }   See it fullscreen var toto = document.getElementById('slideContent').innerHTML document.getElementById('slideFrame').contentWindow.document.write(document.getElementById('slideContent').innerHTML); document.getElementById('slideContent').remove(); document.addEventListener(\"DOMContentLoaded\",function(){ setTimeout(function () { document.getElementById('slideFrame').contentWindow.initSlides() ; }, 2000); }); function slideFullScreen() { document.open(); document.write(toto); document.close(); initSlides() }  "},{"uri":"https://psuastro528.github.io/lessons/week1/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 1  Understand course goals, organization and expectations Recognize opportunities to improve productivity through software development practices Exercise 1: Use software development tools  Access ICDS-ACI Portal\u0026rsquo;s Jupyter Server with BYOE (bring your own environment) Optionally setup Julia+Pluto+git on your own computer Use Git \u0026amp; GitHub.com for retrieving and submitting lab assignments Use variables, strings and Markdown in Julia Use unit tests   Exercise 2: Floating Point Arithmetic, Functions  Write code as a function Use/write tests of code Recognize potential pitfalls with floating-point arithmetic   Exercise 3: Develop your personal goals for semester  Lessons along the way  Types: Strings, Floating point types Functions, Docstrings Modules, Packages, Namespace using/import, include Pseudo-random numbers Broadcasting Type stability Online algorithms Writing markdown text  "},{"uri":"https://psuastro528.github.io/lessons/week1/read/","title":"Readings","tags":[],"description":"","content":"Week 1:  Prior to Monday\u0026rsquo;s class  Think Julia Ch 1: The Way of the Program Github tutorial (at least through “Fork a Repo”,)  Follow advice for \u0026ldquo;Connecting over SSH\u0026rdquo; rather than \u0026ldquo;Connecting over HTTPS\u0026rdquo;     Prior to Thursday\u0026rsquo;s class  Setup account on Roar/ICDS-ACI The Rationale for Julia: Getting Started with Julia Programming (6pgs avaliable via \u0026ldquo;First Pages\u0026rdquo; as Preview/\u0026ldquo;Look Inside!\u0026quot;) Writing Scientific Software Ch 2 (22pgs): Scientific Computation and numerical analysis If it will help you with the lab: Think Julia Ch 2: Variables, Expressions \u0026amp; Statements    "},{"uri":"https://psuastro528.github.io/lessons/week1/lab/","title":"Exercises","tags":[],"description":"","content":" Lab 1: Tools \u0026amp; Fundamentals: Floating Point Arithmetic, Functions, Tests (Due Sept 2)\n Exercise 1: Get started using core development tools  ICDS-ACI portal git GitHub.com Julia Pluto Notebooks   Exercise 2: Floating Point Arithmetic, Functions, Tests Exercise 3: Personal Goals (save at least 15 minutes for this one)   "},{"uri":"https://psuastro528.github.io/tools_used/reviewing_labs/","title":"Reviewing lab assignments","tags":[],"description":"","content":"Workflow for reviewing lab assignments   Go to GitHub Classroom\n Click class Click Assignment    To review a student\u0026rsquo;s work:\n Click \u0026ldquo;View repository\u0026rdquo; next to student\u0026rsquo;s github id Look if \u0026ldquo;Pull requests\u0026rdquo; has a number \u0026gt;=1 after it. If so:  Click \u0026ldquo;Pull requests\u0026rdquo;, click pull request name Click \u0026ldquo;Checks\u0026rdquo; and see that Travis returns \u0026ldquo;Succes\u0026rdquo; Click \u0026ldquo;Files changed\u0026rdquo; Click \u0026ldquo;File filter\u0026hellip;\u0026quot;, select .jmd (or click \u0026ldquo;Jump to\u0026hellip;\u0026quot;, select ex.jmd) Review differences Click the blue \u0026ldquo;+\u0026rdquo;, enter comments, \u0026ldquo;Add single comment\u0026rdquo;.   Else:  click \u0026ldquo;New pull request\u0026rdquo; Select \u0026ldquo;base: original \u0026lt;- compare:main\u0026rdquo; Click \u0026ldquo;N changed files\u0026rdquo; Click each *.jmd file Review differences If want to leave comments, then go ahead and make pull request      "},{"uri":"https://psuastro528.github.io/tools_used/pluto_slides/","title":"Pluto for Slides","tags":[],"description":"","content":"See this post\n"},{"uri":"https://psuastro528.github.io/tools_used/pluto_pkg_management/","title":"Updating Pluto Package Environment","tags":[],"description":"","content":"See Pluto wiki\n"},{"uri":"https://psuastro528.github.io/tools_used/tools_used/","title":"Technology used","tags":[],"description":"","content":"Tools for Creating \u0026amp; Maintaining Course Content GitHub  Share lessons \u0026amp; assignments, version control, backup Provide feedback to students via pull requests Hosts website, lesson, assignments  GitHub Classroom  For distributing lessons \u0026amp; assignments via individual private repositories, providing feedback via GitHub pull requests.   Julia Programming language  For a modern high-performance high-level programming language capable of parallelization at all scales   Pluto notebooks  For integrated lessons, tutorials, labs encouraging literate computing and avoiding confusion due to notebook state   Jupyter notebooks  For integrated lessons, tutorials, labs encouraging literate computing Julia Markdown: For integrating documentation and code with human-readable version control Weave:  Converts draft Jupyter notebooks into Julia Markdown Quickly update and regenerate Jupyter notebooks from updated Julia Markdown. Converts student Jupyter notebooks into Julia Markdown Makes GitHub diffs human readable and comments on pull requests useful   NBInclude: For testing student\u0026rsquo;s code provided in Jupyter notebook form NBDime: For diffing Jupyter notebooks   Running Julia without local installation hassles  Penn State ICS-ACI: Primary compute server JuliaBox: Wise to have a backup way to get work done if students have trouble with ACI Binder: For easily sharing notebook results with others 1 Customized Docker container: Provides reproducible computing environment for students, testing, sharing, etc.   Web site  Hugo: Fast static-site generator for maintaining website DocDock theme: Base theme used Reveal.js: For building slideshows for class discussion and learning outside of classroom Pennsylvania Palette: Customizations   Improve this page You can add your suggestions by submitting a pull request for editing this file\u0026rsquo;s source. Thanks!\n  I found that having a Project.toml file in the root directory of the repo creates problems for mybinder.org\u0026rsquo;s ability to autoinstall the proper packages listed from the REQUIRE file. My work around was to place the Project.toml file in the test subdirectory. \u0026#x21a9;\u0026#xfe0e;\n   "},{"uri":"https://psuastro528.github.io/tools_used/setup_website/","title":"Creating the website","tags":[],"description":"","content":"Creating the Website for Astro 528 Astro 528\u0026rsquo;s website uses the Hugo, a fast static-site generator, the DocDock theme theme, Reveal.js for building slide decks to organize class discussion and serve as a reference for students outside of classroom, and and GitHub pages for html hosting.\nUnforuntatley, I didn\u0026rsquo;t take detailed notes on the initial setup. Basically, I followed the instructions here, using option 1 (\u0026ldquo;Install DocDock as git submodule\u0026rdquo;). For customizations, see:\n config.toml (website menus, layout, etc) layouts/partials/ (load theme.css and add footer) static/css/theme.css (color scheme for website) static/revealjs/css/theme/psu.css (color scheme for slides),  The Canvas LMS provides email announcements and gradebook functionality. I embedded the main course website into Canvas\u0026rsquo;s main and syllabus page using\n\u0026lt;p\u0026gt;\u0026lt;iframe src=\u0026#34;https://psuastro528.github.io/index.html\u0026#34; width=\u0026#34;100%\u0026#34; height=\u0026#34;640\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;\u0026lt;/p\u0026gt; "},{"uri":"https://psuastro528.github.io/tools_used/update_website/","title":"Updating the website","tags":[],"description":"","content":"Updating the Website for Astro 528 Astro 528 uses the hugo static site generator, the docdock theme, github pages for html hosting, and github actions for triggering builds. Once those are setup, then updating the website can be done as follows:\nChange into the website source directory, pull any updates from other machines, and start the hugo server locally\ncd Teach/Astro528/Spring2019/Spring2019-website-src git pull hugo server Only edit files in content folder and its subfolders.\nView resulting site in your browser, typically localhost:1313. Make sure you\u0026rsquo;re happy with the new site. Then commit the changes to the source repo, update the html files in the public submodule, and push both.\ngit add . ; git commit -m \u0026quot;msg\u0026quot;; git push # commit site src "},{"uri":"https://psuastro528.github.io/tools_used/tlt2020/","title":"Symposium for Teaching &amp; Learning with Technology 2020","tags":[],"description":"","content":"Integrating Jupyter Notebooks, Version Control, and GitHub Classroom \nEric Ford\nDept. of Astronomy \u0026amp; Astrophysics\n \nNote: Jupyter Notebooks enable instructors and students to integrate text, equations, figures, and computer code into lessons and assignments. Git, a distributed version control system, enables multiple contributors such as instructors, students, colleagues to efficiently update and improve curricular materials and assignments. GitHub Classroom allows instructors to see student submissions and provide detailed feedback on their work. This session will explain how these three technologies were integrated into a 2019 graduate-level class and discuss how these similar approaches could be applied and adapted for larger courses. Outline  Four Valuable Tools for Education The Problem: Combining them My Solution Room for Further Improvements Discussion   Four Valuable Tools  Git GitHub GitHub Classroom Jupyter  Note: The four tools that I referred to are: git, GitHub, GitHub Classroom, and Jupyter.\nBased on the pre-seminar survey, most participants weren\u0026rsquo;t familiar with these, so I\u0026rsquo;m going to spend some time introducing each, in case some of you might be interested in using any of these on their own. 1. Git  Distributed version control Works well for wide variety of projects from small to large Facilitates collaboration Open-source Valuable skill to develop  Note: Git is a system for providing version control.\nThe simplest form of version control would be keeping all the old copies of each file.\nGit is much more powerful than that, as it\u0026rsquo;s designed for multiple people to be editing multiple files. Git is used widely in industry, so it\u0026rsquo;s a good skill for students considering careers in CS, Data Science, STEM, web-development, etc.\n What is Git good for?  Software development  Big projects (e.g., Linux kernel) Small packages   Documentation Websites Workflows  Note: While git was designed for version controlling computer programs, but it\u0026rsquo;s also proven quite useful for many other applications.\nIt\u0026rsquo;s widely used for websites and writing documentation.\n What is Git good for? (in educational setting) Curricular materials\n Reading Materials Syllabus Assignments* Presentations**  Note: Several of you indicated that you were interested in preparing readings for students.\nIf you\u0026rsquo;re the only instructor who teaches a class, then you can just start from the documents you used last semester. But if another instructor taught the class last time, wouldn\u0026rsquo;t it be nice to quickly be able to find and review just what they\u0026rsquo;ve changed?\nOthers were interested in having students complete tutorials or submit lab reports or other homework assignments. Here, it\u0026rsquo;s nice for students to be able to enter their contributions right in the middle of the tutorial or instructions, but for the instructor to be able to see just the students changed.\nGit\u0026rsquo;s version controlling works well for both of those use cases. 2. GitHub*  De facto standard for open-source software collaboration. Adds valuable collaboration tools:  Managing Pull Requests: Submit, Discuss, Merge,\u0026hellip; Code Review Bug/issue tracking Documentation Continuous Integration / Continuous Deployment    Note: GitHub is a popular website that provides the servers for people to distribute and collaborate on documents, websites or computer code while using git version control system.\n Note: GitHub classroom helps to automate some common tasks when using GitHub for classes. Also important, it provides free private repositories, so students work and feedback can be kept private.\n Note:\nJupyter notebooks are an open document format that contain a mix of text, hyperlinks, images, equations and code.\nMost important, they\u0026rsquo;re interactive, so it\u0026rsquo;s easy to give students starter code, let them make small edits, inspect the results, and write what they\u0026rsquo;ve found. By integrating all these parts into one document, it makes it much easier for instructors or students to show their reasoning.\n * Many feel Jupyter notebooks are inferior to traditional IDEs for traditional software development.Note:\nThere are many applications of Jupyter notebooks.\nCommon applications involve showing the input data, how that data was manipulated, what analyses were performed, the resulting figures, and the conclusions drawn.\n What is a Jupyter notebook good for? (in educational setting)  Interactive lessons Tutorials Assignments involving data analysis or computation Document of a student\u0026rsquo;s work and decision making process  Note: The Problem Comparison of two versions of a Jupyter notebook:\n Many differences in meta-data Effectively not human-readable Important differences hard to isolate Interferes with code review, feedback and discussion.   Comparing Jupyter notebooks directly  One Solution  Key idea: Version control and compare Markdown versions of notebooks.  Note:\nJupyter notebooks contain lots of additional information that isn\u0026rsquo;t directly shown and were never meant to be read by a human. On the other hand, Markdown was intended to be easily human readable. It peals away the extram information, leaving behind only the text, equations, links, and very basic formatting instructions. So comparing Markdown allows us to focus on what\u0026rsquo;s important.\n Comparing Jupyter notebooks exported to Markdown  Markdown example Simple text is just text. Markdown can include:\n Links Formatting  bold italic   Equations ($E = mc^2$) and much more.   Markdown example\n## Markdown example Simple text is just text. Markdown can include: - [Links](https://www.markdownguide.org/) - Formatting - **bold** - _italic_ - Equations ($E = mc^2$) - and much more. ![ICDS mark](/images/icds-sig-graphic-icon.png)  GitHub Classroom Workflow:\n1. Instructor creates assignment as a template repository:  Create personal git repository (repo) with Jupyter notebook(s) for each assignment, including instructions, starter code, input data, etc. Convert Jupyter notebooks into Markdown format Recreate Jupyter notebooks from Markdown Create clean template repository Distribute link to assignment via GitHub Classroom   What goes into the template repository?   Starter notebook(s) in both Jupyter \u0026amp; markdown formats\n  Any other files needed (e.g., input data, license, dependanices, Docker config)\n  Test scripts\n  config for CI testing (e.g., Travis-CI.com) (optional)\n  Branches:\n main: where students will complete assignment original: copy of starting files in main branch solution: allows students to see your solutions (optional)     GitHub Classroom Workflow:\n2. Student does assignment as Jupyter notebook:  Follow link to create a private repo with starter files Clone the repository to their local computer (or ACI) Complete assignment(s) as Jupyter notebooks Perform tests and revise (optional)   Note: If instructor provides tests, then students can get immediate feedback on whether their submission passes the tests.\n Automated testing provides prompt feedback  Automated testing provides prompt feedback  Automated testing provides prompt feedback  GitHub Classroom Workflow:\n5. Discuss assignment collaboratively Instructor:\n Review specific lines of code/equations/text that student changed (as Markdown). Provide feedback  Student:\n Discuss, make changes, update/make new pull requests  Iterate!\nNote: Github interface makes it easy to for both student and instructor to see which lines they\u0026rsquo;re referring to.\n Instructor easily comments on specific lines  Record of discussion and changes  For more detailed step-by-step instructions for:\n instructors creating lab assignments students using/submitting labs  Note:\nI\u0026rsquo;ve provided more detailed instructions in the README for the example repository used in this presentation. Room for Further Improvements  Automate generation of clean assignment from solutions Reduce command-line operations for students  Automate process of generating markdown version via git hooks   Consider new tools/commercial services emerging  NBDime: For diffing Jupyter noteboks (open source) NBReview: For diffing and collaborative commenting on Jupyter noteboks. (commercial) IllumiDesk: Autograding w/ Canvas integration. (commercial)     Discussion  Other approaches to this problem? Other problems where a similar approach could be useful? Other questions about tools discussed?   Resources to learn more Jupter notebook-related:\n Jupyter NBViewer Binder NBDime   Resources to learn more Git-related:\n Git  Learn Git Version Control using Interactive Browser-Based Scenarios   GitHub GitHub Classroom   Resources to learn more Markdown/Jupyter Presentation Tools:\n Source for this presentation Reveal.js  CSS theme w/ PSU colors   Hugo  DocDock Theme   Rise   Resources to learn more Example GitHub Repository\nExample Jupyter Notebook\n View only (via NBViewer) Interactive   "},{"uri":"https://psuastro528.github.io/tools_used/ackl/","title":"Acknowledgments","tags":[],"description":"","content":"Acknowledgments People  Justin Petucci of ICS-ACI for providing instructions on setting up the Jupyter Notebook server to work with a Julia kernel. Michael Potter of ECoS Digital Learning for help creating Docker container/image for running Jupyter Notebook server with a Julia kernel. Adam Lavely, Christopher Blanton \u0026amp; Chuck Pavloski for helping to find online resources (from their CSE 597 course)  Hardware  ICDS-ACI for providing classroom support CyberLAMP team \u0026amp; NSF for providing GPU resources  Inspiration  Some material on this website is based on \u0026ldquo;Computational Thinking, a live online Julia/Pluto textbook, https://computationalthinking.mit.edu\u0026rdquo;.  "},{"uri":"https://psuastro528.github.io/lessons/week2/","title":"Week 2: Priorities","tags":[],"description":"","content":"Lessons / Resources  Learning goals     Readings      Lab 2 Monday Q\u0026amp;A: Git Monday Discussion: Priorities for Scientific Computing, Writing General Code  Instructions for using ACI  Create Account on Roar/ICDS-ACI Initial Setup on ACI Pluto Notebooks on ACI Starting \u0026amp; Submitting Assignments  Install Julia \u0026amp; Pluto on your local machine (optional)  See instructions from MIT Intro to Computational Thinking course (For your lab assignments, you\u0026rsquo;ll use Step 2b: Open an existing notebook file, rather than Step 1a Open a notebook from the web.)  "},{"uri":"https://psuastro528.github.io/lessons/week2/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 2  Priorities for Scientific Computing Exercise 1: Benchmarking  Benchmark functions accurately Predict cost of an algorithm based on Big-O analysis Identify real world complications that affect scaling   Exercise 2: Numerical Stability of N-body Integration  Integrate differential equations Compare the accuracy and numerical stability of results as a function of time step, order and integration algorithm Appreciate importance of numerical stability   Exercise 3: Assertions, Unit Tests \u0026amp; Continuous Integration Testing  Write effective tests for floating point calculations Reduce bugs via assertions Identify bugs promptly via unit testing Identify bugs promptly via continuous integration testing End-to-end Testing to validate code    Lessons along the way  Just-in-Time (JIT) Compilation Types of languages  Compiled vs Interpretted vs JIT Static/dynamic type-checking   Plotting with Plots.jl Keyword/Named function arguements Integration Algorithms  leapfrog symplectic    "},{"uri":"https://psuastro528.github.io/lessons/week2/read/","title":"Readings","tags":[],"description":"","content":"Week 2:  Prior to Monday\u0026rsquo;s class  Writing Scientific Software Ch 3: Priorities (6pg) Writing Scientific Software Ch 4: Famous Disasters (4pg) Best Practices for Scientiﬁc Computing: Sec. 1-4 (6pg)   Prior to Thursday\u0026rsquo;s class  Best Practices for Scientiﬁc Computing: Sec. 5-9 (5pg) Submit Lab 1    "},{"uri":"https://psuastro528.github.io/lessons/week2/lab/","title":"Exercises","tags":[],"description":"","content":" Lab 2: Best Practices: Assertions, Unit Testing, Continuous Integrations, Benchmarking (due Sept 9)  Exercise 1: Benchmarking, Big-O Analysis, Compute vs Memory Limits Exercise 2: Numerical Stability of N-body Exercise 3: Assertions, Unit Tests \u0026amp; Continuous Integration Testing  Lessons / Resources  Getting Started with Julia on ACI Starting \u0026amp; Submitting Assignments Julia Resources  Packages used  Documentation for DifferentialEquations.jl  "},{"uri":"https://psuastro528.github.io/lessons/week3/","title":"Week 3: Software Design","tags":[],"description":"","content":"Lessons / Resources  Learning goals     Readings      Lab 3 Monday Discussion: Priorities for Scientific Computing: Correctness, Documentation Thursday Q\u0026amp;A: Two-language Problem, Expert vs Non-Expert Interfaces  "},{"uri":"https://psuastro528.github.io/lessons/week3/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 3  Exercise 1  Recognize significance of memory layout \u0026amp; data structures Optimize serial code   Exercise 2  Recognize pros/cons of different file formats   Class Project  Apply \u0026ldquo;Programming in the Large\u0026rdquo; to your class project Choose appropriate file format for a project Choose appropriate memory layout \u0026amp; data structures for a project    Lessons along the way  Big-O notation File formats: CSV, FITS, HDF5, JLD2 Calling Python from Julia  "},{"uri":"https://psuastro528.github.io/lessons/week3/read/","title":"Readings","tags":[],"description":"","content":"Week 3:  No class Monday (Labor Day Holiday) Prior to Thursday\u0026rsquo;s class  Writing Scientific Software Ch 7: Software Design (26pg, ok to skip 7.11-12) A beginner\u0026rsquo;s guide to Big-O notation Big-O Cheat Sheet (a useful reference, not to read end-to-end) Submit Lab 2    "},{"uri":"https://psuastro528.github.io/lessons/week3/lab/","title":"Exercises","tags":[],"description":"","content":" Lab 3: Memory Access, Disk I/O, DataFrames (due Sept 16)\n Exercise 1: Dense Matrix-Vector Multiply: Optimizing serial code, Memory access paterns, Benchmarking Exercise 2: Benchmarking File I/O (no Python dependencies) Exercise 2: Benchmarking File I/O (\u0026amp; Calling Python Packages)   Lessons / Resources  Details for this class  Getting Started with Julia on ACI Starting \u0026amp; Submitting Assignments   Julia  Julia Manual Think Julia: How to Think Like a Computer Scientist Learn Julia in Y Minutes   File Formats  FITSIO library written in C HDF5 Apache Arrow   Julia packages for reading files  Julia\u0026rsquo;s FileIO.jl high-level API Julia\u0026rsquo;s JLD2.jl package Julia\u0026rsquo;s HDF5.jl package Julia\u0026rsquo;s FITSIO.jl package Julia\u0026rsquo;s [Apache Arrow.jl implementation Feather.jl PyCall.jl documentation.   Querying DataFrames  Query.jl DataFramesMeta.jl) JuliaDB.jl   Miscelaneous  Regular expressions in julia Astropy    "},{"uri":"https://psuastro528.github.io/lessons/week4/","title":"Week 4: Computer Architectures","tags":[],"description":"","content":"Lessons / Resources  Learning goals     Readings      Project Proposal Lab 4 Monday Q\u0026amp;A: Compilation, Code inspection, Vectorization, Memory Hierarchy  "},{"uri":"https://psuastro528.github.io/lessons/week4/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 4  Describe steps a CPU performs surrounding actual arithmetic Anticipate when performance will be affected by cache size Exercises  Fit a model to data Read \u0026amp; write models using a probabilistic programming language Estimate uncertainties in model parameters using Markov chain Monte Carlo   Project  Plan data structures to optimize for memory access Consider whether autodifferentiation and/or probablistic program model is appropriate for your project    Lessons along the way  Optimization Algorithms  Linear optimization: matrix solve Non-linear optimization: Nelder-Mead, Gradient Descent, BFGS   Utility of gradients  Autodifferentiation   Statistical inference  Posterior Sampling Markov chain Monte Carlo   Computer hardware  Bus Registers FPUs Prefetch Pipelining Out of order execution Cache: levels, lines, latency, associative    "},{"uri":"https://psuastro528.github.io/lessons/week4/read/","title":"Readings","tags":[],"description":"","content":"Week 4  Prior to Monday\u0026rsquo;s class  Submit Project Proposal Writing Scientific Software Ch 6: Computer Organization (12pg) Either  Introduction to High Performance Computing for Scientists and Engineers Ch 1: Modern Processors (32pg) -or- Introduction to High-Performance Computing Ch 1-1.3.4.1: Single-processor Computing (13pg)     Prior to Thursday\u0026rsquo;s class  Writing Scientific Software Ch 17.3: Profiling (2pg) Why does Julia work so well? Submit Lab 3    "},{"uri":"https://psuastro528.github.io/lessons/week5/","title":"Week 5: Optimization","tags":[],"description":"","content":"Lessons / Resources  Learning goals     Readings      Lab 5 Discussion and Q\u0026amp;A: What to Optimize, Programming Interfaces, Abstract Types  "},{"uri":"https://psuastro528.github.io/lessons/week5/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 5  Exercises  Profile code Identify type instability via code inspection macros Identify opportunities for optimziation  Writing type stable functions Optimize performance by reducing memory allocaitons   Optimize code for serial execution   Project  Profile code to identify code worth optimizing Document code to increase chances of useful feedback from peer code review    Lessons along the way  Type stability: @code_warntype, JETTest.jl Performance impact of global's Strict typing, sub-types, union types  "},{"uri":"https://psuastro528.github.io/lessons/week5/read/","title":"Readings","tags":[],"description":"","content":"Week 5   Prior to Monday\u0026rsquo;s class\n Introduction to High Performance Computing for Scientists and Engineers Ch 2: Serial Optimization (26pg) and/or Performance Tips (just the bold section headings is enough for now; come back to read more about any specific tip when it applies to your project)    Prior to Thursday\u0026rsquo;s class\n Submit Lab 4    Additional resources\n Julia Performance Tips ProfileView.jl ProfileSVG.jl JETTest.jl SnoopCompile.jl Cthulhu.jl Package development: improving engineering quality \u0026amp; latency | Workshop | JuliaCon 2021    "},{"uri":"https://psuastro528.github.io/lessons/week5/lab/","title":"Exercises","tags":[],"description":"","content":" Lab 5: Serial Optimizations: Profiling, Type Stability, Code Inspection \u0026amp; Optimization Patterns (due Sept 30)\n Exercise 1: Profiling Exercise 2: Type Stability \u0026amp; Code Inspection   "},{"uri":"https://psuastro528.github.io/lessons/week6/","title":"Week 6: Memory Systems","tags":[],"description":"","content":"Lessons / Resources  Learning goals     Readings      Discussion: Memory Allocation \u0026amp; Code Review  "},{"uri":"https://psuastro528.github.io/lessons/week6/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 6  Describe what an optimizing compiler can optimize for you Describe what an optimizing compiler can\u0026rsquo;t optimize for you Understand how linear algebra libraries acheive peak performance through memory access pattern Describe interaction between global variables and type stability of functions Explain why parallelism in increasingly important Describe function overloading \u0026amp; multiple dispatch Describe benefits of use abstract types and containers of abstract types Describe benefits of an Application Programming Interface  Lessons along the way "},{"uri":"https://psuastro528.github.io/lessons/week6/read/","title":"Readings","tags":[],"description":"","content":"Week 6  Prior to Monday\u0026rsquo;s class  Writing Scientific Software Ch 14: Memory Allocation \u0026amp; Garbage Collection (excluding 4.5; 11pg) Writing Scientific Software Ch 12.1: Caches \u0026amp; memory hierarchies, 12.4 Threashing, 12.5 Designing for memory hierarchies, 12.6 Dynamic data structures and memory hierarchies (pg) Latency Numbers Every Programmer Should Know Optionally one of  Introduction to High Performance Computing for Scientists and Engineers Ch 3 Data Access Optimization (excluding 3.1.2, 3.3, 3.3; 20pg) Introduction to High-Performance Computing Ch 1.7: Programming strategies for high performance (16pg)     Prior to Thursday\u0026rsquo;s class  Best Practices for Code Review Submit Lab 5    Lessons / Resources  “What Every Programmer Should Know about Memory” (Drepper 2007) (TODO pick subset)  "},{"uri":"https://psuastro528.github.io/lessons/week7/","title":"Week 7: Parallel Computing","tags":[],"description":"","content":"Lessons / Resources  Learning goals     Readings      Serial implementation of class project Monday Discussion: Code Review Best Practices Thursday Discusion: Introduction to Parallelization  Serial implemenation ready for peer code review due Oct 4 "},{"uri":"https://psuastro528.github.io/lessons/week7/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 7  Project  Provide constructive feedback in code review Use GitHub Issues to manage tasks for code base   Readings / Discussions  Evaluating the suitability of a problem for different parallel architectures    "},{"uri":"https://psuastro528.github.io/lessons/week7/read/","title":"Readings","tags":[],"description":"","content":"Week 7  No new readings, but be helpful to review: Best Practices for Code Review Code Reiew Best Practices from Palantir Blog 13 Code Review Standards Inspired by Google  Lessons / Resources  “What Every Programmer Should Know about Memory” (Drepper 2007) (TODO pick subset)  "},{"uri":"https://psuastro528.github.io/lessons/week8/lab/","title":"Exercises","tags":[],"description":"","content":" Lab 6: Parallel Programming I: Shared-memory Systems (due Oct 21)\n Exercise 1: Parallelization for Multi-Core Workstations via Multiple-Threads Exercise 2: Parallelization for Multi-Core Workstations via Multiple Processes   "},{"uri":"https://psuastro528.github.io/lessons/week8/","title":"Week 8: Parallel Programming I","tags":[],"description":"","content":"Lessons / Resources  Learning goals     Readings      Lab 6 Week 8, Monday: Parallelization: Q\u0026amp;A and Scaling Laws  "},{"uri":"https://psuastro528.github.io/lessons/week8/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 8  Lab 6: Shared Memory Computing Patterns   Choose an appropriate number of worker processors for your compute node \u0026amp; problem\n  Parallelize code using shared memory model \u0026amp; multiple threads, using tools such as:\n ThreadsX.map and ThreadsX.mapreduce Threads.@threads ThreadsX.foreach FLoops.jl and ThreadedEx (recommended) Threads Folds.jl (alternative)    Parallelize code using shared memory model \u0026amp; multiple processes, using tools such as:\n pmap SharedArrays DistributedArrays.jl w/ using map and mapreduce @distributed for loop FLoops.jl and DistributedEx (recommended) Folds.jl (alternative)     Readings / Discussions  Evaluating the suitability of a problem for different parallel architectures    Lessons along the way  Reinforce programming patterns demonstrated in Lab 5  Organize code into files and a module Using function-like objects Using broadcasting Using abstract types Using parametric types    "},{"uri":"https://psuastro528.github.io/lessons/week8/read/","title":"Readings","tags":[],"description":"","content":"Week 8  Prior to Monday\u0026rsquo;s class  Introduction to Parallel Computing Sec B-E -or- Introduction to High-Performance Computing Ch 2.1-2.4: Parallel Computing (19pg) -or- Introduction to High Performance Computing for Scientists and Engineers:  Ch 4 Parallel Computers (20pg) -and- Ch 5 Basics of Parallelization (22pg)      Lessons / Resources  OpenMP (for students with projects using C/C++ or Fortran)  Parallel Programming in OpenMP -or- Introduction to High Performance Computing for Scientists and Engineers Ch 6: Shared-memory Parallel Programming w/ OpenMP (22pg) Introduction to High Performance Computing for Scientists and Engineers Ch 7.2: Efficient OpenMP Programming: Performance Pitfalls (22pg) (optional)    "},{"uri":"https://psuastro528.github.io/lessons/week4/lab/","title":"Exercises","tags":[],"description":"","content":" Lab 4: Higher-level Languages \u0026amp; Probabilistic Programming (due Sept 23)\n Exercise 1: Auto-differentiation \u0026amp; Optimization (as in minimization/maximization of a function) Exercise 2: Probabilistic Programming Language   Resources  Autodifferentiation  ForwardDiff.jl DiffResults.jl ReverseDiff.jl Zygote.jl   Model Fitting  Optim.jl LsqFit.jl GLM.jl   Minimization Algorithms  [Gradient Descent](https://en.wikipedia.org/wiki/Gradient_descent Downhill Simplex BFGS   Probabilistic Programming  Turing.jl MCMCChains.jl Soss.jl   Sampling Algorithms  NUTS    "},{"uri":"https://psuastro528.github.io/lessons/week9/","title":"Week 9: Parallel Programming II","tags":[],"description":"","content":"Lessons / Resources  Learning goals     Readings      Lab 7 Week 9, Monday Discussion: Using the Roar supercomputer Week 9, Monday Q\u0026amp;A: Distributed memory programming  "},{"uri":"https://psuastro528.github.io/lessons/week9/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 9  Lab 7, Exercise 1: Run batch jobs on ICDS-ACI/Roar:  Submit a batch job via PBS Read and write data from batch job Run multiple jobs using a job array   Lab 7, Exercise 2: Parallelize code for Distributed memory model, using patterns such as:  Load code and packages on worker nodes Parallelize code over multiple compute nodes, using at least one of:  pmap (recommended) DistributedArrays.jl with map and mapreduce (recommended) FLoops.jl and DistributedEx (recommended) @distributed for loop (alternative) Parallelize code using Dagger.jl (alternative)   Explain differences in performance when using multiple processor cores on same node versus using multiple processor cores on different nodes   Project  Run project code as batch job on the ICDS-ACI cluster   Readings / Discussions  Evaluating the suitability of a problem for different parallel architectures    Lessons along the way "},{"uri":"https://psuastro528.github.io/lessons/week9/read/","title":"Readings","tags":[],"description":"","content":"Week 9  Prior to Monday\u0026rsquo;s class  Distributed Processing with Julia (stop after Parralel Map and Loops)    Lessons / Resources  MPI (for students with projects using C/C++ or Fortran)  Introduction to High Performance Computing for Scientists and Engineers Ch 9: Distributed memory Parallel Programming w/ MPI (29pg) Introduction to High Performance Computing for Scientists and Engineers Ch 10: Efficient MPI Programming (optional) Introduction to High-Performance Computing Ch 2.6.3 (11pg)    "},{"uri":"https://psuastro528.github.io/lessons/week9/lab/","title":"Exercises","tags":[],"description":"","content":" Lab 7: Parallel Programming II: Batch Jobs \u0026amp; Distributed Memory Systems (due Oct 28)\n Exercise 1: Submitting Batch Jobs to ICS-ACI Cluster Exercise 2: Parallelization for Distributed-memory Systems (e.g., Clusters, Cloud) Exercise 3: Run your project code as a batch job on ICS-ACI   "},{"uri":"https://psuastro528.github.io/lessons/week10/","title":"Week 10: Accelerators &amp; GPUs","tags":[],"description":"","content":"Lessons / Resources  Learning goals     Readings      Week 10, Monday Discussion: GPU Computing Week 10, Thursday Q\u0026amp;A: GPU Computing  "},{"uri":"https://psuastro528.github.io/lessons/week10/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 10  Project  Gain experience parallelizing a real world code Identify changes need to acheive significant performance benefit via parallelization   Readings / Discussions  Describe how GPU differs from CPU Assess the prospects for a given algorithm to achieve a significant speed-up using a GPU    "},{"uri":"https://psuastro528.github.io/lessons/week10/read/","title":"Readings","tags":[],"description":"","content":"Week 10  Prior to Monday\u0026rsquo;s class  An Introduction to GPU Programming from UC Berkeleys\u0026rsquo; CS 267 Introduction to GPU Programming in Julia    Lessons / Resources  Introduction to CUDA   JuliaCon 2021 GPU Programming Workshop: CUDA deep dive notebook Effectively using GPUs with Julia (a bit dated, but concepts are covered well )  "},{"uri":"https://psuastro528.github.io/lessons/week11/lab/","title":"Exercises","tags":[],"description":"","content":" Lab 8: Parallel Programming III: GPUs \u0026amp; Other Hardware Accelerators (due Nov 11)\n Exercise 1: Getting Setup for GPU Computing \u0026amp; Linear Algebra Exercise 2: GPU Kernels \u0026amp; Array Programming   "},{"uri":"https://psuastro528.github.io/lessons/week11/","title":"Week 11: GPU Programming","tags":[],"description":"","content":"Lessons / Resources  Learning goals     Readings      Shared-memory parallel implementation of class project Lab 8  First parallel implementation of project due Nov 1 "},{"uri":"https://psuastro528.github.io/lessons/week11/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 11  Lab 8, Exercise 1  Run GPU code on ICDS-ACI/Roar Accelerate linear algebra computations with GPU Recognize what problem sizes and likely to result in acceleration with a GPU for linear algebra   Lab 8, Exercise 2:  Learn to write a GPU kernel, using KernelAbstractions.jl Improve performance by reducing memory transfers via GPU reductions Perform custom scientific computations using high-level GPU interface, such as  map or mapreduce on CuArray from CUDA.jl (recommended), or Folds.jl with CUDAEx() executor from FoldsCUDA.jl   Improve performance through reduced memory allocations Recognize what types of problems and problem sizes are likely to result in acceleration with a GPU when using a high-level programming interface or custom GPU kernel   Project  Parallelize real world code Achieve significant performance benefit via parallelization    Resources  GPU Workshop at JuliaCon 2021  "},{"uri":"https://psuastro528.github.io/lessons/week11/read/","title":"Readings","tags":[],"description":"","content":"Week 11  Prior to Monday\u0026rsquo;s class  Best Practices for Scientific Computing: (Sec 2; yes, let\u0026rsquo;s all read it again!) Best Practices for Scientific Computing: (Reference list on last page, just in case you didn\u0026rsquo;t notice it before!)    "},{"uri":"https://psuastro528.github.io/lessons/week12/","title":"Week 12: Cloud Computing","tags":[],"description":"","content":"Lessons / Resources  Learning goals     Readings      Lab 9  "},{"uri":"https://psuastro528.github.io/lessons/week13/","title":"Week 13: Packaging &amp; Reproducibility","tags":[],"description":"","content":"Lessons / Resources  Learning goals     Readings      Second parallel implementation of class project (typically using distributed-memory or GPU)  Second parallel implementation of project due Nov 18 "},{"uri":"https://psuastro528.github.io/lessons/week12/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 12  Project  Gain experience with second mechanism for parallelizing real world code Work towards achieving a significant performance benefit via second parallelization   Readings / Discussions  Describe benefits and disadvantages of cloud computing Determine whether a project would be well suited for running in the cloud    Lessons along the way  Virtual machines Containers \u0026amp; images Docker \u0026amp; Singularity  "},{"uri":"https://psuastro528.github.io/lessons/week12/read/","title":"Readings","tags":[],"description":"","content":"Week 12 Lessons / Resources  Docker Orientation  "},{"uri":"https://psuastro528.github.io/lessons/week13/lab/","title":"Exercises","tags":[],"description":"","content":"Reproducibility: Packages, Environments \u0026amp; Containers Lab 9: Reproducibility: Packages, Environments, Containers \u0026amp; the Cloud (TBC; due Nov 18)\n TBD   "},{"uri":"https://psuastro528.github.io/lessons/week13/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 13  Readings / Discussions  Identify common challenges for providing reproducible software \u0026amp; workflow Describe how Julia\u0026rsquo;s package manager facilitate reproducible research Describe other common tools \u0026amp; strategies for facilitating reproducible research    Lessons along the way  Projects \u0026amp; environments  "},{"uri":"https://psuastro528.github.io/lessons/week13/read/","title":"Readings","tags":[],"description":"","content":"Week 13  Prior to Monday\u0026rsquo;s class  Writing Scientific Software Ch 17.1: Make (4pg; if using C/C++ or Fortran for project) -or- Julia Package Development: Sec. 1-3 (stop after Updating Packages; if using Julia for project)    Lessons / Resources  PkgTemplates.jl Docker Orientation  "},{"uri":"https://psuastro528.github.io/lessons/week14/","title":"Week 14: Full Class Project due","tags":[],"description":"","content":"Lessons / Resources  Learning goals      Completed class project  Full Project Due Dec 2 "},{"uri":"https://psuastro528.github.io/lessons/week14/goals/","title":"Learning goals","tags":[],"description":"","content":"Week 14  Project  Characterize performance of class project Characterize performance as a function of problem size Characterize performance as a function of number of processors (both strong and weak scaling) Predict how much performance could be improved with further optimization/parallelization Make code easy for others to reuse Make benchmarks easy to reproduce (for their own system) Complete/clean-up project documentation and packaging    "},{"uri":"https://psuastro528.github.io/lessons/weeks-end/","title":"Weeks 13-15: Project Presentations","tags":[],"description":"","content":"Lessons / Resources  Learning goals      Presentations of Class Projects \u0026amp; Lessons Learned  "},{"uri":"https://psuastro528.github.io/lessons/weeks-end/goals/","title":"Learning goals","tags":[],"description":"","content":"Weeks 13-15  Explain reasons for observed performance of class project Share lessons learned in course of each class project  "},{"uri":"https://psuastro528.github.io/","title":"Penn State Astro 528: High-Performance Scientific Computing for Astrophysics (Fall 2021)","tags":[],"description":"","content":"High-Performance Scientific Computing for Astrophysics Astro 528 (Fall 2021) High-Performance Scientific Computing for Astrophysics will combine class discussion and programming exercises to train students in the use of modern computing hardware and programming strategies for application to astronomy and astrophysics research. Students will gain experience applying these practices during a class project (potentially in support of the student’s dissertation research).\n Syllabus Labs Class Project Schedule Tips \u0026amp; How-Tos Additional Resources  Reusing \u0026amp; citing this work If you use any of these materials in academic work (e.g., courses, papers), please cite Ford, Eric B. 2021 doi:10.26207/zt99-ba86. If you use any of these materials in websites, please consider linking to PSU Astro 528: High-Performance Computing for Astrophysics course materials (Fall 2021).\nThe course materials are licensed as follows:\n The code is under the MIT license. The text is under the CC BY-SA 4.0 license.  "},{"uri":"https://psuastro528.github.io/_footer/","title":"","tags":[],"description":"","content":"© Eric Ford - 2021 creative commons cc-by\nPenn State \u0026mdash; Astronomy \u0026amp; Astrophysics \u0026mdash; Institute for Computational \u0026amp; Data Sciences\n"},{"uri":"https://psuastro528.github.io/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://psuastro528.github.io/tags/","title":"Tags","tags":[],"description":"","content":""}]